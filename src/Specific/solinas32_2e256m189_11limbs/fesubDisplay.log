sub = λ var : Z.Syntax.base_type → Type,
λ '(x20, x21, x19, x17, x15, x13, x11, x9, x7, x5, x3, (x40, x41, x39, x37, x35, x33, x31, x29, x27, x25, x23))%core,
(((0xfffffe + x20) - x40), ((0xfffffe + x21) - x41), ((0xfffffe + x19) - x39), ((0x1fffffe + x17) - x37), ((0xfffffe + x15) - x35), ((0xfffffe + x13) - x33), ((0xfffffe + x11) - x31), ((0x1fffffe + x9) - x29), ((0xfffffe + x7) - x27), ((0xfffffe + x5) - x25), ((0x1fffe86 + x3) - x23))
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t) -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
