square = λ var : Z.Syntax.base_type → Type,
λ '(x10, x11, x9, x7, x5, x3, x1)%core,
uint64_t x12 = (0x2 * ((uint64_t)x10 * x10));
uint64_t x13 = ((0x2 * ((uint64_t)x11 * x10)) + (0x2 * ((uint64_t)x10 * x11)));
uint64_t x14 = (((uint64_t)x9 * x10) + (((uint64_t)x11 * x11) + ((uint64_t)x10 * x9)));
uint64_t x15 = ((0x2 * ((uint64_t)x7 * x10)) + (((uint64_t)x9 * x11) + (((uint64_t)x11 * x9) + (0x2 * ((uint64_t)x10 * x7)))));
uint64_t x16 = ((0x2 * ((uint64_t)x5 * x10)) + ((0x2 * ((uint64_t)x7 * x11)) + (((uint64_t)x9 * x9) + ((0x2 * ((uint64_t)x11 * x7)) + (0x2 * ((uint64_t)x10 * x5))))));
uint64_t x17 = ((0x2 * ((uint64_t)x3 * x10)) + ((0x2 * ((uint64_t)x5 * x11)) + ((0x2 * ((uint64_t)x7 * x9)) + ((0x2 * ((uint64_t)x9 * x7)) + ((0x2 * ((uint64_t)x11 * x5)) + (0x2 * ((uint64_t)x10 * x3)))))));
uint64_t x18 = (((uint64_t)x1 * x10) + (((uint64_t)x3 * x11) + (((uint64_t)x5 * x9) + ((0x2 * ((uint64_t)x7 * x7)) + (((uint64_t)x9 * x5) + (((uint64_t)x11 * x3) + ((uint64_t)x10 * x1)))))));
uint64_t x19 = (((uint64_t)x1 * x11) + (((uint64_t)x3 * x9) + ((0x2 * ((uint64_t)x5 * x7)) + ((0x2 * ((uint64_t)x7 * x5)) + (((uint64_t)x9 * x3) + ((uint64_t)x11 * x1))))));
uint64_t x20 = (((uint64_t)x1 * x9) + ((0x2 * ((uint64_t)x3 * x7)) + ((0x2 * ((uint64_t)x5 * x5)) + ((0x2 * ((uint64_t)x7 * x3)) + ((uint64_t)x9 * x1)))));
uint64_t x21 = (((uint64_t)x1 * x7) + (((uint64_t)x3 * x5) + (((uint64_t)x5 * x3) + ((uint64_t)x7 * x1))));
uint64_t x22 = (((uint64_t)x1 * x5) + (((uint64_t)x3 * x3) + ((uint64_t)x5 * x1)));
uint64_t x23 = (((uint64_t)x1 * x3) + ((uint64_t)x3 * x1));
uint64_t x24 = ((uint64_t)x1 * x1);
uint64_t x25 = (x19 + (0x5 * x12));
uint64_t x26 = (x20 + (0x5 * x13));
uint64_t x27 = (x21 + (0x5 * x14));
uint64_t x28 = (x22 + (0x5 * x15));
uint64_t x29 = (x23 + (0x5 * x16));
uint64_t x30 = (x24 + (0x5 * x17));
uint64_t x31 = (x30 >> 0x18);
uint32_t x32 = ((uint32_t)x30 & 0xffffff);
uint64_t x33 = (x31 + x29);
uint64_t x34 = (x33 >> 0x18);
uint32_t x35 = ((uint32_t)x33 & 0xffffff);
uint64_t x36 = (x34 + x28);
uint32_t x37 = (uint32_t) (x36 >> 0x18);
uint32_t x38 = ((uint32_t)x36 & 0xffffff);
uint64_t x39 = (x37 + x27);
uint64_t x40 = (x39 >> 0x17);
uint32_t x41 = ((uint32_t)x39 & 0x7fffff);
uint64_t x42 = (x40 + x26);
uint32_t x43 = (uint32_t) (x42 >> 0x18);
uint32_t x44 = ((uint32_t)x42 & 0xffffff);
uint64_t x45 = (x43 + x25);
uint32_t x46 = (uint32_t) (x45 >> 0x18);
uint32_t x47 = ((uint32_t)x45 & 0xffffff);
uint64_t x48 = (x46 + x18);
uint32_t x49 = (uint32_t) (x48 >> 0x17);
uint32_t x50 = ((uint32_t)x48 & 0x7fffff);
uint64_t x51 = (x32 + ((uint64_t)0x5 * x49));
uint32_t x52 = (uint32_t) (x51 >> 0x18);
uint32_t x53 = ((uint32_t)x51 & 0xffffff);
uint32_t x54 = (x52 + x35);
uint32_t x55 = (x54 >> 0x18);
uint32_t x56 = (x54 & 0xffffff);
return (Return x50, Return x47, Return x44, Return x41, (x55 + x38), Return x56, Return x53)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
