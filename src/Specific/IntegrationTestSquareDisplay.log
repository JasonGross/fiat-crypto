λ x : word64 * word64 * word64 * word64 * word64,
Interp-η
(λ var : Syntax.base_type → Type,
 λ '(x7, x8, x6, x4, x2)%core,
 uint128_t x9 = (uint128_t) x2 * (uint128_t) x7;
 uint128_t x10 = (uint128_t) x4 * (uint128_t) x8;
 uint128_t x11 = (uint128_t) x6 * (uint128_t) x6;
 uint128_t x12 = x10 + x9;
 uint128_t x13 = x11 + x12;
 uint128_t x14 = x10 + x13;
 uint128_t x15 = x9 + x14;
 uint128_t x16 = (uint128_t) x2 * (uint128_t) x8;
 uint128_t x17 = (uint128_t) x4 * (uint128_t) x6;
 uint128_t x18 = x17 + x16;
 uint128_t x19 = x17 + x18;
 uint128_t x20 = x16 + x19;
 uint128_t x21 = (uint128_t) x7 * (uint128_t) x7;
 uint128_t x22 = (uint128_t) 0x13 * x21;
 uint128_t x23 = x20 + x22;
 uint128_t x24 = (uint128_t) x2 * (uint128_t) x6;
 uint128_t x25 = (uint128_t) x4 * (uint128_t) x4;
 uint128_t x26 = x25 + x24;
 uint128_t x27 = x24 + x26;
 uint128_t x28 = (uint128_t) x8 * (uint128_t) x7;
 uint128_t x29 = x28 + x28;
 uint128_t x30 = (uint128_t) 0x13 * x29;
 uint128_t x31 = x27 + x30;
 uint128_t x32 = (uint128_t) x2 * (uint128_t) x4;
 uint128_t x33 = x32 + x32;
 uint128_t x34 = (uint128_t) x6 * (uint128_t) x7;
 uint128_t x35 = (uint128_t) x8 * (uint128_t) x8;
 uint128_t x36 = x35 + x34;
 uint128_t x37 = x34 + x36;
 uint128_t x38 = (uint128_t) 0x13 * x37;
 uint128_t x39 = x33 + x38;
 uint128_t x40 = (uint128_t) x2 * (uint128_t) x2;
 uint128_t x41 = (uint128_t) x4 * (uint128_t) x7;
 uint128_t x42 = (uint128_t) x6 * (uint128_t) x8;
 uint128_t x43 = x42 + x41;
 uint128_t x44 = x42 + x43;
 uint128_t x45 = x41 + x44;
 uint128_t x46 = (uint128_t) 0x13 * x45;
 uint128_t x47 = x40 + x46;
 uint64_t x48 = (uint64_t) (x47 >> 0x33);
 uint128_t x49 = (uint128_t) x48 + x39;
 uint64_t x50 = (uint64_t) (x49 >> 0x33);
 uint128_t x51 = (uint128_t) x50 + x31;
 uint64_t x52 = (uint64_t) (x51 >> 0x33);
 uint128_t x53 = (uint128_t) x52 + x23;
 uint64_t x54 = (uint64_t) (x53 >> 0x33);
 uint128_t x55 = (uint128_t) x54 + x15;
 uint64_t x56 = (uint64_t) x47 & 0x7ffffffffffff;
 uint64_t x57 = (uint64_t) (x55 >> 0x33);
 uint64_t x58 = 0x13 * x57;
 uint64_t x59 = x56 + x58;
 uint64_t x60 = (uint64_t) (x59 >> 0x33);
 uint64_t x61 = (uint64_t) x49 & 0x7ffffffffffff;
 uint64_t x62 = x60 + x61;
 uint64_t x63 = (uint64_t) x55 & 0x7ffffffffffff;
 uint64_t x64 = (uint64_t) x53 & 0x7ffffffffffff;
 uint64_t x65 = (uint64_t) (x62 >> 0x33);
 uint64_t x66 = (uint64_t) x51 & 0x7ffffffffffff;
 uint64_t x67 = x65 + x66;
 uint64_t x68 = x62 & 0x7ffffffffffff;
 uint64_t x69 = x59 & 0x7ffffffffffff;
 (Return x63, Return x64, Return x67, Return x68, Return x69))
x
     : word64 * word64 * word64 * word64 * word64 → ReturnType (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)
