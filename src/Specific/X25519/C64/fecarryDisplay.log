carry = λ var : Z.Syntax.base_type → Type,
λ '(x6, x7, x5, x3, x1)%core,
uint64_t x8 = (x1 >> 0x33);
uint64_t x9 = (x1 & 0x7ffffffffffff);
uint64_t x10 = (x8 + x3);
uint64_t x11 = (x10 >> 0x33);
uint64_t x12 = (x10 & 0x7ffffffffffff);
uint64_t x13 = (x11 + x5);
uint64_t x14 = (x13 >> 0x33);
uint64_t x15 = (x13 & 0x7ffffffffffff);
uint64_t x16 = (x14 + x7);
uint64_t x17 = (x16 >> 0x33);
uint64_t x18 = (x16 & 0x7ffffffffffff);
uint64_t x19 = (x17 + x6);
uint64_t x20 = (x19 >> 0x33);
uint64_t x21 = (x19 & 0x7ffffffffffff);
uint64_t x22 = (x9 + (0x13 * x20));
uint64_t x23 = (x22 >> 0x33);
uint64_t x24 = (x22 & 0x7ffffffffffff);
uint64_t x25 = (x23 + x12);
uint64_t x26 = (x25 >> 0x33);
uint64_t x27 = (x25 & 0x7ffffffffffff);
return (Return x21, Return x18, (x26 + x15), Return x27, Return x24)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t -> uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
