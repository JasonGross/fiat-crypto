square = λ var : Z.Syntax.base_type → Type,
λ '(x6, x7, x5, x3, x1)%core,
uint64_t x8 = (x1 * 0x2);
uint64_t x9 = (x3 * 0x2);
uint64_t x10 = ((x5 * 0x2) * 0x13);
uint64_t x11 = (x6 * 0x13);
uint64_t x12 = (x11 * 0x2);
uint128_t x13 = ((((uint128_t)x1 * x1) + ((uint128_t)x12 * x3)) + ((uint128_t)x10 * x7));
uint128_t x14 = ((((uint128_t)x8 * x3) + ((uint128_t)x12 * x5)) + ((uint128_t)x7 * (x7 * 0x13)));
uint128_t x15 = ((((uint128_t)x8 * x5) + ((uint128_t)x3 * x3)) + ((uint128_t)x12 * x7));
uint128_t x16 = ((((uint128_t)x8 * x7) + ((uint128_t)x9 * x5)) + ((uint128_t)x6 * x11));
uint128_t x17 = ((((uint128_t)x8 * x6) + ((uint128_t)x9 * x7)) + ((uint128_t)x5 * x5));
uint64_t x18 = (uint64_t) (x13 >> 0x33);
uint64_t x19 = ((uint64_t)x13 & 0x7ffffffffffff);
uint128_t x20 = (x18 + x14);
uint64_t x21 = (uint64_t) (x20 >> 0x33);
uint64_t x22 = ((uint64_t)x20 & 0x7ffffffffffff);
uint128_t x23 = (x21 + x15);
uint64_t x24 = (uint64_t) (x23 >> 0x33);
uint64_t x25 = ((uint64_t)x23 & 0x7ffffffffffff);
uint128_t x26 = (x24 + x16);
uint64_t x27 = (uint64_t) (x26 >> 0x33);
uint64_t x28 = ((uint64_t)x26 & 0x7ffffffffffff);
uint128_t x29 = (x27 + x17);
uint64_t x30 = (uint64_t) (x29 >> 0x33);
uint64_t x31 = ((uint64_t)x29 & 0x7ffffffffffff);
uint64_t x32 = (x19 + (0x13 * x30));
uint64_t x33 = (x32 >> 0x33);
uint64_t x34 = (x32 & 0x7ffffffffffff);
uint64_t x35 = (x33 + x22);
uint64_t x36 = (x35 >> 0x33);
uint64_t x37 = (x35 & 0x7ffffffffffff);
return (Return x31, Return x28, (x36 + x25), Return x37, Return x34)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t -> uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
