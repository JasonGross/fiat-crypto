carry = λ var : Z.Syntax.base_type → Type,
λ '(x16, x17, x15, x13, x11, x9, x7, x5, x3, x1)%core,
uint32_t x18 = (x1 >> 0x1a);
uint32_t x19 = (x1 & 0x3ffffff);
uint32_t x20 = (x18 + x3);
uint32_t x21 = (x20 >> 0x19);
uint32_t x22 = (x20 & 0x1ffffff);
uint32_t x23 = (x21 + x5);
uint32_t x24 = (x23 >> 0x1a);
uint32_t x25 = (x23 & 0x3ffffff);
uint32_t x26 = (x24 + x7);
uint32_t x27 = (x26 >> 0x19);
uint32_t x28 = (x26 & 0x1ffffff);
uint32_t x29 = (x27 + x9);
uint32_t x30 = (x29 >> 0x1a);
uint32_t x31 = (x29 & 0x3ffffff);
uint32_t x32 = (x30 + x11);
uint32_t x33 = (x32 >> 0x19);
uint32_t x34 = (x32 & 0x1ffffff);
uint32_t x35 = (x33 + x13);
uint32_t x36 = (x35 >> 0x1a);
uint32_t x37 = (x35 & 0x3ffffff);
uint32_t x38 = (x36 + x15);
uint32_t x39 = (x38 >> 0x19);
uint32_t x40 = (x38 & 0x1ffffff);
uint32_t x41 = (x39 + x17);
uint32_t x42 = (x41 >> 0x1a);
uint32_t x43 = (x41 & 0x3ffffff);
uint32_t x44 = (x42 + x16);
uint32_t x45 = (x44 >> 0x19);
uint32_t x46 = (x44 & 0x1ffffff);
uint32_t x47 = (x19 + (0x13 * x45));
uint32_t x48 = (x47 >> 0x1a);
uint32_t x49 = (x47 & 0x3ffffff);
uint32_t x50 = (x48 + x22);
uint32_t x51 = (x50 >> 0x19);
uint32_t x52 = (x50 & 0x1ffffff);
return (Return x46, Return x43, Return x40, Return x37, Return x34, Return x31, Return x28, (x51 + x25), Return x52, Return x49)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
