mul = λ var : Z.Syntax.base_type → Type,
λ '(x8, x9, x7, x5, x3, (x16, x17, x15, x13, x11))%core,
uint128_t x18 = (0x2 * ((uint128_t)x8 * x16));
uint128_t x19 = (((uint128_t)x9 * x16) + ((uint128_t)x8 * x17));
uint128_t x20 = ((0x2 * ((uint128_t)x7 * x16)) + (((uint128_t)x9 * x17) + (0x2 * ((uint128_t)x8 * x15))));
uint128_t x21 = ((0x2 * ((uint128_t)x5 * x16)) + ((0x2 * ((uint128_t)x7 * x17)) + ((0x2 * ((uint128_t)x9 * x15)) + (0x2 * ((uint128_t)x8 * x13)))));
uint128_t x22 = (((uint128_t)x3 * x16) + (((uint128_t)x5 * x17) + ((0x2 * ((uint128_t)x7 * x15)) + (((uint128_t)x9 * x13) + ((uint128_t)x8 * x11)))));
uint128_t x23 = (((uint128_t)x3 * x17) + ((0x2 * ((uint128_t)x5 * x15)) + ((0x2 * ((uint128_t)x7 * x13)) + ((uint128_t)x9 * x11))));
uint128_t x24 = (((uint128_t)x3 * x15) + (((uint128_t)x5 * x13) + ((uint128_t)x7 * x11)));
uint128_t x25 = (((uint128_t)x3 * x13) + ((uint128_t)x5 * x11));
uint128_t x26 = ((uint128_t)x3 * x11);
uint128_t x27 = (x23 + (0x9 * x18));
uint128_t x28 = (x24 + (0x9 * x19));
uint128_t x29 = (x25 + (0x9 * x20));
uint128_t x30 = (x26 + (0x9 * x21));
uint64_t x31 = (uint64_t) (x30 >> 0x31);
uint64_t x32 = ((uint64_t)x30 & 0x1ffffffffffff);
uint128_t x33 = (x31 + x29);
uint64_t x34 = (uint64_t) (x33 >> 0x31);
uint64_t x35 = ((uint64_t)x33 & 0x1ffffffffffff);
uint128_t x36 = (x34 + x28);
uint64_t x37 = (uint64_t) (x36 >> 0x30);
uint64_t x38 = ((uint64_t)x36 & 0xffffffffffff);
uint128_t x39 = (x37 + x27);
uint64_t x40 = (uint64_t) (x39 >> 0x31);
uint64_t x41 = ((uint64_t)x39 & 0x1ffffffffffff);
uint128_t x42 = (x40 + x22);
uint64_t x43 = (uint64_t) (x42 >> 0x30);
uint64_t x44 = ((uint64_t)x42 & 0xffffffffffff);
uint64_t x45 = (x32 + (0x9 * x43));
uint64_t x46 = (x45 >> 0x31);
uint64_t x47 = (x45 & 0x1ffffffffffff);
uint64_t x48 = (x46 + x35);
uint64_t x49 = (x48 >> 0x31);
uint64_t x50 = (x48 & 0x1ffffffffffff);
return (Return x44, Return x41, (x49 + x38), Return x50, Return x47)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t) -> uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
