square = λ var : Z.Syntax.base_type → Type,
λ '(x6, x7, x5, x3, x1)%core,
uint64_t x8 = ((uint64_t)x6 * x6);
uint64_t x9 = ((0x2 * ((uint64_t)x7 * x6)) + (0x2 * ((uint64_t)x6 * x7)));
uint64_t x10 = (((uint64_t)x5 * x6) + ((0x2 * ((uint64_t)x7 * x7)) + ((uint64_t)x6 * x5)));
uint64_t x11 = ((0x2 * ((uint64_t)x3 * x6)) + ((0x2 * ((uint64_t)x5 * x7)) + ((0x2 * ((uint64_t)x7 * x5)) + (0x2 * ((uint64_t)x6 * x3)))));
uint64_t x12 = (((uint64_t)x1 * x6) + ((0x2 * ((uint64_t)x3 * x7)) + (((uint64_t)x5 * x5) + ((0x2 * ((uint64_t)x7 * x3)) + ((uint64_t)x6 * x1)))));
uint64_t x13 = (((uint64_t)x1 * x7) + (((uint64_t)x3 * x5) + (((uint64_t)x5 * x3) + ((uint64_t)x7 * x1))));
uint64_t x14 = (((uint64_t)x1 * x5) + ((0x2 * ((uint64_t)x3 * x3)) + ((uint64_t)x5 * x1)));
uint64_t x15 = (((uint64_t)x1 * x3) + ((uint64_t)x3 * x1));
uint64_t x16 = ((uint64_t)x1 * x1);
uint64_t x17 = (x13 + (0xd * x8));
uint64_t x18 = (x14 + (0xd * x9));
uint64_t x19 = (x15 + (0xd * x10));
ℤ x20 = (x16 +ℤ (0xd *ℤ x11));
uint64_t x21 = (x20 >> 0x1c);
uint32_t x22 = (x20 & 0xfffffff);
uint64_t x23 = (x21 + x19);
uint64_t x24 = (x23 >> 0x1b);
uint32_t x25 = ((uint32_t)x23 & 0x7ffffff);
uint64_t x26 = (x24 + x18);
uint64_t x27 = (x26 >> 0x1c);
uint32_t x28 = ((uint32_t)x26 & 0xfffffff);
uint64_t x29 = (x27 + x17);
uint64_t x30 = (x29 >> 0x1b);
uint32_t x31 = ((uint32_t)x29 & 0x7ffffff);
uint64_t x32 = (x30 + x12);
uint64_t x33 = (x32 >> 0x1b);
uint32_t x34 = ((uint32_t)x32 & 0x7ffffff);
uint64_t x35 = (x22 + (0xd * x33));
uint32_t x36 = (uint32_t) (x35 >> 0x1c);
uint32_t x37 = ((uint32_t)x35 & 0xfffffff);
uint32_t x38 = (x36 + x25);
uint32_t x39 = (x38 >> 0x1b);
uint32_t x40 = (x38 & 0x7ffffff);
return (Return x34, Return x31, (x39 + x28), Return x40, Return x37)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
