square = λ var : Z.Syntax.base_type → Type,
λ '(x8, x9, x7, x5, x3, x1)%core,
uint128_t x10 = ((uint128_t)x8 * x8);
uint128_t x11 = ((0x2 * ((uint128_t)x9 * x8)) + (0x2 * ((uint128_t)x8 * x9)));
uint128_t x12 = (((uint128_t)x7 * x8) + ((0x2 * ((uint128_t)x9 * x9)) + ((uint128_t)x8 * x7)));
uint128_t x13 = (((uint128_t)x5 * x8) + (((uint128_t)x7 * x9) + (((uint128_t)x9 * x7) + ((uint128_t)x8 * x5))));
uint128_t x14 = ((0x2 * ((uint128_t)x3 * x8)) + ((0x2 * ((uint128_t)x5 * x9)) + (((uint128_t)x7 * x7) + ((0x2 * ((uint128_t)x9 * x5)) + (0x2 * ((uint128_t)x8 * x3))))));
uint128_t x15 = (((uint128_t)x1 * x8) + ((0x2 * ((uint128_t)x3 * x9)) + (((uint128_t)x5 * x7) + (((uint128_t)x7 * x5) + ((0x2 * ((uint128_t)x9 * x3)) + ((uint128_t)x8 * x1))))));
uint128_t x16 = (((uint128_t)x1 * x9) + (((uint128_t)x3 * x7) + (((uint128_t)x5 * x5) + (((uint128_t)x7 * x3) + ((uint128_t)x9 * x1)))));
uint128_t x17 = (((uint128_t)x1 * x7) + ((0x2 * ((uint128_t)x3 * x5)) + ((0x2 * ((uint128_t)x5 * x3)) + ((uint128_t)x7 * x1))));
uint128_t x18 = (((uint128_t)x1 * x5) + ((0x2 * ((uint128_t)x3 * x3)) + ((uint128_t)x5 * x1)));
uint128_t x19 = (((uint128_t)x1 * x3) + ((uint128_t)x3 * x1));
uint128_t x20 = ((uint128_t)x1 * x1);
uint128_t x21 = (x16 + (0xf * x10));
uint128_t x22 = (x17 + (0xf * x11));
uint128_t x23 = (x18 + (0xf * x12));
uint128_t x24 = (x19 + (0xf * x13));
uint128_t x25 = (x20 + (0xf * x14));
uint128_t x26 = (x25 >> 0x39);
uint64_t x27 = ((uint64_t)x25 & 0x1ffffffffffffff);
uint128_t x28 = (x26 + x24);
uint128_t x29 = (x28 >> 0x38);
uint64_t x30 = ((uint64_t)x28 & 0xffffffffffffff);
uint128_t x31 = (x29 + x23);
uint128_t x32 = (x31 >> 0x38);
uint64_t x33 = ((uint64_t)x31 & 0xffffffffffffff);
uint128_t x34 = (x32 + x22);
uint128_t x35 = (x34 >> 0x39);
uint64_t x36 = ((uint64_t)x34 & 0x1ffffffffffffff);
uint128_t x37 = (x35 + x21);
uint128_t x38 = (x37 >> 0x38);
uint64_t x39 = ((uint64_t)x37 & 0xffffffffffffff);
uint128_t x40 = (x38 + x15);
uint64_t x41 = (uint64_t) (x40 >> 0x38);
uint64_t x42 = ((uint64_t)x40 & 0xffffffffffffff);
uint128_t x43 = (x27 + ((uint128_t)0xf * x41));
uint64_t x44 = (uint64_t) (x43 >> 0x39);
uint64_t x45 = ((uint64_t)x43 & 0x1ffffffffffffff);
uint64_t x46 = (x44 + x30);
uint64_t x47 = (x46 >> 0x38);
uint64_t x48 = (x46 & 0xffffffffffffff);
return (Return x42, Return x39, Return x36, (x47 + x33), Return x48, Return x45)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t -> uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
