λ x x0 : word32 * word32 * word32 * word32 * word32 * word32 * word32 * word32,
Interp-η
(λ var : Syntax.base_type → Type,
 λ '(x16, x17, x15, x13, x11, x9, x7, x5, (x30, x31, x29, x27, x25, x23, x21, x19))%core,
 uint32_t x33, uint8_t/*bool*/ x34 = subborrow_u32(0x0, x5, x19);
 uint32_t x36, uint8_t/*bool*/ x37 = subborrow_u32(x34, x7, x21);
 uint32_t x39, uint8_t/*bool*/ x40 = subborrow_u32(x37, x9, x23);
 uint32_t x42, uint8_t/*bool*/ x43 = subborrow_u32(x40, x11, x25);
 uint32_t x45, uint8_t/*bool*/ x46 = subborrow_u32(x43, x13, x27);
 uint32_t x48, uint8_t/*bool*/ x49 = subborrow_u32(x46, x15, x29);
 uint32_t x51, uint8_t/*bool*/ x52 = subborrow_u32(x49, x17, x31);
 uint32_t x54, uint8_t/*bool*/ x55 = subborrow_u32(x52, x16, x30);
 uint32_t x56 = cmovznz32(x55, 0x0, 0xffffffff);
 uint32_t x57 = (x56 & 0xffffffff);
 uint32_t x59, uint8_t/*bool*/ x60 = addcarryx_u32(0x0, x33, x57);
 uint32_t x61 = (x56 & 0xffffffff);
 uint32_t x63, uint8_t/*bool*/ x64 = addcarryx_u32(x60, x36, x61);
 uint32_t x65 = (x56 & 0xffffffff);
 uint32_t x67, uint8_t/*bool*/ x68 = addcarryx_u32(x64, x39, x65);
 uint32_t x70, uint8_t/*bool*/ x71 = addcarryx_u32(x68, x42, 0x0);
 uint32_t x73, uint8_t/*bool*/ x74 = addcarryx_u32(x71, x45, 0x0);
 uint32_t x76, uint8_t/*bool*/ x77 = addcarryx_u32(x74, x48, 0x0);
 uint8_t/*bool*/ x78 = (1&(uint8_t/*bool*/)x56 & 0x1);
 uint32_t x80, uint8_t/*bool*/ x81 = addcarryx_u32(x77, x51, x78);
 uint32_t x82 = (x56 & 0xffffffff);
 uint32_t x84, uint8_t/*bool*/ _ = addcarryx_u32(x81, x54, x82);
 (Return x84, Return x80, Return x76, Return x73, Return x70, Return x67, Return x63, Return x59))
(x, x0)%core
     : word32 * word32 * word32 * word32 * word32 * word32 * word32 * word32 → word32 * word32 * word32 * word32 * word32 * word32 * word32 * word32 → ReturnType (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)
