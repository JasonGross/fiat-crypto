add = λ var : Z.Syntax.base_type → Type,
λ '(x18, x19, x17, x15, x13, x11, x9, x7, x5, x3, (x36, x37, x35, x33, x31, x29, x27, x25, x23, x21))%core,
uint32_t x39, uint8_t x40 = addcarryx_u32(0x0, x3, x21);
uint32_t x42, uint8_t x43 = addcarryx_u32(x40, x5, x23);
uint32_t x45, uint8_t x46 = addcarryx_u32(x43, x7, x25);
uint32_t x48, uint8_t x49 = addcarryx_u32(x46, x9, x27);
uint32_t x51, uint8_t x52 = addcarryx_u32(x49, x11, x29);
uint32_t x54, uint8_t x55 = addcarryx_u32(x52, x13, x31);
uint32_t x57, uint8_t x58 = addcarryx_u32(x55, x15, x33);
uint32_t x60, uint8_t x61 = addcarryx_u32(x58, x17, x35);
uint32_t x63, uint8_t x64 = addcarryx_u32(x61, x19, x37);
uint32_t x66, uint8_t x67 = addcarryx_u32(x64, x18, x36);
uint32_t x69, uint8_t x70 = subborrow_u32(0x0, x39, 0xffffffed);
uint32_t x72, uint8_t x73 = subborrow_u32(x70, x42, 0xffffffff);
uint32_t x75, uint8_t x76 = subborrow_u32(x73, x45, 0xffffffff);
uint32_t x78, uint8_t x79 = subborrow_u32(x76, x48, 0xffffffff);
uint32_t x81, uint8_t x82 = subborrow_u32(x79, x51, 0xffffffff);
uint32_t x84, uint8_t x85 = subborrow_u32(x82, x54, 0xffffffff);
uint32_t x87, uint8_t x88 = subborrow_u32(x85, x57, 0xffffffff);
uint32_t x90, uint8_t x91 = subborrow_u32(x88, x60, 0xffffffff);
uint32_t x93, uint8_t x94 = subborrow_u32(x91, x63, 0xffffffff);
uint32_t x96, uint8_t x97 = subborrow_u32(x94, x66, 0x7);
uint32_t _, uint8_t x100 = subborrow_u32(x97, x67, 0x0);
(cmovznz32(x100, x96, x66), cmovznz32(x100, x93, x63), cmovznz32(x100, x90, x60), cmovznz32(x100, x87, x57), cmovznz32(x100, x84, x54), cmovznz32(x100, x81, x51), cmovznz32(x100, x78, x48), cmovznz32(x100, x75, x45), cmovznz32(x100, x72, x42), cmovznz32(x100, x69, x39))
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t) -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
