add = λ var : Z.Syntax.base_type → Type,
λ '(x28, x29, x27, x25, x23, x21, x19, x17, x15, x13, x11, x9, x7, x5, x3, (x56, x57, x55, x53, x51, x49, x47, x45, x43, x41, x39, x37, x35, x33, x31))%core,
uint32_t x59, uint8_t x60 = addcarryx_u32(0x0, x3, x31);
uint32_t x62, uint8_t x63 = addcarryx_u32(x60, x5, x33);
uint32_t x65, uint8_t x66 = addcarryx_u32(x63, x7, x35);
uint32_t x68, uint8_t x69 = addcarryx_u32(x66, x9, x37);
uint32_t x71, uint8_t x72 = addcarryx_u32(x69, x11, x39);
uint32_t x74, uint8_t x75 = addcarryx_u32(x72, x13, x41);
uint32_t x77, uint8_t x78 = addcarryx_u32(x75, x15, x43);
uint32_t x80, uint8_t x81 = addcarryx_u32(x78, x17, x45);
uint32_t x83, uint8_t x84 = addcarryx_u32(x81, x19, x47);
uint32_t x86, uint8_t x87 = addcarryx_u32(x84, x21, x49);
uint32_t x89, uint8_t x90 = addcarryx_u32(x87, x23, x51);
uint32_t x92, uint8_t x93 = addcarryx_u32(x90, x25, x53);
uint32_t x95, uint8_t x96 = addcarryx_u32(x93, x27, x55);
uint32_t x98, uint8_t x99 = addcarryx_u32(x96, x29, x57);
uint32_t x101, uint8_t x102 = addcarryx_u32(x99, x28, x56);
uint32_t x104, uint8_t x105 = subborrow_u32(0x0, x59, 0xffffffef);
uint32_t x107, uint8_t x108 = subborrow_u32(x105, x62, 0xffffffff);
uint32_t x110, uint8_t x111 = subborrow_u32(x108, x65, 0xffffffff);
uint32_t x113, uint8_t x114 = subborrow_u32(x111, x68, 0xffffffff);
uint32_t x116, uint8_t x117 = subborrow_u32(x114, x71, 0xffffffff);
uint32_t x119, uint8_t x120 = subborrow_u32(x117, x74, 0xffffffff);
uint32_t x122, uint8_t x123 = subborrow_u32(x120, x77, 0xffffffff);
uint32_t x125, uint8_t x126 = subborrow_u32(x123, x80, 0xffffffff);
uint32_t x128, uint8_t x129 = subborrow_u32(x126, x83, 0xffffffff);
uint32_t x131, uint8_t x132 = subborrow_u32(x129, x86, 0xffffffff);
uint32_t x134, uint8_t x135 = subborrow_u32(x132, x89, 0xffffffff);
uint32_t x137, uint8_t x138 = subborrow_u32(x135, x92, 0xffffffff);
uint32_t x140, uint8_t x141 = subborrow_u32(x138, x95, 0xffffffff);
uint32_t x143, uint8_t x144 = subborrow_u32(x141, x98, 0xffffffff);
uint32_t x146, uint8_t x147 = subborrow_u32(x144, x101, 0xfffff);
uint32_t _, uint8_t x150 = subborrow_u32(x147, x102, 0x0);
(cmovznz32(x150, x146, x101), cmovznz32(x150, x143, x98), cmovznz32(x150, x140, x95), cmovznz32(x150, x137, x92), cmovznz32(x150, x134, x89), cmovznz32(x150, x131, x86), cmovznz32(x150, x128, x83), cmovznz32(x150, x125, x80), cmovznz32(x150, x122, x77), cmovznz32(x150, x119, x74), cmovznz32(x150, x116, x71), cmovznz32(x150, x113, x68), cmovznz32(x150, x110, x65), cmovznz32(x150, x107, x62), cmovznz32(x150, x104, x59))
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t) -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
