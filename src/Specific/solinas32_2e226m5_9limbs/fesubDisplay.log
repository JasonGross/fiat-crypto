sub = λ var : Z.Syntax.base_type → Type,
λ '(x16, x17, x15, x13, x11, x9, x7, x5, x3, (x32, x33, x31, x29, x27, x25, x23, x21, x19))%core,
(((0x3fffffe + x16) - x32), ((0x3fffffe + x17) - x33), ((0x3fffffe + x15) - x31), ((0x3fffffe + x13) - x29), ((0x3fffffe + x11) - x27), ((0x3fffffe + x9) - x25), ((0x3fffffe + x7) - x23), ((0x3fffffe + x5) - x21), ((0x7fffff6 + x3) - x19))
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t) -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
