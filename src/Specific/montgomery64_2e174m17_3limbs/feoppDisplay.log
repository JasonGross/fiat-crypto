opp = λ var : Z.Syntax.base_type → Type,
λ '(x2, x3, x1)%core,
uint64_t x5, uint8_t x6 = subborrow_u64(0x0, 0x0, x1);
uint64_t x8, uint8_t x9 = subborrow_u64(x6, 0x0, x3);
uint64_t x11, uint8_t x12 = subborrow_u64(x9, 0x0, x2);
uint64_t x13 = cmovznz64(x12, 0x0, 0xffffffffffffffffL);
uint64_t x15, uint8_t x16 = addcarryx_u64(0x0, x5, (x13 & 0xffffffffffffffefL));
uint64_t x18, uint8_t x19 = addcarryx_u64(x16, x8, (x13 & 0xffffffffffffffffL));
uint64_t x21, uint8_t _ = addcarryx_u64(x19, x11, (x13 & 0x3fffffffffff));
(Return x21, Return x18, Return x15)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t -> uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
