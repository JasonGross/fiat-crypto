sub = λ var : Z.Syntax.base_type → Type,
λ '(x4, x5, x3, (x8, x9, x7))%core,
uint64_t x11, uint8_t x12 = subborrow_u64(0x0, x3, x7);
uint64_t x14, uint8_t x15 = subborrow_u64(x12, x5, x9);
uint64_t x17, uint8_t x18 = subborrow_u64(x15, x4, x8);
uint64_t x19 = cmovznz64(x18, 0x0, 0xffffffffffffffffL);
uint64_t x21, uint8_t x22 = addcarryx_u64(0x0, x11, (x19 & 0xffffffffffffffefL));
uint64_t x24, uint8_t x25 = addcarryx_u64(x22, x14, (x19 & 0xffffffffffffffffL));
uint64_t x27, uint8_t _ = addcarryx_u64(x25, x17, (x19 & 0x3fffffffffff));
(Return x27, Return x24, Return x21)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * (uint64_t * uint64_t * uint64_t) -> uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
