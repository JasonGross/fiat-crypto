nonzero = λ var : Z.Syntax.base_type → Type,
λ '(x14, x15, x13, x11, x9, x7, x5, x3, x1)%core,
uint32_t x16 = (x15 | x14);
uint32_t x17 = (x13 | x16);
uint32_t x18 = (x11 | x17);
uint32_t x19 = (x9 | x18);
uint32_t x20 = (x7 | x19);
uint32_t x21 = (x5 | x20);
uint32_t x22 = (x3 | x21);
uint32_t x23 = (x1 | x22);
return x23
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t -> uint32_t)

Argument scope is [function_scope]
