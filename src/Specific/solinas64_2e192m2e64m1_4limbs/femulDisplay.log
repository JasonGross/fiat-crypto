mul = λ var : Z.Syntax.base_type → Type,
λ '(x6, x7, x5, x3, (x12, x13, x11, x9))%core,
uint128_t x14 = ((uint128_t)x6 * x12);
uint128_t x15 = (((uint128_t)x7 * x12) + ((uint128_t)x6 * x13));
uint128_t x16 = (((uint128_t)x5 * x12) + (((uint128_t)x7 * x13) + ((uint128_t)x6 * x11)));
uint128_t x17 = (((uint128_t)x3 * x12) + (((uint128_t)x5 * x13) + (((uint128_t)x7 * x11) + ((uint128_t)x6 * x9))));
uint128_t x18 = (((uint128_t)x3 * x13) + (((uint128_t)x5 * x11) + ((uint128_t)x7 * x9)));
uint128_t x19 = (((uint128_t)x3 * x11) + ((uint128_t)x5 * x9));
uint128_t x20 = ((uint128_t)x3 * x9);
uint128_t x21 = (x17 + (0x10000 * x14));
uint128_t x22 = (x18 + (x14 + (0x10000 * x15)));
uint128_t x23 = (x19 + (x15 + (0x10000 * x16)));
uint128_t x24 = (x20 + x16);
uint64_t x25 = (uint64_t) (x24 >> 0x30);
uint64_t x26 = ((uint64_t)x24 & 0xffffffffffff);
uint128_t x27 = (x21 >> 0x30);
uint64_t x28 = ((uint64_t)x21 & 0xffffffffffff);
uint128_t x29 = ((0x1000000000000 * x27) + x28);
uint128_t x30 = (x29 >> 0x30);
uint64_t x31 = ((uint64_t)x29 & 0xffffffffffff);
uint128_t x32 = ((x25 + x23) + (0x10000 * x30));
uint128_t x33 = (x32 >> 0x30);
uint64_t x34 = ((uint64_t)x32 & 0xffffffffffff);
uint128_t x35 = (x26 + x30);
uint64_t x36 = (uint64_t) (x35 >> 0x30);
uint64_t x37 = ((uint64_t)x35 & 0xffffffffffff);
uint128_t x38 = (x33 + x22);
uint128_t x39 = (x38 >> 0x30);
uint64_t x40 = ((uint64_t)x38 & 0xffffffffffff);
uint128_t x41 = (x39 + x31);
uint64_t x42 = (uint64_t) (x41 >> 0x30);
uint64_t x43 = ((uint64_t)x41 & 0xffffffffffff);
uint128_t x44 = (((uint128_t)0x1000000000000 * x42) + x43);
uint64_t x45 = (uint64_t) (x44 >> 0x30);
uint64_t x46 = ((uint64_t)x44 & 0xffffffffffff);
uint64_t x47 = ((x36 + x34) + (0x10000 * x45));
uint64_t x48 = (x47 >> 0x30);
uint64_t x49 = (x47 & 0xffffffffffff);
uint64_t x50 = (x37 + x45);
uint64_t x51 = (x50 >> 0x30);
uint64_t x52 = (x50 & 0xffffffffffff);
return (Return x46, (x48 + x40), (x51 + x49), Return x52)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * uint64_t * (uint64_t * uint64_t * uint64_t * uint64_t) -> uint64_t * uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
