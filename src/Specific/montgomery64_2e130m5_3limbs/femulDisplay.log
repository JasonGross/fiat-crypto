mul = λ var : Z.Syntax.base_type → Type,
λ '(x4, x5, x3, (x8, x9, x7))%core,
uint64_t x11, uint64_t x12 = mulx_u64(x3, x7);
uint64_t x14, uint64_t x15 = mulx_u64(x3, x9);
uint64_t x17, uint64_t x18 = mulx_u64(x3, x8);
uint64_t x20, uint8_t x21 = addcarryx_u64(0x0, x12, x14);
uint64_t x23, uint8_t x24 = addcarryx_u64(x21, x15, x17);
uint64_t x26, uint8_t _ = addcarryx_u64(0x0, x24, x18);
uint64_t x29, uint64_t _ = mulx_u64(x11, 0xcccccccccccccccdL);
uint64_t x32, uint64_t x33 = mulx_u64(x29, 0xfffffffffffffffbL);
uint64_t x35, uint64_t x36 = mulx_u64(x29, 0xffffffffffffffffL);
uint64_t x38, uint8_t x39 = mulx_u64_out_u8(x29, 0x3);
uint64_t x41, uint8_t x42 = addcarryx_u64(0x0, x33, x35);
uint64_t x44, uint8_t x45 = addcarryx_u64(x42, x36, x38);
uint8_t x46 = (x45 + x39);
uint64_t _, uint8_t x49 = addcarryx_u64(0x0, x11, x32);
uint64_t x51, uint8_t x52 = addcarryx_u64(x49, x20, x41);
uint64_t x54, uint8_t x55 = addcarryx_u64(x52, x23, x44);
uint64_t x57, uint8_t x58 = addcarryx_u64(x55, x26, x46);
uint64_t x60, uint64_t x61 = mulx_u64(x5, x7);
uint64_t x63, uint64_t x64 = mulx_u64(x5, x9);
uint64_t x66, uint64_t x67 = mulx_u64(x5, x8);
uint64_t x69, uint8_t x70 = addcarryx_u64(0x0, x61, x63);
uint64_t x72, uint8_t x73 = addcarryx_u64(x70, x64, x66);
uint64_t x75, uint8_t _ = addcarryx_u64(0x0, x73, x67);
uint64_t x78, uint8_t x79 = addcarryx_u64(0x0, x51, x60);
uint64_t x81, uint8_t x82 = addcarryx_u64(x79, x54, x69);
uint64_t x84, uint8_t x85 = addcarryx_u64(x82, x57, x72);
uint64_t x87, uint8_t x88 = addcarryx_u64(x85, x58, x75);
uint64_t x90, uint64_t _ = mulx_u64(x78, 0xcccccccccccccccdL);
uint64_t x93, uint64_t x94 = mulx_u64(x90, 0xfffffffffffffffbL);
uint64_t x96, uint64_t x97 = mulx_u64(x90, 0xffffffffffffffffL);
uint64_t x99, uint8_t x100 = mulx_u64_out_u8(x90, 0x3);
uint64_t x102, uint8_t x103 = addcarryx_u64(0x0, x94, x96);
uint64_t x105, uint8_t x106 = addcarryx_u64(x103, x97, x99);
uint8_t x107 = (x106 + x100);
uint64_t _, uint8_t x110 = addcarryx_u64(0x0, x78, x93);
uint64_t x112, uint8_t x113 = addcarryx_u64(x110, x81, x102);
uint64_t x115, uint8_t x116 = addcarryx_u64(x113, x84, x105);
uint64_t x118, uint8_t x119 = addcarryx_u64(x116, x87, x107);
uint8_t x120 = (x119 + x88);
uint64_t x122, uint64_t x123 = mulx_u64(x4, x7);
uint64_t x125, uint64_t x126 = mulx_u64(x4, x9);
uint64_t x128, uint64_t x129 = mulx_u64(x4, x8);
uint64_t x131, uint8_t x132 = addcarryx_u64(0x0, x123, x125);
uint64_t x134, uint8_t x135 = addcarryx_u64(x132, x126, x128);
uint64_t x137, uint8_t _ = addcarryx_u64(0x0, x135, x129);
uint64_t x140, uint8_t x141 = addcarryx_u64(0x0, x112, x122);
uint64_t x143, uint8_t x144 = addcarryx_u64(x141, x115, x131);
uint64_t x146, uint8_t x147 = addcarryx_u64(x144, x118, x134);
uint64_t x149, uint8_t x150 = addcarryx_u64(x147, x120, x137);
uint64_t x152, uint64_t _ = mulx_u64(x140, 0xcccccccccccccccdL);
uint64_t x155, uint64_t x156 = mulx_u64(x152, 0xfffffffffffffffbL);
uint64_t x158, uint64_t x159 = mulx_u64(x152, 0xffffffffffffffffL);
uint64_t x161, uint8_t x162 = mulx_u64_out_u8(x152, 0x3);
uint64_t x164, uint8_t x165 = addcarryx_u64(0x0, x156, x158);
uint64_t x167, uint8_t x168 = addcarryx_u64(x165, x159, x161);
uint8_t x169 = (x168 + x162);
uint64_t _, uint8_t x172 = addcarryx_u64(0x0, x140, x155);
uint64_t x174, uint8_t x175 = addcarryx_u64(x172, x143, x164);
uint64_t x177, uint8_t x178 = addcarryx_u64(x175, x146, x167);
uint64_t x180, uint8_t x181 = addcarryx_u64(x178, x149, x169);
uint8_t x182 = (x181 + x150);
uint64_t x184, uint8_t x185 = subborrow_u64(0x0, x174, 0xfffffffffffffffbL);
uint64_t x187, uint8_t x188 = subborrow_u64(x185, x177, 0xffffffffffffffffL);
uint64_t x190, uint8_t x191 = subborrow_u64(x188, x180, 0x3);
uint64_t _, uint8_t x194 = subborrow_u64(x191, x182, 0x0);
(cmovznz64(x194, x190, x180), cmovznz64(x194, x187, x177), cmovznz64(x194, x184, x174))
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * (uint64_t * uint64_t * uint64_t) -> uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
