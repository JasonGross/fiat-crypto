square = λ var : Z.Syntax.base_type → Type,
λ '(x4, x5, x3, x1)%core,
uint128_t x6 = ((uint128_t)x4 * x4);
uint128_t x7 = (((uint128_t)x5 * x4) + ((uint128_t)x4 * x5));
uint128_t x8 = ((0x2 * ((uint128_t)x3 * x4)) + ((0x2 * ((uint128_t)x5 * x5)) + (0x2 * ((uint128_t)x4 * x3))));
uint128_t x9 = (((uint128_t)x1 * x4) + ((0x2 * ((uint128_t)x3 * x5)) + ((0x2 * ((uint128_t)x5 * x3)) + ((uint128_t)x4 * x1))));
uint128_t x10 = (((uint128_t)x1 * x5) + ((0x2 * ((uint128_t)x3 * x3)) + ((uint128_t)x5 * x1)));
uint128_t x11 = (((uint128_t)x1 * x3) + ((uint128_t)x3 * x1));
uint128_t x12 = ((uint128_t)x1 * x1);
uint128_t x13 = (x10 + (0x19 * x6));
uint128_t x14 = (x11 + (0x19 * x7));
uint128_t x15 = (x12 + (0x19 * x8));
uint64_t x16 = (uint64_t) (x15 >> 0x21);
uint64_t x17 = ((uint64_t)x15 & 0x1ffffffff);
uint128_t x18 = (x16 + x14);
uint64_t x19 = (uint64_t) (x18 >> 0x20);
uint64_t x20 = ((uint64_t)x18 & 0xffffffff);
uint128_t x21 = (x19 + x13);
uint64_t x22 = (uint64_t) (x21 >> 0x20);
uint64_t x23 = ((uint64_t)x21 & 0xffffffff);
uint128_t x24 = (x22 + x9);
uint64_t x25 = (uint64_t) (x24 >> 0x20);
uint64_t x26 = ((uint64_t)x24 & 0xffffffff);
uint64_t x27 = (x17 + (0x19 * x25));
uint64_t x28 = (x27 >> 0x21);
uint64_t x29 = (x27 & 0x1ffffffff);
uint64_t x30 = (x28 + x20);
uint64_t x31 = (x30 >> 0x20);
uint64_t x32 = (x30 & 0xffffffff);
return (Return x26, (x31 + x23), Return x32, Return x29)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * uint64_t -> uint64_t * uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
