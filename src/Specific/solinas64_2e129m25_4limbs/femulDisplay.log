mul = λ var : Z.Syntax.base_type → Type,
λ '(x6, x7, x5, x3, (x12, x13, x11, x9))%core,
uint128_t x14 = ((uint128_t)x6 * x12);
uint128_t x15 = (((uint128_t)x7 * x12) + ((uint128_t)x6 * x13));
uint128_t x16 = ((0x2 * ((uint128_t)x5 * x12)) + ((0x2 * ((uint128_t)x7 * x13)) + (0x2 * ((uint128_t)x6 * x11))));
uint128_t x17 = (((uint128_t)x3 * x12) + ((0x2 * ((uint128_t)x5 * x13)) + ((0x2 * ((uint128_t)x7 * x11)) + ((uint128_t)x6 * x9))));
uint128_t x18 = (((uint128_t)x3 * x13) + ((0x2 * ((uint128_t)x5 * x11)) + ((uint128_t)x7 * x9)));
uint128_t x19 = (((uint128_t)x3 * x11) + ((uint128_t)x5 * x9));
uint128_t x20 = ((uint128_t)x3 * x9);
uint128_t x21 = (x18 + (0x19 * x14));
uint128_t x22 = (x19 + (0x19 * x15));
uint128_t x23 = (x20 + (0x19 * x16));
uint64_t x24 = (uint64_t) (x23 >> 0x21);
uint64_t x25 = ((uint64_t)x23 & 0x1ffffffff);
uint128_t x26 = (x24 + x22);
uint64_t x27 = (uint64_t) (x26 >> 0x20);
uint64_t x28 = ((uint64_t)x26 & 0xffffffff);
uint128_t x29 = (x27 + x21);
uint64_t x30 = (uint64_t) (x29 >> 0x20);
uint64_t x31 = ((uint64_t)x29 & 0xffffffff);
uint128_t x32 = (x30 + x17);
uint64_t x33 = (uint64_t) (x32 >> 0x20);
uint64_t x34 = ((uint64_t)x32 & 0xffffffff);
uint64_t x35 = (x25 + (0x19 * x33));
uint64_t x36 = (x35 >> 0x21);
uint64_t x37 = (x35 & 0x1ffffffff);
uint64_t x38 = (x36 + x28);
uint64_t x39 = (x38 >> 0x20);
uint64_t x40 = (x38 & 0xffffffff);
return (Return x34, (x39 + x31), Return x40, Return x37)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * uint64_t * (uint64_t * uint64_t * uint64_t * uint64_t) -> uint64_t * uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
