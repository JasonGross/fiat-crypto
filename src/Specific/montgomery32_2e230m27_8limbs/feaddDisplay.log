add = λ var : Z.Syntax.base_type → Type,
λ '(x14, x15, x13, x11, x9, x7, x5, x3, (x28, x29, x27, x25, x23, x21, x19, x17))%core,
uint32_t x31, uint8_t x32 = addcarryx_u32(0x0, x3, x17);
uint32_t x34, uint8_t x35 = addcarryx_u32(x32, x5, x19);
uint32_t x37, uint8_t x38 = addcarryx_u32(x35, x7, x21);
uint32_t x40, uint8_t x41 = addcarryx_u32(x38, x9, x23);
uint32_t x43, uint8_t x44 = addcarryx_u32(x41, x11, x25);
uint32_t x46, uint8_t x47 = addcarryx_u32(x44, x13, x27);
uint32_t x49, uint8_t x50 = addcarryx_u32(x47, x15, x29);
uint32_t x52, uint8_t x53 = addcarryx_u32(x50, x14, x28);
uint32_t x55, uint8_t x56 = subborrow_u32(0x0, x31, 0xffffffe5);
uint32_t x58, uint8_t x59 = subborrow_u32(x56, x34, 0xffffffff);
uint32_t x61, uint8_t x62 = subborrow_u32(x59, x37, 0xffffffff);
uint32_t x64, uint8_t x65 = subborrow_u32(x62, x40, 0xffffffff);
uint32_t x67, uint8_t x68 = subborrow_u32(x65, x43, 0xffffffff);
uint32_t x70, uint8_t x71 = subborrow_u32(x68, x46, 0xffffffff);
uint32_t x73, uint8_t x74 = subborrow_u32(x71, x49, 0xffffffff);
uint32_t x76, uint8_t x77 = subborrow_u32(x74, x52, 0x3f);
uint32_t _, uint8_t x80 = subborrow_u32(x77, x53, 0x0);
(cmovznz32(x80, x76, x52), cmovznz32(x80, x73, x49), cmovznz32(x80, x70, x46), cmovznz32(x80, x67, x43), cmovznz32(x80, x64, x40), cmovznz32(x80, x61, x37), cmovznz32(x80, x58, x34), cmovznz32(x80, x55, x31))
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t) -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
