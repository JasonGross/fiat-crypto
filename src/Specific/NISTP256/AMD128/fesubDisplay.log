sub = λ var : Z.Syntax.base_type → Type,
λ '(x2, x3, (x4, x5))%core,
uint128_t x7, uint8_t x8 = subborrow_u128(0x0, x3, x5);
uint128_t x10, uint8_t x11 = subborrow_u128(x8, x2, x4);
uint128_t x12 = cmovznz128(x11, 0x0, 0xffffffffffffffffffffffffffffffffL);
uint128_t x14, uint8_t x15 = addcarryx_u128(0x0, x7, (x12 & 0xffffffffffffffffffffffffL));
uint128_t x17, uint8_t _ = addcarryx_u128(x15, x10, (x12 & 0xffffffff000000010000000000000000L));
(Return x17, Return x14)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint128_t * uint128_t * (uint128_t * uint128_t) -> uint128_t * uint128_t)

Argument scope is [function_scope]
