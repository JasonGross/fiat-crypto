opp = λ var : Z.Syntax.base_type → Type,
λ '(x0, x1)%core,
uint128_t x3, uint8_t x4 = subborrow_u128(0x0, 0x0, x1);
uint128_t x6, uint8_t x7 = subborrow_u128(x4, 0x0, x0);
uint128_t x8 = cmovznz128(x7, 0x0, 0xffffffffffffffffffffffffffffffffL);
uint128_t x10, uint8_t x11 = addcarryx_u128(0x0, x3, (x8 & 0xffffffffffffffffffffffffL));
uint128_t x13, uint8_t _ = addcarryx_u128(x11, x6, (x8 & 0xffffffff000000010000000000000000L));
(Return x13, Return x10)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint128_t * uint128_t -> uint128_t * uint128_t)

Argument scope is [function_scope]
