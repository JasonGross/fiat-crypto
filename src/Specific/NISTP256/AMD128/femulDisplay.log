mul = λ var : Z.Syntax.base_type → Type,
λ '(x2, x3, (x4, x5))%core,
uint128_t x7, uint128_t x8 = mulx_u128(x3, x5);
uint128_t x10, uint128_t x11 = mulx_u128(x3, x4);
uint128_t x13, uint8_t x14 = addcarryx_u128(0x0, x8, x10);
uint128_t x16, uint8_t _ = addcarryx_u128(0x0, x14, x11);
uint128_t x19, uint128_t _ = mulx_u128(x7, 0x1000000000000000000000001L);
uint128_t x22, uint128_t x23 = mulx_u128(x19, 0xffffffffffffffffffffffffL);
uint128_t x25, uint128_t x26 = mulx_u128(x19, 0xffffffff000000010000000000000000L);
uint128_t x28, uint8_t x29 = addcarryx_u128(0x0, x23, x25);
uint128_t x31, uint8_t _ = addcarryx_u128(0x0, x29, x26);
uint128_t _, uint8_t x35 = addcarryx_u128(0x0, x7, x22);
uint128_t x37, uint8_t x38 = addcarryx_u128(x35, x13, x28);
uint128_t x40, uint8_t x41 = addcarryx_u128(x38, x16, x31);
uint128_t x43, uint128_t x44 = mulx_u128(x2, x5);
uint128_t x46, uint128_t x47 = mulx_u128(x2, x4);
uint128_t x49, uint8_t x50 = addcarryx_u128(0x0, x44, x46);
uint128_t x52, uint8_t _ = addcarryx_u128(0x0, x50, x47);
uint128_t x55, uint8_t x56 = addcarryx_u128(0x0, x37, x43);
uint128_t x58, uint8_t x59 = addcarryx_u128(x56, x40, x49);
uint128_t x61, uint8_t x62 = addcarryx_u128(x59, x41, x52);
uint128_t x64, uint128_t _ = mulx_u128(x55, 0x1000000000000000000000001L);
uint128_t x67, uint128_t x68 = mulx_u128(x64, 0xffffffffffffffffffffffffL);
uint128_t x70, uint128_t x71 = mulx_u128(x64, 0xffffffff000000010000000000000000L);
uint128_t x73, uint8_t x74 = addcarryx_u128(0x0, x68, x70);
uint128_t x76, uint8_t _ = addcarryx_u128(0x0, x74, x71);
uint128_t _, uint8_t x80 = addcarryx_u128(0x0, x55, x67);
uint128_t x82, uint8_t x83 = addcarryx_u128(x80, x58, x73);
uint128_t x85, uint8_t x86 = addcarryx_u128(x83, x61, x76);
uint8_t x87 = (x86 + x62);
uint128_t x89, uint8_t x90 = subborrow_u128(0x0, x82, 0xffffffffffffffffffffffffL);
uint128_t x92, uint8_t x93 = subborrow_u128(x90, x85, 0xffffffff000000010000000000000000L);
uint128_t _, uint8_t x96 = subborrow_u128(x93, x87, 0x0);
(cmovznz128(x96, x92, x85), cmovznz128(x96, x89, x82))
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint128_t * uint128_t * (uint128_t * uint128_t) -> uint128_t * uint128_t)

Argument scope is [function_scope]
