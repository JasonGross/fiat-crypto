square = λ var : Z.Syntax.base_type → Type,
λ '(x6, x7, x5, x3, x1)%core,
uint128_t x8 = ((uint128_t)x6 * x6);
uint128_t x9 = ((0x2 * ((uint128_t)x7 * x6)) + (0x2 * ((uint128_t)x6 * x7)));
uint128_t x10 = (((uint128_t)x5 * x6) + ((0x2 * ((uint128_t)x7 * x7)) + ((uint128_t)x6 * x5)));
uint128_t x11 = ((0x2 * ((uint128_t)x3 * x6)) + ((0x2 * ((uint128_t)x5 * x7)) + ((0x2 * ((uint128_t)x7 * x5)) + (0x2 * ((uint128_t)x6 * x3)))));
uint128_t x12 = (((uint128_t)x1 * x6) + ((0x2 * ((uint128_t)x3 * x7)) + (((uint128_t)x5 * x5) + ((0x2 * ((uint128_t)x7 * x3)) + ((uint128_t)x6 * x1)))));
uint128_t x13 = (((uint128_t)x1 * x7) + (((uint128_t)x3 * x5) + (((uint128_t)x5 * x3) + ((uint128_t)x7 * x1))));
uint128_t x14 = (((uint128_t)x1 * x5) + ((0x2 * ((uint128_t)x3 * x3)) + ((uint128_t)x5 * x1)));
uint128_t x15 = (((uint128_t)x1 * x3) + ((uint128_t)x3 * x1));
uint128_t x16 = ((uint128_t)x1 * x1);
uint128_t x17 = (x12 + (0x4000000 * x8));
uint128_t x18 = (x13 + (x8 + (0x2000000 * x9)));
uint128_t x19 = (x14 + (x9 + (0x4000000 * x10)));
uint128_t x20 = (x15 + (x10 + (0x2000000 * x11)));
uint128_t x21 = (x16 + x11);
uint64_t x22 = (uint64_t) (x21 >> 0x27);
uint64_t x23 = ((uint64_t)x21 & 0x7fffffffff);
uint128_t x24 = (x17 >> 0x26);
uint64_t x25 = ((uint64_t)x17 & 0x3fffffffff);
uint128_t x26 = ((0x4000000000 * x24) + x25);
uint128_t x27 = (x26 >> 0x26);
uint64_t x28 = ((uint64_t)x26 & 0x3fffffffff);
uint128_t x29 = ((x22 + x20) + (0x2000000 * x27));
uint128_t x30 = (x29 >> 0x26);
uint64_t x31 = ((uint64_t)x29 & 0x3fffffffff);
uint128_t x32 = (x23 + x27);
uint64_t x33 = (uint64_t) (x32 >> 0x27);
uint64_t x34 = ((uint64_t)x32 & 0x7fffffffff);
uint128_t x35 = (x30 + x19);
uint128_t x36 = (x35 >> 0x27);
uint64_t x37 = ((uint64_t)x35 & 0x7fffffffff);
uint128_t x38 = (x36 + x18);
uint128_t x39 = (x38 >> 0x26);
uint64_t x40 = ((uint64_t)x38 & 0x3fffffffff);
uint128_t x41 = (x39 + x28);
uint64_t x42 = (uint64_t) (x41 >> 0x26);
uint64_t x43 = ((uint64_t)x41 & 0x3fffffffff);
uint128_t x44 = (((uint128_t)0x4000000000 * x42) + x43);
uint64_t x45 = (uint64_t) (x44 >> 0x26);
uint64_t x46 = ((uint64_t)x44 & 0x3fffffffff);
uint64_t x47 = ((x33 + x31) + (0x2000000 * x45));
uint64_t x48 = (x47 >> 0x26);
uint64_t x49 = (x47 & 0x3fffffffff);
uint64_t x50 = (x34 + x45);
uint64_t x51 = (x50 >> 0x27);
uint64_t x52 = (x50 & 0x7fffffffff);
return (Return x46, Return x40, (x48 + x37), (x51 + x49), Return x52)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t -> uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
