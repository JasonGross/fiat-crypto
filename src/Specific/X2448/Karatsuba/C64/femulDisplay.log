mul = λ var : Z.Syntax.base_type → Type,
λ '(x14, x15, x13, x11, x9, x7, x5, x3, (x28, x29, x27, x25, x23, x21, x19, x17))%core,
uint128_t x30 = (((uint128_t)(x9 + x14) * (x23 + x28)) - ((uint128_t)x9 * x23));
uint128_t x31 = ((((uint128_t)(x7 + x15) * (x23 + x28)) + ((uint128_t)(x9 + x14) * (x21 + x29))) - (((uint128_t)x7 * x23) + ((uint128_t)x9 * x21)));
uint128_t x32 = ((((uint128_t)(x5 + x13) * (x23 + x28)) + (((uint128_t)(x7 + x15) * (x21 + x29)) + ((uint128_t)(x9 + x14) * (x19 + x27)))) - (((uint128_t)x5 * x23) + (((uint128_t)x7 * x21) + ((uint128_t)x9 * x19))));
uint128_t x33 = ((((uint128_t)(x3 + x11) * (x23 + x28)) + (((uint128_t)(x5 + x13) * (x21 + x29)) + (((uint128_t)(x7 + x15) * (x19 + x27)) + ((uint128_t)(x9 + x14) * (x17 + x25))))) - (((uint128_t)x3 * x23) + (((uint128_t)x5 * x21) + (((uint128_t)x7 * x19) + ((uint128_t)x9 * x17)))));
uint128_t x34 = ((((uint128_t)x9 * x23) + ((uint128_t)x14 * x28)) + ((((uint128_t)(x3 + x11) * (x21 + x29)) + (((uint128_t)(x5 + x13) * (x19 + x27)) + ((uint128_t)(x7 + x15) * (x17 + x25)))) - (((uint128_t)x3 * x21) + (((uint128_t)x5 * x19) + ((uint128_t)x7 * x17)))));
uint128_t x35 = (((((uint128_t)x7 * x23) + ((uint128_t)x9 * x21)) + (((uint128_t)x15 * x28) + ((uint128_t)x14 * x29))) + ((((uint128_t)(x3 + x11) * (x19 + x27)) + ((uint128_t)(x5 + x13) * (x17 + x25))) - (((uint128_t)x3 * x19) + ((uint128_t)x5 * x17))));
uint128_t x36 = (((((uint128_t)x5 * x23) + (((uint128_t)x7 * x21) + ((uint128_t)x9 * x19))) + (((uint128_t)x13 * x28) + (((uint128_t)x15 * x29) + ((uint128_t)x14 * x27)))) + (((uint128_t)(x3 + x11) * (x17 + x25)) - ((uint128_t)x3 * x17)));
uint128_t x37 = ((((uint128_t)x3 * x23) + (((uint128_t)x5 * x21) + (((uint128_t)x7 * x19) + ((uint128_t)x9 * x17)))) + (((uint128_t)x11 * x28) + (((uint128_t)x13 * x29) + (((uint128_t)x15 * x27) + ((uint128_t)x14 * x25)))));
uint128_t x38 = ((((uint128_t)x3 * x21) + (((uint128_t)x5 * x19) + ((uint128_t)x7 * x17))) + (((uint128_t)x11 * x29) + (((uint128_t)x13 * x27) + ((uint128_t)x15 * x25))));
uint128_t x39 = ((((uint128_t)x3 * x19) + ((uint128_t)x5 * x17)) + (((uint128_t)x11 * x27) + ((uint128_t)x13 * x25)));
uint128_t x40 = (((uint128_t)x3 * x17) + ((uint128_t)x11 * x25));
uint128_t x41 = (x34 + x30);
uint128_t x42 = (x35 + x31);
uint128_t x43 = (x36 + x32);
uint128_t x44 = (x38 + x30);
uint128_t x45 = (x39 + x31);
uint128_t x46 = (x40 + x32);
uint64_t x47 = (uint64_t) (x37 >> 0x38);
uint64_t x48 = ((uint64_t)x37 & 0xffffffffffffff);
uint64_t x49 = (uint64_t) (x33 >> 0x38);
uint64_t x50 = ((uint64_t)x33 & 0xffffffffffffff);
uint128_t x51 = (((uint128_t)0x100000000000000 * x49) + x50);
uint64_t x52 = (uint64_t) (x51 >> 0x38);
uint64_t x53 = ((uint64_t)x51 & 0xffffffffffffff);
uint128_t x54 = (x46 + x52);
uint64_t x55 = (uint64_t) (x54 >> 0x38);
uint64_t x56 = ((uint64_t)x54 & 0xffffffffffffff);
uint128_t x57 = ((x47 + x43) + x52);
uint64_t x58 = (uint64_t) (x57 >> 0x38);
uint64_t x59 = ((uint64_t)x57 & 0xffffffffffffff);
uint128_t x60 = (x55 + x45);
uint64_t x61 = (uint64_t) (x60 >> 0x38);
uint64_t x62 = ((uint64_t)x60 & 0xffffffffffffff);
uint128_t x63 = (x58 + x42);
uint64_t x64 = (uint64_t) (x63 >> 0x38);
uint64_t x65 = ((uint64_t)x63 & 0xffffffffffffff);
uint128_t x66 = (x61 + x44);
uint64_t x67 = (uint64_t) (x66 >> 0x38);
uint64_t x68 = ((uint64_t)x66 & 0xffffffffffffff);
uint128_t x69 = (x64 + x41);
uint64_t x70 = (uint64_t) (x69 >> 0x38);
uint64_t x71 = ((uint64_t)x69 & 0xffffffffffffff);
uint64_t x72 = (x67 + x48);
uint64_t x73 = (x72 >> 0x38);
uint64_t x74 = (x72 & 0xffffffffffffff);
uint64_t x75 = (x70 + x53);
uint64_t x76 = (x75 >> 0x38);
uint64_t x77 = (x75 & 0xffffffffffffff);
uint64_t x78 = ((0x100000000000000 * x76) + x77);
uint64_t x79 = (x78 >> 0x38);
uint64_t x80 = (x78 & 0xffffffffffffff);
uint64_t x81 = ((x73 + x59) + x79);
uint64_t x82 = (x81 >> 0x38);
uint64_t x83 = (x81 & 0xffffffffffffff);
uint64_t x84 = (x56 + x79);
uint64_t x85 = (x84 >> 0x38);
uint64_t x86 = (x84 & 0xffffffffffffff);
return (Return x80, Return x71, (x82 + x65), Return x83, Return x74, Return x68, (x85 + x62), Return x86)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t) -> uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
