opp = λ var : Z.Syntax.base_type → Type,
λ '(x0, x1)%core,
uint64_t x3, uint8_t x4 = subborrow_u64(0x0, 0x0, x1);
uint64_t x6, uint8_t x7 = subborrow_u64(x4, 0x0, x0);
uint64_t x8 = cmovznz64(x7, 0x0, 0xffffffffffffffffL);
uint64_t x10, uint8_t x11 = addcarryx_u64(0x0, x3, (x8 & 0xffffffffffffffffL));
uint64_t x13, uint8_t _ = addcarryx_u64(x11, x6, (x8 & 0x7fffffffffffffffL));
(Return x13, Return x10)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t -> uint64_t * uint64_t)

Argument scope is [function_scope]
