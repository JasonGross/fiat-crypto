add = λ var : Z.Syntax.base_type → Type,
λ '(x2, x3, (x4, x5))%core,
uint64_t x7, uint8_t x8 = addcarryx_u64(0x0, x3, x5);
uint64_t x10, uint8_t x11 = addcarryx_u64(x8, x2, x4);
uint64_t x13, uint8_t x14 = subborrow_u64(0x0, x7, 0xffffffffffffffffL);
uint64_t x16, uint8_t x17 = subborrow_u64(x14, x10, 0x7fffffffffffffffL);
uint64_t _, uint8_t x20 = subborrow_u64(x17, x11, 0x0);
(cmovznz64(x20, x16, x10), cmovznz64(x20, x13, x7))
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * (uint64_t * uint64_t) -> uint64_t * uint64_t)

Argument scope is [function_scope]
