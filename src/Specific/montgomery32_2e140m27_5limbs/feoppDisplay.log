opp = λ var : Z.Syntax.base_type → Type,
λ '(x6, x7, x5, x3, x1)%core,
uint32_t x9, uint8_t x10 = subborrow_u32(0x0, 0x0, x1);
uint32_t x12, uint8_t x13 = subborrow_u32(x10, 0x0, x3);
uint32_t x15, uint8_t x16 = subborrow_u32(x13, 0x0, x5);
uint32_t x18, uint8_t x19 = subborrow_u32(x16, 0x0, x7);
uint32_t x21, uint8_t x22 = subborrow_u32(x19, 0x0, x6);
uint32_t x23 = cmovznz32(x22, 0x0, 0xffffffff);
uint32_t x25, uint8_t x26 = addcarryx_u32(0x0, x9, (x23 & 0xffffffe5));
uint32_t x28, uint8_t x29 = addcarryx_u32(x26, x12, (x23 & 0xffffffff));
uint32_t x31, uint8_t x32 = addcarryx_u32(x29, x15, (x23 & 0xffffffff));
uint32_t x34, uint8_t x35 = addcarryx_u32(x32, x18, (x23 & 0xffffffff));
uint32_t x37, uint8_t _ = addcarryx_u32(x35, x21, (x23 & 0xfff));
(Return x37, Return x34, Return x31, Return x28, Return x25)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
