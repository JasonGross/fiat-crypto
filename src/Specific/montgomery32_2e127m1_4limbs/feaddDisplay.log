add = λ var : Z.Syntax.base_type → Type,
λ '(x6, x7, x5, x3, (x12, x13, x11, x9))%core,
uint32_t x15, uint8_t x16 = addcarryx_u32(0x0, x3, x9);
uint32_t x18, uint8_t x19 = addcarryx_u32(x16, x5, x11);
uint32_t x21, uint8_t x22 = addcarryx_u32(x19, x7, x13);
uint32_t x24, uint8_t x25 = addcarryx_u32(x22, x6, x12);
uint32_t x27, uint8_t x28 = subborrow_u32(0x0, x15, 0xffffffff);
uint32_t x30, uint8_t x31 = subborrow_u32(x28, x18, 0xffffffff);
uint32_t x33, uint8_t x34 = subborrow_u32(x31, x21, 0xffffffff);
uint32_t x36, uint8_t x37 = subborrow_u32(x34, x24, 0x7fffffff);
uint32_t _, uint8_t x40 = subborrow_u32(x37, x25, 0x0);
(cmovznz32(x40, x36, x24), cmovznz32(x40, x33, x21), cmovznz32(x40, x30, x18), cmovznz32(x40, x27, x15))
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * (uint32_t * uint32_t * uint32_t * uint32_t) -> uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
