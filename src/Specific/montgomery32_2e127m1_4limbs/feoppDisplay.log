opp = λ var : Z.Syntax.base_type → Type,
λ '(x4, x5, x3, x1)%core,
uint32_t x7, uint8_t x8 = subborrow_u32(0x0, 0x0, x1);
uint32_t x10, uint8_t x11 = subborrow_u32(x8, 0x0, x3);
uint32_t x13, uint8_t x14 = subborrow_u32(x11, 0x0, x5);
uint32_t x16, uint8_t x17 = subborrow_u32(x14, 0x0, x4);
uint32_t x18 = cmovznz32(x17, 0x0, 0xffffffff);
uint32_t x20, uint8_t x21 = addcarryx_u32(0x0, x7, (x18 & 0xffffffff));
uint32_t x23, uint8_t x24 = addcarryx_u32(x21, x10, (x18 & 0xffffffff));
uint32_t x26, uint8_t x27 = addcarryx_u32(x24, x13, (x18 & 0xffffffff));
uint32_t x29, uint8_t _ = addcarryx_u32(x27, x16, (x18 & 0x7fffffff));
(Return x29, Return x26, Return x23, Return x20)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t -> uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
