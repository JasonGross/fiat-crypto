nonzero = λ var : Z.Syntax.base_type → Type,
λ '(x4, x5, x3, x1)%core,
uint32_t x6 = (x5 | x4);
uint32_t x7 = (x3 | x6);
uint32_t x8 = (x1 | x7);
return x8
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t -> uint32_t)

Argument scope is [function_scope]
