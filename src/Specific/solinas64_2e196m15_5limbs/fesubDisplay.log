sub = λ var : Z.Syntax.base_type → Type,
λ '(x8, x9, x7, x5, x3, (x16, x17, x15, x13, x11))%core,
(((0xfffffffffe + x8) - x16), ((0xfffffffffe + x9) - x17), ((0xfffffffffe + x7) - x15), ((0xfffffffffe + x5) - x13), ((0x1ffffffffe2 + x3) - x11))
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t) -> uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
