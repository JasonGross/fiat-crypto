(* This file is autogenerated from Defaults.v by remake_packages.py *)
Require Export Crypto.Specific.Framework.ArithmeticSynthesis.Defaults.


Local Ltac combine_pkgs CurveParameters_pkg ArithmeticSynthesisBase_pkg :=
  let CurveParameters_pkg := (eval hnf in CurveParameters_pkg) in
  let ArithmeticSynthesisBase_pkg := (eval hnf in ArithmeticSynthesisBase_pkg) in
  constr:((CurveParameters_pkg, ArithmeticSynthesisBase_pkg)).

Ltac pose_carry_sig CurveParameters_pkg ArithmeticSynthesisBase_pkg carry_sig :=
  let pkg := combine_pkgs CurveParameters_pkg ArithmeticSynthesisBase_pkg in
  lazymatch pkg with
  | ((?sz, ?bitwidth, ?s, ?c, ?carry_chains, ?a24, ?coef_div_modulus, ?goldilocks, ?montgomery, ?modinv_fuel), (?r, ?m, ?m', ?r', ?m'_correct, ?r'_correct, ?wt, ?sz2, ?half_sz, ?half_sz_nonzero, ?m_enc, ?coef, ?coef_mod, ?sz_nonzero, ?wt_nonzero, ?wt_nonneg, ?wt_divides, ?wt_divides', ?wt_divides_chains, ?wt_pos, ?wt_multiples))
    => pose_carry_sig' sz m wt s c carry_chains wt_nonzero wt_divides_chains carry_sig
  end.

Ltac pose_zero_sig CurveParameters_pkg ArithmeticSynthesisBase_pkg zero_sig :=
  let pkg := combine_pkgs CurveParameters_pkg ArithmeticSynthesisBase_pkg in
  lazymatch pkg with
  | ((?sz, ?bitwidth, ?s, ?c, ?carry_chains, ?a24, ?coef_div_modulus, ?goldilocks, ?montgomery, ?modinv_fuel), (?r, ?m, ?m', ?r', ?m'_correct, ?r'_correct, ?wt, ?sz2, ?half_sz, ?half_sz_nonzero, ?m_enc, ?coef, ?coef_mod, ?sz_nonzero, ?wt_nonzero, ?wt_nonneg, ?wt_divides, ?wt_divides', ?wt_divides_chains, ?wt_pos, ?wt_multiples))
    => pose_zero_sig' sz m wt zero_sig
  end.

Ltac pose_one_sig CurveParameters_pkg ArithmeticSynthesisBase_pkg one_sig :=
  let pkg := combine_pkgs CurveParameters_pkg ArithmeticSynthesisBase_pkg in
  lazymatch pkg with
  | ((?sz, ?bitwidth, ?s, ?c, ?carry_chains, ?a24, ?coef_div_modulus, ?goldilocks, ?montgomery, ?modinv_fuel), (?r, ?m, ?m', ?r', ?m'_correct, ?r'_correct, ?wt, ?sz2, ?half_sz, ?half_sz_nonzero, ?m_enc, ?coef, ?coef_mod, ?sz_nonzero, ?wt_nonzero, ?wt_nonneg, ?wt_divides, ?wt_divides', ?wt_divides_chains, ?wt_pos, ?wt_multiples))
    => pose_one_sig' sz m wt one_sig
  end.

Ltac pose_a24_sig CurveParameters_pkg ArithmeticSynthesisBase_pkg a24_sig :=
  let pkg := combine_pkgs CurveParameters_pkg ArithmeticSynthesisBase_pkg in
  lazymatch pkg with
  | ((?sz, ?bitwidth, ?s, ?c, ?carry_chains, ?a24, ?coef_div_modulus, ?goldilocks, ?montgomery, ?modinv_fuel), (?r, ?m, ?m', ?r', ?m'_correct, ?r'_correct, ?wt, ?sz2, ?half_sz, ?half_sz_nonzero, ?m_enc, ?coef, ?coef_mod, ?sz_nonzero, ?wt_nonzero, ?wt_nonneg, ?wt_divides, ?wt_divides', ?wt_divides_chains, ?wt_pos, ?wt_multiples))
    => pose_a24_sig' sz m wt a24 a24_sig
  end.

Ltac pose_add_sig CurveParameters_pkg ArithmeticSynthesisBase_pkg add_sig :=
  let pkg := combine_pkgs CurveParameters_pkg ArithmeticSynthesisBase_pkg in
  lazymatch pkg with
  | ((?sz, ?bitwidth, ?s, ?c, ?carry_chains, ?a24, ?coef_div_modulus, ?goldilocks, ?montgomery, ?modinv_fuel), (?r, ?m, ?m', ?r', ?m'_correct, ?r'_correct, ?wt, ?sz2, ?half_sz, ?half_sz_nonzero, ?m_enc, ?coef, ?coef_mod, ?sz_nonzero, ?wt_nonzero, ?wt_nonneg, ?wt_divides, ?wt_divides', ?wt_divides_chains, ?wt_pos, ?wt_multiples))
    => pose_add_sig' sz m wt wt_nonzero add_sig
  end.

Ltac pose_sub_sig CurveParameters_pkg ArithmeticSynthesisBase_pkg sub_sig :=
  let pkg := combine_pkgs CurveParameters_pkg ArithmeticSynthesisBase_pkg in
  lazymatch pkg with
  | ((?sz, ?bitwidth, ?s, ?c, ?carry_chains, ?a24, ?coef_div_modulus, ?goldilocks, ?montgomery, ?modinv_fuel), (?r, ?m, ?m', ?r', ?m'_correct, ?r'_correct, ?wt, ?sz2, ?half_sz, ?half_sz_nonzero, ?m_enc, ?coef, ?coef_mod, ?sz_nonzero, ?wt_nonzero, ?wt_nonneg, ?wt_divides, ?wt_divides', ?wt_divides_chains, ?wt_pos, ?wt_multiples))
    => pose_sub_sig' sz m wt wt_nonzero coef sub_sig
  end.

Ltac pose_opp_sig CurveParameters_pkg ArithmeticSynthesisBase_pkg opp_sig :=
  let pkg := combine_pkgs CurveParameters_pkg ArithmeticSynthesisBase_pkg in
  lazymatch pkg with
  | ((?sz, ?bitwidth, ?s, ?c, ?carry_chains, ?a24, ?coef_div_modulus, ?goldilocks, ?montgomery, ?modinv_fuel), (?r, ?m, ?m', ?r', ?m'_correct, ?r'_correct, ?wt, ?sz2, ?half_sz, ?half_sz_nonzero, ?m_enc, ?coef, ?coef_mod, ?sz_nonzero, ?wt_nonzero, ?wt_nonneg, ?wt_divides, ?wt_divides', ?wt_divides_chains, ?wt_pos, ?wt_multiples))
    => pose_opp_sig' sz m wt wt_nonzero coef opp_sig
  end.

Ltac pose_mul_sig CurveParameters_pkg ArithmeticSynthesisBase_pkg P_default_mul P_extra_prove_mul_eq mul_sig :=
  let pkg := combine_pkgs CurveParameters_pkg ArithmeticSynthesisBase_pkg in
  lazymatch pkg with
  | ((?sz, ?bitwidth, ?s, ?c, ?carry_chains, ?a24, ?coef_div_modulus, ?goldilocks, ?montgomery, ?modinv_fuel), (?r, ?m, ?m', ?r', ?m'_correct, ?r'_correct, ?wt, ?sz2, ?half_sz, ?half_sz_nonzero, ?m_enc, ?coef, ?coef_mod, ?sz_nonzero, ?wt_nonzero, ?wt_nonneg, ?wt_divides, ?wt_divides', ?wt_divides_chains, ?wt_pos, ?wt_multiples))
    => pose_mul_sig' P_default_mul P_extra_prove_mul_eq sz m wt s c sz2 wt_nonzero mul_sig
  end.

Ltac pose_square_sig CurveParameters_pkg ArithmeticSynthesisBase_pkg P_default_square P_extra_prove_square_eq square_sig :=
  let pkg := combine_pkgs CurveParameters_pkg ArithmeticSynthesisBase_pkg in
  lazymatch pkg with
  | ((?sz, ?bitwidth, ?s, ?c, ?carry_chains, ?a24, ?coef_div_modulus, ?goldilocks, ?montgomery, ?modinv_fuel), (?r, ?m, ?m', ?r', ?m'_correct, ?r'_correct, ?wt, ?sz2, ?half_sz, ?half_sz_nonzero, ?m_enc, ?coef, ?coef_mod, ?sz_nonzero, ?wt_nonzero, ?wt_nonneg, ?wt_divides, ?wt_divides', ?wt_divides_chains, ?wt_pos, ?wt_multiples))
    => pose_square_sig' P_default_square P_extra_prove_square_eq sz m wt s c sz2 wt_nonzero square_sig
  end.

Ltac pose_square_sig_from_mul_sig CurveParameters_pkg ArithmeticSynthesisBase_pkg mul_sig square_sig :=
  let pkg := combine_pkgs CurveParameters_pkg ArithmeticSynthesisBase_pkg in
  lazymatch pkg with
  | ((?sz, ?bitwidth, ?s, ?c, ?carry_chains, ?a24, ?coef_div_modulus, ?goldilocks, ?montgomery, ?modinv_fuel), (?r, ?m, ?m', ?r', ?m'_correct, ?r'_correct, ?wt, ?sz2, ?half_sz, ?half_sz_nonzero, ?m_enc, ?coef, ?coef_mod, ?sz_nonzero, ?wt_nonzero, ?wt_nonneg, ?wt_divides, ?wt_divides', ?wt_divides_chains, ?wt_pos, ?wt_multiples))
    => pose_square_sig_from_mul_sig' sz m wt mul_sig square_sig
  end.

Ltac pose_ring CurveParameters_pkg ArithmeticSynthesisBase_pkg zero_sig one_sig opp_sig add_sig sub_sig mul_sig ring :=
  let pkg := combine_pkgs CurveParameters_pkg ArithmeticSynthesisBase_pkg in
  lazymatch pkg with
  | ((?sz, ?bitwidth, ?s, ?c, ?carry_chains, ?a24, ?coef_div_modulus, ?goldilocks, ?montgomery, ?modinv_fuel), (?r, ?m, ?m', ?r', ?m'_correct, ?r'_correct, ?wt, ?sz2, ?half_sz, ?half_sz_nonzero, ?m_enc, ?coef, ?coef_mod, ?sz_nonzero, ?wt_nonzero, ?wt_nonneg, ?wt_divides, ?wt_divides', ?wt_divides_chains, ?wt_pos, ?wt_multiples))
    => pose_ring' sz m wt wt_divides' sz_nonzero wt_nonzero zero_sig one_sig opp_sig add_sig sub_sig mul_sig ring
  end.
