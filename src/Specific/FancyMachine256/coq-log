*emacs:
<call val="Init"><option val="none"/></call>

*coqtop:
<value val="good"><state_id val="2"/></value>
*emacs:
<call val="Query"><pair><string>Remove Search Blacklist "Private_" "_subproof".
Add Search Blacklist "Private_" "_subproof".</string>
<state_id val="2"/></pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="2"/><feedback_content val="processed"/></feedback><value val="good"><string></string></value>
*emacs:
<call val="SetOptions"><list><pair><list><string>Printing</string>
<string>Depth</string>
</list>
<option_value val="intvalue"><option val="some"><int>50</int>
</option>
</option_value>
</pair>
</list>
</call>

*coqtop:
<value val="good"><unit/></value>
*emacs:
<call val="SetOptions"><list><pair><list><string>Printing</string>
<string>Width</string>
</list>
<option_value val="intvalue"><option val="some"><int>133</int>
</option>
</option_value>
</pair>
</list>
</call>

*coqtop:
<value val="good"><unit/></value>
*emacs:
<call val="Add"><pair><pair><string>Require&nbsp;Import&nbsp;Coq.Classes.RelationClasses&nbsp;Coq.Classes.Morphisms.</string>
<int>-1</int>
</pair>
<pair><state_id val="2"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="2"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="4"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="2"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="4"/><feedback_content val="filedependency"><option val="none"/><string>Coq.Classes.RelationClasses</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="4"/><feedback_content val="fileloaded"><string>Coq.Classes.RelationClasses</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Classes/RelationClasses.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="4"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Classes/RelationClasses.vo</string></option><string>Coq.Program.Basics</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="4"/><feedback_content val="fileloaded"><string>Coq.Program.Basics</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Program/Basics.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="4"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Classes/RelationClasses.vo</string></option><string>Coq.Classes.Init</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="4"/><feedback_content val="fileloaded"><string>Coq.Classes.Init</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Classes/Init.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="4"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Classes/RelationClasses.vo</string></option><string>Coq.Program.Tactics</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="4"/><feedback_content val="fileloaded"><string>Coq.Program.Tactics</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Program/Tactics.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="4"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Classes/RelationClasses.vo</string></option><string>Coq.Relations.Relation_Definitions</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="4"/><feedback_content val="fileloaded"><string>Coq.Relations.Relation_Definitions</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Relations/Relation_Definitions.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="4"/><feedback_content val="filedependency"><option val="none"/><string>Coq.Classes.Morphisms</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="4"/><feedback_content val="fileloaded"><string>Coq.Classes.Morphisms</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Classes/Morphisms.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="4"/><feedback_content val="processed"/></feedback><value val="good"><pair><state_id val="4"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Require&nbsp;Export&nbsp;Coq.ZArith.ZArith.</string>
<int>-2</int>
</pair>
<pair><state_id val="4"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="4"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="4"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="none"/><string>Coq.ZArith.ZArith</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.ZArith.ZArith</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.BinNums</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.BinNums</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/BinNums.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Logic.EqdepFacts</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Logic.EqdepFacts</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Logic/EqdepFacts.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Logic.Eqdep_dec</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Logic.Eqdep_dec</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Logic/Eqdep_dec.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Classes.CRelationClasses</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Classes.CRelationClasses</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Classes/CRelationClasses.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Classes.CMorphisms</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Classes.CMorphisms</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Classes/CMorphisms.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Classes.Morphisms_Prop</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Classes.Morphisms_Prop</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Classes/Morphisms_Prop.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Classes.Equivalence</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Classes.Equivalence</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Classes/Equivalence.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Classes.SetoidTactics</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Classes.SetoidTactics</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Classes/SetoidTactics.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Setoids.Setoid</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Setoids.Setoid</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Setoids/Setoid.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Bool.Bool</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Bool.Bool</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Bool/Bool.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Structures.Equalities</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Structures.Equalities</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Structures/Equalities.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Relations.Relation_Operators</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Relations.Relation_Operators</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Relations/Relation_Operators.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Relations.Operators_Properties</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Relations.Operators_Properties</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Relations/Operators_Properties.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Relations.Relations</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Relations.Relations</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Relations/Relations.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Structures.Orders</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Structures.Orders</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Structures/Orders.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Structures.OrdersTac</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Structures.OrdersTac</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Structures/OrdersTac.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Structures.OrdersFacts</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Structures.OrdersFacts</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Structures/OrdersFacts.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Structures.GenericMinMax</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Structures.GenericMinMax</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Structures/GenericMinMax.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.NumPrelude</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.NumPrelude</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/NumPrelude.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.NatInt.NZAxioms</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.NatInt.NZAxioms</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/NatInt/NZAxioms.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.NatInt.NZBase</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.NatInt.NZBase</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/NatInt/NZBase.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.NatInt.NZAdd</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.NatInt.NZAdd</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/NatInt/NZAdd.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.NatInt.NZMul</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.NatInt.NZMul</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/NatInt/NZMul.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Logic.Decidable</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Logic.Decidable</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Logic/Decidable.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.NatInt.NZOrder</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.NatInt.NZOrder</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/NatInt/NZOrder.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.NatInt.NZAddOrder</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.NatInt.NZAddOrder</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/NatInt/NZAddOrder.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.NatInt.NZMulOrder</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.NatInt.NZMulOrder</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/NatInt/NZMulOrder.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.NatInt.NZParity</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.NatInt.NZParity</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/NatInt/NZParity.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.NatInt.NZPow</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.NatInt.NZPow</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/NatInt/NZPow.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.NatInt.NZSqrt</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.NatInt.NZSqrt</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/NatInt/NZSqrt.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.NatInt.NZLog</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.NatInt.NZLog</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/NatInt/NZLog.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.NatInt.NZDiv</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.NatInt.NZDiv</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/NatInt/NZDiv.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.NatInt.NZGcd</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.NatInt.NZGcd</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/NatInt/NZGcd.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.NatInt.NZBits</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.NatInt.NZBits</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/NatInt/NZBits.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Natural.Abstract.NAxioms</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Natural.Abstract.NAxioms</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Natural/Abstract/NAxioms.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.NatInt.NZProperties</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.NatInt.NZProperties</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/NatInt/NZProperties.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Natural.Abstract.NBase</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Natural.Abstract.NBase</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Natural/Abstract/NBase.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Natural.Abstract.NAdd</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Natural.Abstract.NAdd</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Natural/Abstract/NAdd.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Natural.Abstract.NOrder</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Natural.Abstract.NOrder</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Natural/Abstract/NOrder.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Natural.Abstract.NAddOrder</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Natural.Abstract.NAddOrder</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Natural/Abstract/NAddOrder.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Natural.Abstract.NMulOrder</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Natural.Abstract.NMulOrder</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Natural/Abstract/NMulOrder.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Natural.Abstract.NSub</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Natural.Abstract.NSub</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Natural/Abstract/NSub.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Natural.Abstract.NMaxMin</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Natural.Abstract.NMaxMin</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Natural/Abstract/NMaxMin.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Natural.Abstract.NParity</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Natural.Abstract.NParity</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Natural/Abstract/NParity.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Natural.Abstract.NPow</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Natural.Abstract.NPow</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Natural/Abstract/NPow.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Natural.Abstract.NSqrt</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Natural.Abstract.NSqrt</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Natural/Abstract/NSqrt.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Natural.Abstract.NLog</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Natural.Abstract.NLog</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Natural/Abstract/NLog.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Natural.Abstract.NDiv</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Natural.Abstract.NDiv</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Natural/Abstract/NDiv.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Natural.Abstract.NGcd</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Natural.Abstract.NGcd</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Natural/Abstract/NGcd.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Natural.Abstract.NLcm</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Natural.Abstract.NLcm</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Natural/Abstract/NLcm.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Natural.Abstract.NBits</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Natural.Abstract.NBits</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Natural/Abstract/NBits.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Natural.Abstract.NProperties</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Natural.Abstract.NProperties</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Natural/Abstract/NProperties.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Arith.PeanoNat</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Arith.PeanoNat</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Arith/PeanoNat.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Arith.Le</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Arith.Le</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Arith/Le.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Arith.Lt</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Arith.Lt</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Arith/Lt.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Arith.Plus</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Arith.Plus</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Arith/Plus.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.PArith.BinPosDef</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.PArith.BinPosDef</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/PArith/BinPosDef.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.PArith.BinPos</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.PArith.BinPos</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/PArith/BinPos.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.NArith.BinNatDef</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.NArith.BinNatDef</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/NArith/BinNatDef.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.NArith.BinNat</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.NArith.BinNat</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/NArith/BinNat.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.PArith.Pnat</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.PArith.Pnat</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/PArith/Pnat.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Integer.Abstract.ZAxioms</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Integer.Abstract.ZAxioms</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Integer/Abstract/ZAxioms.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Integer.Abstract.ZBase</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Integer.Abstract.ZBase</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Integer/Abstract/ZBase.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Integer.Abstract.ZAdd</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Integer.Abstract.ZAdd</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Integer/Abstract/ZAdd.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Integer.Abstract.ZMul</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Integer.Abstract.ZMul</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Integer/Abstract/ZMul.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Integer.Abstract.ZLt</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Integer.Abstract.ZLt</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Integer/Abstract/ZLt.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Integer.Abstract.ZAddOrder</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Integer.Abstract.ZAddOrder</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Integer/Abstract/ZAddOrder.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Integer.Abstract.ZMulOrder</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Integer.Abstract.ZMulOrder</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Integer/Abstract/ZMulOrder.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Integer.Abstract.ZMaxMin</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Integer.Abstract.ZMaxMin</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Integer/Abstract/ZMaxMin.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Integer.Abstract.ZSgnAbs</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Integer.Abstract.ZSgnAbs</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Integer/Abstract/ZSgnAbs.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Integer.Abstract.ZParity</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Integer.Abstract.ZParity</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Integer/Abstract/ZParity.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Integer.Abstract.ZPow</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Integer.Abstract.ZPow</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Integer/Abstract/ZPow.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Integer.Abstract.ZDivTrunc</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Integer.Abstract.ZDivTrunc</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Integer/Abstract/ZDivTrunc.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Integer.Abstract.ZDivFloor</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Integer.Abstract.ZDivFloor</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Integer/Abstract/ZDivFloor.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Integer.Abstract.ZGcd</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Integer.Abstract.ZGcd</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Integer/Abstract/ZGcd.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Integer.Abstract.ZLcm</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Integer.Abstract.ZLcm</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Integer/Abstract/ZLcm.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Integer.Abstract.ZBits</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Integer.Abstract.ZBits</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Integer/Abstract/ZBits.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Numbers.Integer.Abstract.ZProperties</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Numbers.Integer.Abstract.ZProperties</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Integer/Abstract/ZProperties.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.ZArith.BinIntDef</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.ZArith.BinIntDef</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/BinIntDef.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.ZArith.BinInt</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.ZArith.BinInt</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/BinInt.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Arith.Gt</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Arith.Gt</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Arith/Gt.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Arith.Minus</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Arith.Minus</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Arith/Minus.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Arith.Mult</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Arith.Mult</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Arith/Mult.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.ZArith.Zcompare</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.ZArith.Zcompare</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/Zcompare.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Arith.Between</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Arith.Between</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Arith/Between.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Arith.Peano_dec</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Arith.Peano_dec</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Arith/Peano_dec.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Arith.Compare_dec</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Arith.Compare_dec</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Arith/Compare_dec.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Arith.Factorial</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Arith.Factorial</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Arith/Factorial.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Arith.EqNat</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Arith.EqNat</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Arith/EqNat.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Arith.Wf_nat</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Arith.Wf_nat</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Arith/Wf_nat.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Arith.Arith_base</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Arith.Arith_base</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Arith/Arith_base.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.ZArith.Zorder</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.ZArith.Zorder</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/Zorder.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.ZArith.Zeven</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.ZArith.Zeven</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/Zeven.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.ZArith.Zminmax</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.ZArith.Zminmax</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/Zminmax.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.ZArith.Zmin</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.ZArith.Zmin</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/Zmin.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.ZArith.Zmax</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.ZArith.Zmax</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/Zmax.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.NArith.Nnat</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.NArith.Nnat</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/NArith/Nnat.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.ZArith.Znat</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.ZArith.Znat</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/Znat.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Bool.Sumbool</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Bool.Sumbool</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Bool/Sumbool.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.ZArith.ZArith_dec</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.ZArith.ZArith_dec</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith_dec.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.ZArith.Zabs</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.ZArith.Zabs</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/Zabs.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.ZArith.auxiliary</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.ZArith.auxiliary</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/auxiliary.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.ZArith.Zbool</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.ZArith.Zbool</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/Zbool.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.ZArith.Zmisc</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.ZArith.Zmisc</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/Zmisc.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.ZArith.Wf_Z</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.ZArith.Wf_Z</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/Wf_Z.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.ZArith.Zhints</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.ZArith.Zhints</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/Zhints.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.ZArith.ZArith_base</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.ZArith.ZArith_base</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith_base.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.setoid_ring.Ring_theory</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.setoid_ring.Ring_theory</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/setoid_ring/Ring_theory.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.ZArith.Zpow_def</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.ZArith.Zpow_def</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/Zpow_def.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.quote.Quote</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.quote.Quote</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/quote/Quote.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Lists.List</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Lists.List</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Lists/List.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.setoid_ring.BinList</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.setoid_ring.BinList</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/setoid_ring/BinList.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.setoid_ring.Ring_polynom</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.setoid_ring.Ring_polynom</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/setoid_ring/Ring_polynom.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Lists.ListTactics</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Lists.ListTactics</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Lists/ListTactics.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.setoid_ring.InitialRing</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.setoid_ring.InitialRing</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/setoid_ring/InitialRing.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.setoid_ring.Ring_tac</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.setoid_ring.Ring_tac</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/setoid_ring/Ring_tac.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.setoid_ring.Ring_base</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.setoid_ring.Ring_base</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/setoid_ring/Ring_base.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.setoid_ring.Ring</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.setoid_ring.Ring</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/setoid_ring/Ring.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.setoid_ring.ZArithRing</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.setoid_ring.ZArithRing</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/setoid_ring/ZArithRing.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.omega.OmegaLemmas</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.omega.OmegaLemmas</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/omega/OmegaLemmas.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.setoid_ring.ArithRing</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.setoid_ring.ArithRing</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/setoid_ring/ArithRing.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Arith.Arith</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Arith.Arith</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Arith/Arith.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Arith.Max</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Arith.Max</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Arith/Max.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.Arith.Min</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.Arith.Min</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Arith/Min.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.omega.PreOmega</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.omega.PreOmega</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/omega/PreOmega.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.omega.Omega</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.omega.Omega</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/omega/Omega.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.ZArith.Zcomplements</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.ZArith.Zcomplements</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/Zcomplements.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.ZArith.Zpower</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.ZArith.Zpower</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/Zpower.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.ZArith.Zdiv</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.ZArith.Zdiv</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/Zdiv.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/ZArith.vo</string></option><string>Coq.ZArith.Zlogarithm</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="fileloaded"><string>Coq.ZArith.Zlogarithm</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/Zlogarithm.vo</string></feedback_content></feedback>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>[Loading&nbsp;ML&nbsp;file&nbsp;z_syntax_plugin.cmxs&nbsp;...&nbsp;done]</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>[Loading&nbsp;ML&nbsp;file&nbsp;quote_plugin.cmxs&nbsp;...&nbsp;done]</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>[Loading&nbsp;ML&nbsp;file&nbsp;newring_plugin.cmxs&nbsp;...&nbsp;done]</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>[Loading&nbsp;ML&nbsp;file&nbsp;omega_plugin.cmxs&nbsp;...&nbsp;done]</_></richpp></message>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="processed"/></feedback><value val="good"><pair><state_id val="5"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Require&nbsp;Export&nbsp;Crypto.BoundedArithmetic.Interface.</string>
<int>-3</int>
</pair>
<pair><state_id val="5"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="5"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="none"/><string>Crypto.BoundedArithmetic.Interface</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Crypto.BoundedArithmetic.Interface</string><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.ZArith.Znumtheory</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.ZArith.Znumtheory</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/ZArith/Znumtheory.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.micromega.OrderedRing</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.micromega.OrderedRing</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/micromega/OrderedRing.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.NArith.Ndiv_def</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.NArith.Ndiv_def</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/NArith/Ndiv_def.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.NArith.Nsqrt_def</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.NArith.Nsqrt_def</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/NArith/Nsqrt_def.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.NArith.Ngcd_def</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.NArith.Ngcd_def</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/NArith/Ngcd_def.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.Vectors.Fin</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.Vectors.Fin</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Vectors/Fin.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.Vectors.VectorDef</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.Vectors.VectorDef</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Vectors/VectorDef.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.Vectors.VectorSpec</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.Vectors.VectorSpec</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Vectors/VectorSpec.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.Vectors.VectorEq</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.Vectors.VectorEq</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Vectors/VectorEq.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.Vectors.Vector</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.Vectors.Vector</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Vectors/Vector.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.Bool.Bvector</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.Bool.Bvector</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Bool/Bvector.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.NArith.Ndigits</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.NArith.Ndigits</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/NArith/Ndigits.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.setoid_ring.NArithRing</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.setoid_ring.NArithRing</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/setoid_ring/NArithRing.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.NArith.NArith</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.NArith.NArith</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/NArith/NArith.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.micromega.Env</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.micromega.Env</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/micromega/Env.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.micromega.EnvRing</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.micromega.EnvRing</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/micromega/EnvRing.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.micromega.Refl</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.micromega.Refl</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/micromega/Refl.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.micromega.Tauto</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.micromega.Tauto</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/micromega/Tauto.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.micromega.RingMicromega</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.micromega.RingMicromega</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/micromega/RingMicromega.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.micromega.ZCoeff</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.micromega.ZCoeff</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/micromega/ZCoeff.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.QArith.QArith_base</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.QArith.QArith_base</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/QArith/QArith_base.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.setoid_ring.Field_theory</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.setoid_ring.Field_theory</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/setoid_ring/Field_theory.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.setoid_ring.Field_tac</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.setoid_ring.Field_tac</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/setoid_ring/Field_tac.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.setoid_ring.Field</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.setoid_ring.Field</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/setoid_ring/Field.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.QArith.Qfield</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.QArith.Qfield</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/QArith/Qfield.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.QArith.Qring</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.QArith.Qring</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/QArith/Qring.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.QArith.Qreduction</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.QArith.Qreduction</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/QArith/Qreduction.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.QArith.QArith</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.QArith.QArith</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/QArith/QArith.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.micromega.VarMap</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.micromega.VarMap</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/micromega/VarMap.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.micromega.ZMicromega</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.micromega.ZMicromega</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/micromega/ZMicromega.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.micromega.QMicromega</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.micromega.QMicromega</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/micromega/QMicromega.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.Reals.Rdefinitions</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.Reals.Rdefinitions</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Reals/Rdefinitions.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.Reals.Raxioms</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.Reals.Raxioms</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Reals/Raxioms.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.Reals.Rpow_def</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.Reals.Rpow_def</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Reals/Rpow_def.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.setoid_ring.RealField</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.setoid_ring.RealField</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/setoid_ring/RealField.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.Reals.RIneq</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.Reals.RIneq</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Reals/RIneq.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.Reals.DiscrR</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.Reals.DiscrR</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Reals/DiscrR.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.micromega.RMicromega</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.micromega.RMicromega</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/micromega/RMicromega.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.micromega.Lia</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.micromega.Lia</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/micromega/Lia.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.micromega.Lra</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.micromega.Lra</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/micromega/Lra.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.micromega.Lqa</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.micromega.Lqa</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/micromega/Lqa.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.micromega.Psatz</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.micromega.Psatz</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/micromega/Psatz.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.Arith.Even</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.Arith.Even</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Arith/Even.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.Numbers.Natural.Peano.NPeano</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.Numbers.Natural.Peano.NPeano</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Numbers/Natural/Peano/NPeano.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Crypto.Util.NatUtil</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Crypto.Util.NatUtil</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Util/NatUtil.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Crypto.Util.GlobalSettings</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Crypto.Util.GlobalSettings</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Util/GlobalSettings.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Crypto.Util.FixCoqMistakes</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Crypto.Util.FixCoqMistakes</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Util/FixCoqMistakes.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Crypto.Util.Tactics</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Crypto.Util.Tactics</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Util/Tactics.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Crypto.Util.Notations</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Crypto.Util.Notations</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Util/Notations.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Crypto.Tactics.VerdiTactics</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Crypto.Tactics.VerdiTactics</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Tactics/VerdiTactics.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Crypto.Util.ZUtil</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Crypto.Util.ZUtil</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Util/ZUtil.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Crypto.Util.Isomorphism</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Crypto.Util.Isomorphism</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Util/Isomorphism.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Crypto.Util.HProp</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Crypto.Util.HProp</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Util/HProp.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Crypto.Util.Equality</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Crypto.Util.Equality</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Util/Equality.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Crypto.Util.Sigma</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Crypto.Util.Sigma</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Util/Sigma.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Crypto.Util.Decidable</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Crypto.Util.Decidable</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Util/Decidable.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.Sets.Relations_1</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.Sets.Relations_1</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Sets/Relations_1.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.Sorting.Sorted</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.Sorting.Sorted</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Sorting/Sorted.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Coq.Lists.SetoidList</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Coq.Lists.SetoidList</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Lists/SetoidList.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Crypto.Util.ListUtil</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Crypto.Util.ListUtil</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Util/ListUtil.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Crypto.Util.Tuple</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Crypto.Util.Tuple</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Util/Tuple.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/Interface.vo</string></option><string>Crypto.Util.AutoRewrite</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="fileloaded"><string>Crypto.Util.AutoRewrite</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Util/AutoRewrite.vo</string></feedback_content></feedback>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>[Loading&nbsp;ML&nbsp;file&nbsp;r_syntax_plugin.cmxs&nbsp;...&nbsp;done]</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>[Loading&nbsp;ML&nbsp;file&nbsp;micromega_plugin.cmxs&nbsp;...&nbsp;done]</_></richpp></message>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="processed"/></feedback><value val="good"><pair><state_id val="6"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Require&nbsp;Export&nbsp;Crypto.BoundedArithmetic.ArchitectureToZLike.</string>
<int>-4</int>
</pair>
<pair><state_id val="6"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="7"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="6"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="7"/><feedback_content val="filedependency"><option val="none"/><string>Crypto.BoundedArithmetic.ArchitectureToZLike</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="7"/><feedback_content val="fileloaded"><string>Crypto.BoundedArithmetic.ArchitectureToZLike</string><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/ArchitectureToZLike.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="7"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/ArchitectureToZLike.vo</string></option><string>Crypto.BoundedArithmetic.InterfaceProofs</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="7"/><feedback_content val="fileloaded"><string>Crypto.BoundedArithmetic.InterfaceProofs</string><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/InterfaceProofs.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="7"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/ArchitectureToZLike.vo</string></option><string>Crypto.Util.CaseUtil</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="7"/><feedback_content val="fileloaded"><string>Crypto.Util.CaseUtil</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Util/CaseUtil.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="7"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/ArchitectureToZLike.vo</string></option><string>Crypto.BaseSystem</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="7"/><feedback_content val="fileloaded"><string>Crypto.BaseSystem</string><string>/home/jgross/Documents/repos/fiat-crypto/src/BaseSystem.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="7"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/ArchitectureToZLike.vo</string></option><string>Crypto.ModularArithmetic.Pow2Base</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="7"/><feedback_content val="fileloaded"><string>Crypto.ModularArithmetic.Pow2Base</string><string>/home/jgross/Documents/repos/fiat-crypto/src/ModularArithmetic/Pow2Base.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="7"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/ArchitectureToZLike.vo</string></option><string>Crypto.BoundedArithmetic.DoubleBounded</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="7"/><feedback_content val="fileloaded"><string>Crypto.BoundedArithmetic.DoubleBounded</string><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/DoubleBounded.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="7"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/ArchitectureToZLike.vo</string></option><string>Crypto.ModularArithmetic.ZBounded</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="7"/><feedback_content val="fileloaded"><string>Crypto.ModularArithmetic.ZBounded</string><string>/home/jgross/Documents/repos/fiat-crypto/src/ModularArithmetic/ZBounded.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="7"/><feedback_content val="processed"/></feedback><value val="good"><pair><state_id val="7"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Require&nbsp;Export&nbsp;Crypto.BoundedArithmetic.ArchitectureToZLikeProofs.</string>
<int>-5</int>
</pair>
<pair><state_id val="7"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="7"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="8"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="7"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="8"/><feedback_content val="filedependency"><option val="none"/><string>Crypto.BoundedArithmetic.ArchitectureToZLikeProofs</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="8"/><feedback_content val="fileloaded"><string>Crypto.BoundedArithmetic.ArchitectureToZLikeProofs</string><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/ArchitectureToZLikeProofs.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="8"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/ArchitectureToZLikeProofs.vo</string></option><string>Crypto.BaseSystemProofs</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="8"/><feedback_content val="fileloaded"><string>Crypto.BaseSystemProofs</string><string>/home/jgross/Documents/repos/fiat-crypto/src/BaseSystemProofs.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="8"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/ArchitectureToZLikeProofs.vo</string></option><string>Coq.funind.Recdef</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="8"/><feedback_content val="fileloaded"><string>Coq.funind.Recdef</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/plugins/funind/Recdef.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="8"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/ArchitectureToZLikeProofs.vo</string></option><string>Crypto.ModularArithmetic.Pow2BaseProofs</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="8"/><feedback_content val="fileloaded"><string>Crypto.ModularArithmetic.Pow2BaseProofs</string><string>/home/jgross/Documents/repos/fiat-crypto/src/ModularArithmetic/Pow2BaseProofs.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="8"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/ArchitectureToZLikeProofs.vo</string></option><string>Crypto.BoundedArithmetic.DoubleBoundedProofs</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="8"/><feedback_content val="fileloaded"><string>Crypto.BoundedArithmetic.DoubleBoundedProofs</string><string>/home/jgross/Documents/repos/fiat-crypto/src/BoundedArithmetic/DoubleBoundedProofs.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="8"/><feedback_content val="processed"/></feedback><value val="good"><pair><state_id val="8"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Require&nbsp;Export&nbsp;Crypto.Util.Tuple.</string>
<int>-6</int>
</pair>
<pair><state_id val="8"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="8"/><feedback_content val="processed"/></feedback><feedback object="state" route="0"><state_id val="9"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback><feedback object="state" route="0"><state_id val="8"/><feedback_content val="processed"/></feedback><feedback object="state" route="0"><state_id val="9"/><feedback_content val="processed"/></feedback><value val="good"><pair><state_id val="9"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Require&nbsp;Import&nbsp;Crypto.Util.Option&nbsp;Crypto.Util.Sigma&nbsp;Crypto.Util.Prod.</string>
<int>-7</int>
</pair>
<pair><state_id val="9"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="9"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="10"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="9"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="10"/><feedback_content val="filedependency"><option val="none"/><string>Crypto.Util.Option</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="10"/><feedback_content val="fileloaded"><string>Crypto.Util.Option</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Util/Option.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="10"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/Util/Option.vo</string></option><string>Crypto.Util.Logic</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="10"/><feedback_content val="fileloaded"><string>Crypto.Util.Logic</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Util/Logic.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="10"/><feedback_content val="filedependency"><option val="none"/><string>Crypto.Util.Prod</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="10"/><feedback_content val="fileloaded"><string>Crypto.Util.Prod</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Util/Prod.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="10"/><feedback_content val="processed"/></feedback><value val="good"><pair><state_id val="10"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Require&nbsp;Import&nbsp;Crypto.Reflection.Named.Syntax.</string>
<int>-8</int>
</pair>
<pair><state_id val="10"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="10"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="11"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="10"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="11"/><feedback_content val="filedependency"><option val="none"/><string>Crypto.Reflection.Named.Syntax</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="11"/><feedback_content val="fileloaded"><string>Crypto.Reflection.Named.Syntax</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Reflection/Named/Syntax.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="11"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/Reflection/Named/Syntax.vo</string></option><string>Coq.Strings.Ascii</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="11"/><feedback_content val="fileloaded"><string>Coq.Strings.Ascii</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Strings/Ascii.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="11"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/Reflection/Named/Syntax.vo</string></option><string>Coq.Strings.String</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="11"/><feedback_content val="fileloaded"><string>Coq.Strings.String</string><string>/home/jgross/.local64/coq/coq-v8.6/lib/coq/theories/Strings/String.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="11"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/Reflection/Named/Syntax.vo</string></option><string>Crypto.Reflection.Syntax</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="11"/><feedback_content val="fileloaded"><string>Crypto.Reflection.Syntax</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Reflection/Syntax.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="11"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/Reflection/Named/Syntax.vo</string></option><string>Crypto.Util.PointedProp</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="11"/><feedback_content val="fileloaded"><string>Crypto.Util.PointedProp</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Util/PointedProp.vo</string></feedback_content></feedback>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>[Loading&nbsp;ML&nbsp;file&nbsp;ascii_syntax_plugin.cmxs&nbsp;...&nbsp;done]</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>[Loading&nbsp;ML&nbsp;file&nbsp;string_syntax_plugin.cmxs&nbsp;...&nbsp;done]</_></richpp></message>
*coqtop:
<feedback object="state" route="0"><state_id val="11"/><feedback_content val="processed"/></feedback><value val="good"><pair><state_id val="11"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Require&nbsp;Import&nbsp;Crypto.Reflection.Named.DeadCodeElimination.</string>
<int>-9</int>
</pair>
<pair><state_id val="11"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="11"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="12"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="11"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="12"/><feedback_content val="filedependency"><option val="none"/><string>Crypto.Reflection.Named.DeadCodeElimination</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="12"/><feedback_content val="fileloaded"><string>Crypto.Reflection.Named.DeadCodeElimination</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Reflection/Named/DeadCodeElimination.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="12"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/Reflection/Named/DeadCodeElimination.vo</string></option><string>Crypto.Reflection.Named.NameUtil</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="12"/><feedback_content val="fileloaded"><string>Crypto.Reflection.Named.NameUtil</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Reflection/Named/NameUtil.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="12"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/Reflection/Named/DeadCodeElimination.vo</string></option><string>Crypto.Reflection.Named.Compile</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="12"/><feedback_content val="fileloaded"><string>Crypto.Reflection.Named.Compile</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Reflection/Named/Compile.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="12"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/Reflection/Named/DeadCodeElimination.vo</string></option><string>Crypto.Reflection.FilterLive</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="12"/><feedback_content val="fileloaded"><string>Crypto.Reflection.FilterLive</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Reflection/FilterLive.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="12"/><feedback_content val="processed"/></feedback>
*coqtop:
<value val="good"><pair><state_id val="12"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Require&nbsp;Export&nbsp;Crypto.Reflection.Syntax.</string>
<int>-10</int>
</pair>
<pair><state_id val="12"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="12"/><feedback_content val="processed"/></feedback><feedback object="state" route="0"><state_id val="13"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback><feedback object="state" route="0"><state_id val="12"/><feedback_content val="processed"/></feedback><feedback object="state" route="0"><state_id val="13"/><feedback_content val="processed"/></feedback><value val="good"><pair><state_id val="13"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Require&nbsp;Import&nbsp;Crypto.Reflection.Linearize.</string>
<int>-11</int>
</pair>
<pair><state_id val="13"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="13"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="14"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="13"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="14"/><feedback_content val="filedependency"><option val="none"/><string>Crypto.Reflection.Linearize</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="14"/><feedback_content val="fileloaded"><string>Crypto.Reflection.Linearize</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Reflection/Linearize.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="14"/><feedback_content val="processed"/></feedback><value val="good"><pair><state_id val="14"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Require&nbsp;Import&nbsp;Crypto.Reflection.Inline.</string>
<int>-12</int>
</pair>
<pair><state_id val="14"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="14"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="15"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="14"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="15"/><feedback_content val="filedependency"><option val="none"/><string>Crypto.Reflection.Inline</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="15"/><feedback_content val="fileloaded"><string>Crypto.Reflection.Inline</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Reflection/Inline.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="15"/><feedback_content val="processed"/></feedback><value val="good"><pair><state_id val="15"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Require&nbsp;Import&nbsp;Crypto.Reflection.CommonSubexpressionElimination.</string>
<int>-13</int>
</pair>
<pair><state_id val="15"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="15"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="16"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="15"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="16"/><feedback_content val="filedependency"><option val="none"/><string>Crypto.Reflection.CommonSubexpressionElimination</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="16"/><feedback_content val="fileloaded"><string>Crypto.Reflection.CommonSubexpressionElimination</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Reflection/CommonSubexpressionElimination.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="16"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/Reflection/CommonSubexpressionElimination.vo</string></option><string>Crypto.Util.Bool</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="16"/><feedback_content val="fileloaded"><string>Crypto.Util.Bool</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Util/Bool.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="16"/><feedback_content val="processed"/></feedback><value val="good"><pair><state_id val="16"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Require&nbsp;Export&nbsp;Crypto.Reflection.Reify.</string>
<int>-14</int>
</pair>
<pair><state_id val="16"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="16"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="17"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="16"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="17"/><feedback_content val="filedependency"><option val="none"/><string>Crypto.Reflection.Reify</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="17"/><feedback_content val="fileloaded"><string>Crypto.Reflection.Reify</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Reflection/Reify.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="17"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/Reflection/Reify.vo</string></option><string>Crypto.Reflection.WfProofs</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="17"/><feedback_content val="fileloaded"><string>Crypto.Reflection.WfProofs</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Reflection/WfProofs.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="17"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/Reflection/Reify.vo</string></option><string>Crypto.Reflection.InterpProofs</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="17"/><feedback_content val="fileloaded"><string>Crypto.Reflection.InterpProofs</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Reflection/InterpProofs.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="17"/><feedback_content val="filedependency"><option val="some"><string>/home/jgross/Documents/repos/fiat-crypto/src/Reflection/Reify.vo</string></option><string>Crypto.Reflection.InputSyntax</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="17"/><feedback_content val="fileloaded"><string>Crypto.Reflection.InputSyntax</string><string>/home/jgross/Documents/repos/fiat-crypto/src/Reflection/InputSyntax.vo</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="17"/><feedback_content val="processed"/></feedback><value val="good"><pair><state_id val="17"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Require&nbsp;Export&nbsp;Crypto.Util.ZUtil.</string>
<int>-15</int>
</pair>
<pair><state_id val="17"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="17"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="18"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="17"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="18"/><feedback_content val="processed"/></feedback>
*coqtop:
<value val="good"><pair><state_id val="18"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Require&nbsp;Export&nbsp;Crypto.Util.Notations.</string>
<int>-16</int>
</pair>
<pair><state_id val="18"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="18"/><feedback_content val="processed"/></feedback><feedback object="state" route="0"><state_id val="19"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback><feedback object="state" route="0"><state_id val="18"/><feedback_content val="processed"/></feedback><feedback object="state" route="0"><state_id val="19"/><feedback_content val="processed"/></feedback><value val="good"><pair><state_id val="19"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Open&nbsp;Scope&nbsp;Z_scope.</string>
<int>-17</int>
</pair>
<pair><state_id val="19"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="19"/><feedback_content val="processed"/></feedback><feedback object="state" route="0"><state_id val="20"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback><feedback object="state" route="0"><state_id val="19"/><feedback_content val="processed"/></feedback><feedback object="state" route="0"><state_id val="20"/><feedback_content val="processed"/></feedback><value val="good"><pair><state_id val="20"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Local&nbsp;Notation&nbsp;eta&nbsp;x&nbsp;:=&nbsp;(fst&nbsp;x,&nbsp;snd&nbsp;x).</string>
<int>-18</int>
</pair>
<pair><state_id val="20"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="20"/><feedback_content val="processed"/></feedback><feedback object="state" route="0"><state_id val="21"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback><feedback object="state" route="0"><state_id val="20"/><feedback_content val="processed"/></feedback><feedback object="state" route="0"><state_id val="21"/><feedback_content val="processed"/></feedback><value val="good"><pair><state_id val="21"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Local&nbsp;Notation&nbsp;eta3&nbsp;x&nbsp;:=&nbsp;(eta&nbsp;(fst&nbsp;x),&nbsp;snd&nbsp;x).</string>
<int>-19</int>
</pair>
<pair><state_id val="21"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="21"/><feedback_content val="processed"/></feedback><feedback object="state" route="0"><state_id val="22"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback><feedback object="state" route="0"><state_id val="21"/><feedback_content val="processed"/></feedback><feedback object="state" route="0"><state_id val="22"/><feedback_content val="processed"/></feedback><value val="good"><pair><state_id val="22"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Local&nbsp;Notation&nbsp;eta3&apos;&nbsp;x&nbsp;:=&nbsp;(fst&nbsp;x,&nbsp;eta&nbsp;(snd&nbsp;x)).</string>
<int>-20</int>
</pair>
<pair><state_id val="22"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="22"/><feedback_content val="processed"/></feedback><feedback object="state" route="0"><state_id val="23"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback><feedback object="state" route="0"><state_id val="22"/><feedback_content val="processed"/></feedback><feedback object="state" route="0"><state_id val="23"/><feedback_content val="processed"/></feedback><value val="good"><pair><state_id val="23"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Section&nbsp;reflection.</string>
<int>-21</int>
</pair>
<pair><state_id val="23"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="good"><pair><state_id val="24"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Context&nbsp;(ops&nbsp;:&nbsp;fancy_machine.instructions&nbsp;(2&nbsp;*&nbsp;128)).</string>
<int>-22</int>
</pair>
<pair><state_id val="24"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="24"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback><feedback object="state" route="0"><state_id val="23"/><feedback_content val="processed"/></feedback><feedback object="state" route="0"><state_id val="24"/><feedback_content val="processed"/></feedback><feedback object="state" route="0"><state_id val="25"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback><feedback object="state" route="0"><state_id val="24"/><feedback_content val="processed"/></feedback><message><message_level val="info"/><option val="none"/><richpp><_>ops&nbsp;is&nbsp;declared</_></richpp></message><feedback object="state" route="0"><state_id val="25"/><feedback_content val="processed"/></feedback><value val="good"><pair><state_id val="25"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Local&nbsp;Set&nbsp;Boolean&nbsp;Equality&nbsp;Schemes.</string>
<int>-23</int>
</pair>
<pair><state_id val="25"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="good"><pair><state_id val="26"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Local&nbsp;Set&nbsp;Decidable&nbsp;Equality&nbsp;Schemes.</string>
<int>-24</int>
</pair>
<pair><state_id val="26"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="good"><pair><state_id val="27"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Inductive&nbsp;base_type&nbsp;:=&nbsp;TZ&nbsp;|&nbsp;Tbool&nbsp;|&nbsp;TW.</string>
<int>-25</int>
</pair>
<pair><state_id val="27"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="good"><pair><state_id val="28"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Definition&nbsp;interp_base_type&nbsp;(v&nbsp;:&nbsp;base_type)&nbsp;:&nbsp;Type&nbsp;:=
&nbsp;&nbsp;&nbsp;&nbsp;match&nbsp;v&nbsp;with
&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;TZ&nbsp;=&gt;&nbsp;Z
&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;Tbool&nbsp;=&gt;&nbsp;bool
&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;TW&nbsp;=&gt;&nbsp;fancy_machine.W
&nbsp;&nbsp;&nbsp;&nbsp;end.</string>
<int>-26</int>
</pair>
<pair><state_id val="28"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="good"><pair><state_id val="29"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Local&nbsp;Notation&nbsp;tZ&nbsp;:=&nbsp;(Tbase&nbsp;TZ).</string>
<int>-27</int>
</pair>
<pair><state_id val="29"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="29"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="28"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="27"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="26"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="25"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="26"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="27"/><feedback_content val="processed"/></feedback>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>base_type&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>base_type_rect&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>base_type_ind&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>base_type_rec&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>base_type_beq&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>base_type_eq_dec&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<feedback object="state" route="0"><state_id val="28"/><feedback_content val="processed"/></feedback><message><message_level val="info"/><option val="none"/><richpp><_>interp_base_type&nbsp;is&nbsp;defined</_></richpp></message><feedback object="state" route="0"><state_id val="29"/><feedback_content val="processed"/></feedback><feedback object="state" route="0"><state_id val="30"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback><feedback object="state" route="0"><state_id val="29"/><feedback_content val="processed"/></feedback><feedback object="state" route="0"><state_id val="30"/><feedback_content val="processed"/></feedback><value val="good"><pair><state_id val="30"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Local&nbsp;Notation&nbsp;tbool&nbsp;:=&nbsp;(Tbase&nbsp;Tbool).</string>
<int>-28</int>
</pair>
<pair><state_id val="30"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="30"/><feedback_content val="processed"/></feedback><feedback object="state" route="0"><state_id val="31"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback><feedback object="state" route="0"><state_id val="30"/><feedback_content val="processed"/></feedback><feedback object="state" route="0"><state_id val="31"/><feedback_content val="processed"/></feedback><value val="good"><pair><state_id val="31"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Local&nbsp;Notation&nbsp;tW&nbsp;:=&nbsp;(Tbase&nbsp;TW).</string>
<int>-29</int>
</pair>
<pair><state_id val="31"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="31"/><feedback_content val="processed"/></feedback><feedback object="state" route="0"><state_id val="32"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback><feedback object="state" route="0"><state_id val="31"/><feedback_content val="processed"/></feedback><feedback object="state" route="0"><state_id val="32"/><feedback_content val="processed"/></feedback><value val="good"><pair><state_id val="32"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Local&nbsp;Open&nbsp;Scope&nbsp;ctype_scope.</string>
<int>-30</int>
</pair>
<pair><state_id val="32"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="32"/><feedback_content val="processed"/></feedback><feedback object="state" route="0"><state_id val="33"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback><feedback object="state" route="0"><state_id val="32"/><feedback_content val="processed"/></feedback><feedback object="state" route="0"><state_id val="33"/><feedback_content val="processed"/></feedback><value val="good"><pair><state_id val="33"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Inductive&nbsp;op&nbsp;:&nbsp;flat_type&nbsp;base_type&nbsp;-&gt;&nbsp;flat_type&nbsp;base_type&nbsp;-&gt;&nbsp;Type&nbsp;:=
&nbsp;&nbsp;|&nbsp;OPldi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;op&nbsp;tZ&nbsp;tW
&nbsp;&nbsp;|&nbsp;OPshrd&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;op&nbsp;(tW&nbsp;*&nbsp;tW&nbsp;*&nbsp;tZ)&nbsp;tW
&nbsp;&nbsp;|&nbsp;OPshl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;op&nbsp;(tW&nbsp;*&nbsp;tZ)&nbsp;tW
&nbsp;&nbsp;|&nbsp;OPshr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;op&nbsp;(tW&nbsp;*&nbsp;tZ)&nbsp;tW
&nbsp;&nbsp;|&nbsp;OPmkl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;op&nbsp;(tW&nbsp;*&nbsp;tZ)&nbsp;tW
&nbsp;&nbsp;|&nbsp;OPadc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;op&nbsp;(tW&nbsp;*&nbsp;tW&nbsp;*&nbsp;tbool)&nbsp;(tbool&nbsp;*&nbsp;tW)
&nbsp;&nbsp;|&nbsp;OPsubc&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;op&nbsp;(tW&nbsp;*&nbsp;tW&nbsp;*&nbsp;tbool)&nbsp;(tbool&nbsp;*&nbsp;tW)
&nbsp;&nbsp;|&nbsp;OPmulhwll&nbsp;:&nbsp;op&nbsp;(tW&nbsp;*&nbsp;tW)&nbsp;tW
&nbsp;&nbsp;|&nbsp;OPmulhwhl&nbsp;:&nbsp;op&nbsp;(tW&nbsp;*&nbsp;tW)&nbsp;tW
&nbsp;&nbsp;|&nbsp;OPmulhwhh&nbsp;:&nbsp;op&nbsp;(tW&nbsp;*&nbsp;tW)&nbsp;tW
&nbsp;&nbsp;|&nbsp;OPselc&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;op&nbsp;(tbool&nbsp;*&nbsp;tW&nbsp;*&nbsp;tW)&nbsp;tW
&nbsp;&nbsp;|&nbsp;OPaddm&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;op&nbsp;(tW&nbsp;*&nbsp;tW&nbsp;*&nbsp;tW)&nbsp;tW.</string>
<int>-31</int>
</pair>
<pair><state_id val="33"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="good"><pair><state_id val="34"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Definition&nbsp;interp_op&nbsp;src&nbsp;dst&nbsp;(f&nbsp;:&nbsp;op&nbsp;src&nbsp;dst)
&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;interp_flat_type_gen&nbsp;interp_base_type&nbsp;src&nbsp;-&gt;&nbsp;interp_flat_type_gen&nbsp;interp_base_type&nbsp;dst
&nbsp;&nbsp;&nbsp;&nbsp;:=&nbsp;match&nbsp;f&nbsp;in&nbsp;op&nbsp;s&nbsp;d&nbsp;return&nbsp;interp_flat_type_gen&nbsp;_&nbsp;s&nbsp;-&gt;&nbsp;interp_flat_type_gen&nbsp;_&nbsp;d&nbsp;with
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;OPldi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;ldi
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;OPshrd&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;fun&nbsp;xyz&nbsp;=&gt;&nbsp;let&nbsp;&apos;(x,&nbsp;y,&nbsp;z)&nbsp;:=&nbsp;eta3&nbsp;xyz&nbsp;in&nbsp;shrd&nbsp;x&nbsp;y&nbsp;z
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;OPshl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;fun&nbsp;xy&nbsp;=&gt;&nbsp;let&nbsp;&apos;(x,&nbsp;y)&nbsp;:=&nbsp;eta&nbsp;xy&nbsp;in&nbsp;shl&nbsp;x&nbsp;y
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;OPshr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;fun&nbsp;xy&nbsp;=&gt;&nbsp;let&nbsp;&apos;(x,&nbsp;y)&nbsp;:=&nbsp;eta&nbsp;xy&nbsp;in&nbsp;shr&nbsp;x&nbsp;y
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;OPmkl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;fun&nbsp;xy&nbsp;=&gt;&nbsp;let&nbsp;&apos;(x,&nbsp;y)&nbsp;:=&nbsp;eta&nbsp;xy&nbsp;in&nbsp;mkl&nbsp;x&nbsp;y
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;OPadc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;fun&nbsp;xyz&nbsp;=&gt;&nbsp;let&nbsp;&apos;(x,&nbsp;y,&nbsp;z)&nbsp;:=&nbsp;eta3&nbsp;xyz&nbsp;in&nbsp;adc&nbsp;x&nbsp;y&nbsp;z
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;OPsubc&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;fun&nbsp;xyz&nbsp;=&gt;&nbsp;let&nbsp;&apos;(x,&nbsp;y,&nbsp;z)&nbsp;:=&nbsp;eta3&nbsp;xyz&nbsp;in&nbsp;subc&nbsp;x&nbsp;y&nbsp;z
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;OPmulhwll&nbsp;=&gt;&nbsp;fun&nbsp;xy&nbsp;=&gt;&nbsp;let&nbsp;&apos;(x,&nbsp;y)&nbsp;:=&nbsp;eta&nbsp;xy&nbsp;in&nbsp;mulhwll&nbsp;x&nbsp;y
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;OPmulhwhl&nbsp;=&gt;&nbsp;fun&nbsp;xy&nbsp;=&gt;&nbsp;let&nbsp;&apos;(x,&nbsp;y)&nbsp;:=&nbsp;eta&nbsp;xy&nbsp;in&nbsp;mulhwhl&nbsp;x&nbsp;y
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;OPmulhwhh&nbsp;=&gt;&nbsp;fun&nbsp;xy&nbsp;=&gt;&nbsp;let&nbsp;&apos;(x,&nbsp;y)&nbsp;:=&nbsp;eta&nbsp;xy&nbsp;in&nbsp;mulhwhh&nbsp;x&nbsp;y
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;OPselc&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;fun&nbsp;xyz&nbsp;=&gt;&nbsp;let&nbsp;&apos;(x,&nbsp;y,&nbsp;z)&nbsp;:=&nbsp;eta3&nbsp;xyz&nbsp;in&nbsp;selc&nbsp;x&nbsp;y&nbsp;z
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;OPaddm&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;fun&nbsp;xyz&nbsp;=&gt;&nbsp;let&nbsp;&apos;(x,&nbsp;y,&nbsp;z)&nbsp;:=&nbsp;eta3&nbsp;xyz&nbsp;in&nbsp;addm&nbsp;x&nbsp;y&nbsp;z
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end.</string>
<int>-32</int>
</pair>
<pair><state_id val="34"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="good"><pair><state_id val="35"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Inductive&nbsp;SConstT&nbsp;:=&nbsp;ZConst&nbsp;(_&nbsp;:&nbsp;Z)&nbsp;|&nbsp;BoolConst&nbsp;(_&nbsp;:&nbsp;bool)&nbsp;|&nbsp;INVALID_CONST.</string>
<int>-33</int>
</pair>
<pair><state_id val="35"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="good"><pair><state_id val="36"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Inductive&nbsp;op_code&nbsp;:&nbsp;Set&nbsp;:=
&nbsp;&nbsp;|&nbsp;SOPldi&nbsp;|&nbsp;SOPshrd&nbsp;|&nbsp;SOPshl&nbsp;|&nbsp;SOPshr&nbsp;|&nbsp;SOPmkl&nbsp;|&nbsp;SOPadc&nbsp;|&nbsp;SOPsubc
&nbsp;&nbsp;|&nbsp;SOPmulhwll&nbsp;|&nbsp;SOPmulhwhl&nbsp;|&nbsp;SOPmulhwhh&nbsp;|&nbsp;SOPselc&nbsp;|&nbsp;SOPaddm.</string>
<int>-34</int>
</pair>
<pair><state_id val="36"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="good"><pair><state_id val="37"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Definition&nbsp;symbolicify_const&nbsp;(t&nbsp;:&nbsp;base_type)&nbsp;:&nbsp;interp_base_type&nbsp;t&nbsp;-&gt;&nbsp;SConstT
&nbsp;&nbsp;&nbsp;&nbsp;:=&nbsp;match&nbsp;t&nbsp;with
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;TZ&nbsp;=&gt;&nbsp;fun&nbsp;x&nbsp;=&gt;&nbsp;ZConst&nbsp;x
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;Tbool&nbsp;=&gt;&nbsp;fun&nbsp;x&nbsp;=&gt;&nbsp;BoolConst&nbsp;x
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;TW&nbsp;=&gt;&nbsp;fun&nbsp;x&nbsp;=&gt;&nbsp;INVALID_CONST
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end.</string>
<int>-35</int>
</pair>
<pair><state_id val="37"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="good"><pair><state_id val="38"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Definition&nbsp;symbolicify_op&nbsp;s&nbsp;d&nbsp;(v&nbsp;:&nbsp;op&nbsp;s&nbsp;d)&nbsp;:&nbsp;op_code
&nbsp;&nbsp;&nbsp;&nbsp;:=&nbsp;match&nbsp;v&nbsp;with
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;OPldi&nbsp;=&gt;&nbsp;SOPldi
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;OPshrd&nbsp;=&gt;&nbsp;SOPshrd
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;OPshl&nbsp;=&gt;&nbsp;SOPshl
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;OPshr&nbsp;=&gt;&nbsp;SOPshr
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;OPmkl&nbsp;=&gt;&nbsp;SOPmkl
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;OPadc&nbsp;=&gt;&nbsp;SOPadc
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;OPsubc&nbsp;=&gt;&nbsp;SOPsubc
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;OPmulhwll&nbsp;=&gt;&nbsp;SOPmulhwll
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;OPmulhwhl&nbsp;=&gt;&nbsp;SOPmulhwhl
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;OPmulhwhh&nbsp;=&gt;&nbsp;SOPmulhwhh
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;OPselc&nbsp;=&gt;&nbsp;SOPselc
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;OPaddm&nbsp;=&gt;&nbsp;SOPaddm
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end.</string>
<int>-36</int>
</pair>
<pair><state_id val="38"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="good"><pair><state_id val="39"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Definition&nbsp;CSE&nbsp;{t}&nbsp;e&nbsp;:=&nbsp;@CSE&nbsp;base_type&nbsp;SConstT&nbsp;op_code&nbsp;base_type_beq&nbsp;SConstT_beq&nbsp;op_code_beq&nbsp;internal_base_type_dec_bl&nbsp;interp_base_type&nbsp;op&nbsp;symbolicify_const&nbsp;symbolicify_op&nbsp;t&nbsp;e&nbsp;(fun&nbsp;_&nbsp;=&gt;&nbsp;nil).</string>
<int>-37</int>
</pair>
<pair><state_id val="39"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="good"><pair><state_id val="40"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>End&nbsp;reflection.</string>
<int>-38</int>
</pair>
<pair><state_id val="40"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="41"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="40"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="39"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="38"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="37"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="36"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="35"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="34"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="33"/><feedback_content val="processed"/></feedback>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>op&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>op_rect&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>op_ind&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>op_rec&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<feedback object="state" route="0"><state_id val="34"/><feedback_content val="processed"/></feedback>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>interp_op&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<feedback object="state" route="0"><state_id val="35"/><feedback_content val="processed"/></feedback>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>SConstT&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>SConstT_rect&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>SConstT_ind&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>SConstT_rec&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>positive_beq&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>Z_beq&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>bool_beq&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>SConstT_beq&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>SConstT_eq_dec&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<feedback object="state" route="0"><state_id val="36"/><feedback_content val="processed"/></feedback>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>op_code&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>op_code_rect&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>op_code_ind&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>op_code_rec&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>op_code_beq&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>op_code_eq_dec&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<feedback object="state" route="0"><state_id val="37"/><feedback_content val="processed"/></feedback>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>symbolicify_const&nbsp;is&nbsp;defined</_></richpp></message><feedback object="state" route="0"><state_id val="38"/><feedback_content val="processed"/></feedback><message><message_level val="info"/><option val="none"/><richpp><_>symbolicify_op&nbsp;is&nbsp;defined</_></richpp></message><feedback object="state" route="0"><state_id val="39"/><feedback_content val="processed"/></feedback><message><message_level val="info"/><option val="none"/><richpp><_>CSE&nbsp;is&nbsp;defined</_></richpp></message><feedback object="state" route="0"><state_id val="40"/><feedback_content val="processed"/></feedback><feedback object="state" route="0"><state_id val="41"/><feedback_content val="processed"/></feedback><value val="good"><pair><state_id val="41"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Ltac&nbsp;base_reify_op&nbsp;op&nbsp;op_head&nbsp;::=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lazymatch&nbsp;op_head&nbsp;with
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;@Interface.ldi&nbsp;=&gt;&nbsp;constr:(reify_op&nbsp;op&nbsp;op_head&nbsp;1&nbsp;OPldi)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;@Interface.shrd&nbsp;=&gt;&nbsp;constr:(reify_op&nbsp;op&nbsp;op_head&nbsp;3&nbsp;OPshrd)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;@Interface.shl&nbsp;=&gt;&nbsp;constr:(reify_op&nbsp;op&nbsp;op_head&nbsp;2&nbsp;OPshl)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;@Interface.shr&nbsp;=&gt;&nbsp;constr:(reify_op&nbsp;op&nbsp;op_head&nbsp;2&nbsp;OPshr)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;@Interface.mkl&nbsp;=&gt;&nbsp;constr:(reify_op&nbsp;op&nbsp;op_head&nbsp;2&nbsp;OPmkl)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;@Interface.adc&nbsp;=&gt;&nbsp;constr:(reify_op&nbsp;op&nbsp;op_head&nbsp;3&nbsp;OPadc)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;@Interface.subc&nbsp;=&gt;&nbsp;constr:(reify_op&nbsp;op&nbsp;op_head&nbsp;3&nbsp;OPsubc)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;@Interface.mulhwll&nbsp;=&gt;&nbsp;constr:(reify_op&nbsp;op&nbsp;op_head&nbsp;2&nbsp;OPmulhwll)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;@Interface.mulhwhl&nbsp;=&gt;&nbsp;constr:(reify_op&nbsp;op&nbsp;op_head&nbsp;2&nbsp;OPmulhwhl)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;@Interface.mulhwhh&nbsp;=&gt;&nbsp;constr:(reify_op&nbsp;op&nbsp;op_head&nbsp;2&nbsp;OPmulhwhh)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;@Interface.selc&nbsp;=&gt;&nbsp;constr:(reify_op&nbsp;op&nbsp;op_head&nbsp;3&nbsp;OPselc)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;@Interface.addm&nbsp;=&gt;&nbsp;constr:(reify_op&nbsp;op&nbsp;op_head&nbsp;3&nbsp;OPaddm)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end.</string>
<int>-39</int>
</pair>
<pair><state_id val="41"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="good"><pair><state_id val="42"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Ltac&nbsp;base_reify_type&nbsp;T&nbsp;::=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;match&nbsp;T&nbsp;with
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;Z&nbsp;=&gt;&nbsp;TZ
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;bool&nbsp;=&gt;&nbsp;Tbool
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;fancy_machine.W&nbsp;=&gt;&nbsp;TW
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end.</string>
<int>-40</int>
</pair>
<pair><state_id val="42"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="good"><pair><state_id val="43"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Ltac&nbsp;Reify&apos;&nbsp;e&nbsp;:=&nbsp;Reify.Reify&apos;&nbsp;base_type&nbsp;(interp_base_type&nbsp;_)&nbsp;op&nbsp;e.</string>
<int>-41</int>
</pair>
<pair><state_id val="43"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="good"><pair><state_id val="44"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Ltac&nbsp;Reify&nbsp;e&nbsp;:=
&nbsp;&nbsp;let&nbsp;v&nbsp;:=&nbsp;Reify.Reify&nbsp;base_type&nbsp;(interp_base_type&nbsp;_)&nbsp;op&nbsp;e&nbsp;in
&nbsp;&nbsp;constr:(CSE&nbsp;_&nbsp;(InlineConst&nbsp;(Linearize&nbsp;v))).</string>
<int>-42</int>
</pair>
<pair><state_id val="44"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="good"><pair><state_id val="45"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Local&nbsp;Set&nbsp;Decidable&nbsp;Equality&nbsp;Schemes.</string>
<int>-43</int>
</pair>
<pair><state_id val="45"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="good"><pair><state_id val="46"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Local&nbsp;Set&nbsp;Boolean&nbsp;Equality&nbsp;Schemes.</string>
<int>-44</int>
</pair>
<pair><state_id val="46"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="good"><pair><state_id val="47"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Inductive&nbsp;Register&nbsp;:=
|&nbsp;RegPInv&nbsp;|&nbsp;RegMod&nbsp;|&nbsp;RegMuLow&nbsp;|&nbsp;RegZero
|&nbsp;y&nbsp;|&nbsp;t1&nbsp;|&nbsp;t2&nbsp;|&nbsp;lo&nbsp;|&nbsp;hi&nbsp;|&nbsp;out&nbsp;|&nbsp;src1&nbsp;|&nbsp;src2&nbsp;|&nbsp;tmp&nbsp;|&nbsp;q&nbsp;|&nbsp;qHigh&nbsp;|&nbsp;x&nbsp;|&nbsp;xHigh
|&nbsp;scratch&nbsp;|&nbsp;scratchplus&nbsp;(n&nbsp;:&nbsp;nat).</string>
<int>-45</int>
</pair>
<pair><state_id val="47"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="good"><pair><state_id val="48"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Notation&nbsp;&quot;&apos;scratch+&apos;&nbsp;n&quot;&nbsp;:=&nbsp;(scratchplus&nbsp;n)&nbsp;(format&nbsp;&quot;&apos;scratch+&apos;&nbsp;n&quot;,&nbsp;at&nbsp;level&nbsp;10).</string>
<int>-46</int>
</pair>
<pair><state_id val="48"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="48"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="47"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="46"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="45"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="44"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="43"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="42"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="41"/><feedback_content val="processed"/></feedback>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>base_reify_op&nbsp;is&nbsp;redefined</_></richpp></message>
*coqtop:
<feedback object="state" route="0"><state_id val="42"/><feedback_content val="processed"/></feedback>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>base_reify_type&nbsp;is&nbsp;redefined</_></richpp></message>
*coqtop:
<feedback object="state" route="0"><state_id val="43"/><feedback_content val="processed"/></feedback>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>Reify&apos;&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<feedback object="state" route="0"><state_id val="44"/><feedback_content val="processed"/></feedback>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>Reify&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<feedback object="state" route="0"><state_id val="45"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="46"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="47"/><feedback_content val="processed"/></feedback>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>Register&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>Register_rect&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>Register_ind&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>Register_rec&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>Register_beq&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>Register_eq_dec&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<feedback object="state" route="0"><state_id val="48"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="49"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback><feedback object="state" route="0"><state_id val="48"/><feedback_content val="processed"/></feedback><feedback object="state" route="0"><state_id val="49"/><feedback_content val="processed"/></feedback><value val="good"><pair><state_id val="49"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Definition&nbsp;syntax&nbsp;{ops&nbsp;:&nbsp;fancy_machine.instructions&nbsp;(2&nbsp;*&nbsp;128)}
&nbsp;&nbsp;:=&nbsp;Named.expr&nbsp;base_type&nbsp;(interp_base_type&nbsp;ops)&nbsp;op&nbsp;Register.</string>
<int>-47</int>
</pair>
<pair><state_id val="49"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="good"><pair><state_id val="50"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Section&nbsp;assemble.</string>
<int>-48</int>
</pair>
<pair><state_id val="50"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="good"><pair><state_id val="51"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Context&nbsp;(ops&nbsp;:&nbsp;fancy_machine.instructions&nbsp;(2&nbsp;*&nbsp;128)).</string>
<int>-49</int>
</pair>
<pair><state_id val="51"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="state" route="0"><state_id val="51"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="50"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="49"/><feedback_content val="processed"/></feedback>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>syntax&nbsp;is&nbsp;defined</_></richpp></message>
*coqtop:
<feedback object="state" route="0"><state_id val="50"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="51"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="52"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="51"/><feedback_content val="processed"/></feedback>
*coqtop:
<message><message_level val="info"/><option val="none"/><richpp><_>ops&nbsp;is&nbsp;declared</_></richpp></message><feedback object="state" route="0"><state_id val="52"/><feedback_content val="processed"/></feedback><value val="good"><pair><state_id val="52"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>Definition&nbsp;postprocess&nbsp;var&nbsp;t&nbsp;(e&nbsp;:&nbsp;exprf&nbsp;(var:=var)&nbsp;base_type&nbsp;(interp_base_type&nbsp;_)&nbsp;op&nbsp;t)
&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;@inline_directive&nbsp;base_type&nbsp;(interp_base_type&nbsp;_)&nbsp;op&nbsp;var&nbsp;t.</string>
<int>-50</int>
</pair>
<pair><state_id val="52"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="good"><pair><state_id val="53"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>refine&nbsp;match&nbsp;e&nbsp;in&nbsp;exprf&nbsp;_&nbsp;_&nbsp;_&nbsp;t&nbsp;return&nbsp;inline_directive&nbsp;t&nbsp;with
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;Op&nbsp;_&nbsp;t&nbsp;(OPshl&nbsp;as&nbsp;op)&nbsp;_
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;Op&nbsp;_&nbsp;t&nbsp;(OPshr&nbsp;as&nbsp;op)&nbsp;_
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;inline&nbsp;(t:=t)&nbsp;(Op&nbsp;op&nbsp;_)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;_&nbsp;=&gt;&nbsp;_
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end.</string>
<int>-51</int>
</pair>
<pair><state_id val="53"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="good"><pair><state_id val="54"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Add"><pair><pair><string>asdf

&nbsp;&nbsp;Definition&nbsp;AssembleSyntax&nbsp;:&nbsp;True.</string>
<int>-52</int>
</pair>
<pair><state_id val="54"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<feedback object="edit" route="0"><edit_id val="-52"/><feedback_content val="message"><message><message_level val="error"/><option val="some"><loc start="8" stop="18"/></option><richpp><_>Syntax&nbsp;error:&nbsp;[tactic:ltac_use_default]&nbsp;expected&nbsp;after&nbsp;[tactic:tactic]&nbsp;(in&nbsp;[vernac:tactic_command]).</_></richpp></message></feedback_content></feedback><value val="fail" loc_s="8" loc_e="18"><state_id val="0"/><richpp><_>
Syntax&nbsp;error:&nbsp;[tactic:ltac_use_default]&nbsp;expected&nbsp;after&nbsp;[tactic:tactic]&nbsp;(in&nbsp;[vernac:tactic_command]).</_></richpp></value>
*emacs:
<call val="Add"><pair><pair><string>simple&nbsp;refine&nbsp;_.</string>
<int>-53</int>
</pair>
<pair><state_id val="54"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="good"><pair><state_id val="55"/><pair><union val="in_l"><unit/></union><string></string></pair></pair></value>
*emacs:
<call val="Edit_at"><state_id val="54"/></call>

*emacs:
<call val="Goal"><unit/></call>

*coqtop:
<feedback object="state" route="0"><state_id val="54"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="53"/><feedback_content val="processingin"><string>master</string></feedback_content></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="52"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="53"/><feedback_content val="processed"/></feedback>
*coqtop:
<feedback object="state" route="0"><state_id val="54"/><feedback_content val="message"><message><message_level val="error"/><option val="some"><loc start="0" stop="209"/></option><richpp><_>Ltac&nbsp;call&nbsp;to&nbsp;&quot;<tactic.primitive>refine</tactic.primitive>&nbsp;(uconstr)&quot;&nbsp;failed.
<message.error>Error:</message.error>
In&nbsp;environment
ops&nbsp;:&nbsp;<constr.path>fancy_machine</constr.path>.<constr.reference>instructions</constr.reference>&nbsp;(2&nbsp;<constr.notation>*</constr.notation>&nbsp;128)
var&nbsp;:&nbsp;<constr.reference>base_type</constr.reference>&nbsp;<constr.notation>-&gt;</constr.notation>&nbsp;<constr.type>Type</constr.type>
t&nbsp;:&nbsp;<constr.reference>flat_type</constr.reference>&nbsp;<constr.reference>base_type</constr.reference>
e&nbsp;:&nbsp;<constr.reference>exprf</constr.reference>&nbsp;<constr.reference>base_type</constr.reference>&nbsp;(<constr.reference>interp_base_type</constr.reference>&nbsp;<constr.reference>ops</constr.reference>)&nbsp;<constr.path>Top</constr.path>.<constr.reference>op</constr.reference>&nbsp;<constr.variable>t</constr.variable>
f&nbsp;:&nbsp;<constr.reference>flat_type</constr.reference>&nbsp;<constr.reference>base_type</constr.reference>
t0&nbsp;:&nbsp;<constr.reference>flat_type</constr.reference>&nbsp;<constr.reference>base_type</constr.reference>
op&nbsp;:&nbsp;<constr.reference>op</constr.reference>&nbsp;<constr.variable>f</constr.variable>&nbsp;<constr.variable>t0</constr.variable>
e0&nbsp;:&nbsp;<constr.reference>exprf</constr.reference>&nbsp;<constr.reference>base_type</constr.reference>&nbsp;(<constr.reference>interp_base_type</constr.reference>&nbsp;<constr.reference>ops</constr.reference>)&nbsp;<constr.path>Top</constr.path>.<constr.reference>op</constr.reference>&nbsp;<constr.variable>f</constr.variable>
op0&nbsp;:=&nbsp;<constr.reference>OPshl</constr.reference>&nbsp;:&nbsp;<constr.path>Top</constr.path>.<constr.reference>op</constr.reference>&nbsp;(<constr.reference>Tbase</constr.reference>&nbsp;<constr.reference>TW</constr.reference>&nbsp;<constr.notation>*</constr.notation>&nbsp;<constr.reference>Tbase</constr.reference>&nbsp;<constr.reference>TZ</constr.reference>)%ctype&nbsp;(<constr.reference>Tbase</constr.reference>&nbsp;<constr.reference>TW</constr.reference>)
The&nbsp;term&nbsp;&quot;<constr.reference>inline</constr.reference>&nbsp;(<constr.reference>Op</constr.reference>&nbsp;<constr.variable>op0</constr.variable>&nbsp;<constr.evar>?e</constr.evar>@{t0:=<constr.variable>t</constr.variable>;&nbsp;t:=<constr.variable>t0</constr.variable>;&nbsp;op0:=<constr.variable>op</constr.variable>})&quot;&nbsp;has&nbsp;type
&nbsp;&quot;<constr.reference>inline_directive</constr.reference>&nbsp;(<constr.reference>Tbase</constr.reference>&nbsp;<constr.variable>t0</constr.variable>)&quot;&nbsp;while&nbsp;it&nbsp;is&nbsp;expected&nbsp;to&nbsp;have&nbsp;type
&nbsp;&quot;<constr.reference>inline_directive</constr.reference>&nbsp;<constr.variable>t0</constr.variable>&quot;&nbsp;(cannot&nbsp;unify&nbsp;&quot;<constr.reference>flat_type</constr.reference>&nbsp;<constr.reference>base_type</constr.reference>&quot;&nbsp;and&nbsp;&quot;<constr.reference>base_type</constr.reference>&quot;).</_></richpp></message>
*coqtop:
</feedback_content></feedback>
*coqtop:
<value val="fail" loc_s="0" loc_e="209"><state_id val="53"/><richpp><_>
Ltac&nbsp;call&nbsp;to&nbsp;&quot;<tactic.primitive>refine</tactic.primitive>&nbsp;(uconstr)&quot;&nbsp;failed.
<message.error>Error:</message.error>
In&nbsp;environment
ops&nbsp;:&nbsp;<constr.path>fancy_machine</constr.path>.<constr.reference>instructions</constr.reference>&nbsp;(2&nbsp;<constr.notation>*</constr.notation>&nbsp;128)
var&nbsp;:&nbsp;<constr.reference>base_type</constr.reference>&nbsp;<constr.notation>-&gt;</constr.notation>&nbsp;<constr.type>Type</constr.type>
t&nbsp;:&nbsp;<constr.reference>flat_type</constr.reference>&nbsp;<constr.reference>base_type</constr.reference>
e&nbsp;:&nbsp;<constr.reference>exprf</constr.reference>&nbsp;<constr.reference>base_type</constr.reference>&nbsp;(<constr.reference>interp_base_type</constr.reference>&nbsp;<constr.reference>ops</constr.reference>)&nbsp;<constr.path>Top</constr.path>.<constr.reference>op</constr.reference>&nbsp;<constr.variable>t</constr.variable>
f&nbsp;:&nbsp;<constr.reference>flat_type</constr.reference>&nbsp;<constr.reference>base_type</constr.reference>
t0&nbsp;:&nbsp;<constr.reference>flat_type</constr.reference>&nbsp;<constr.reference>base_type</constr.reference>
op&nbsp;:&nbsp;<constr.reference>op</constr.reference>&nbsp;<constr.variable>f</constr.variable>&nbsp;<constr.variable>t0</constr.variable>
e0&nbsp;:&nbsp;<constr.reference>exprf</constr.reference>&nbsp;<constr.reference>base_type</constr.reference>&nbsp;(<constr.reference>interp_base_type</constr.reference>&nbsp;<constr.reference>ops</constr.reference>)&nbsp;<constr.path>Top</constr.path>.<constr.reference>op</constr.reference>&nbsp;<constr.variable>f</constr.variable>
op0&nbsp;:=&nbsp;<constr.reference>OPshl</constr.reference>&nbsp;:&nbsp;<constr.path>Top</constr.path>.<constr.reference>op</constr.reference>&nbsp;(<constr.reference>Tbase</constr.reference>&nbsp;<constr.reference>TW</constr.reference>&nbsp;<constr.notation>*</constr.notation>&nbsp;<constr.reference>Tbase</constr.reference>&nbsp;<constr.reference>TZ</constr.reference>)%ctype&nbsp;(<constr.reference>Tbase</constr.reference>&nbsp;<constr.reference>TW</constr.reference>)
The&nbsp;term&nbsp;&quot;<constr.reference>inline</constr.reference>&nbsp;(<constr.reference>Op</constr.reference>&nbsp;<constr.variable>op0</constr.variable>&nbsp;<constr.evar>?e</constr.evar>@{t0:=<constr.variable>t</constr.variable>;&nbsp;t:=<constr.variable>t0</constr.variable>;&nbsp;op0:=<constr.variable>op</constr.variable>})&quot;&nbsp;has&nbsp;type
&nbsp;&quot;<constr.reference>inline_directive</constr.reference>&nbsp;(<constr.reference>Tbase</constr.reference>&nbsp;<constr.variable>t0</constr.variable>)&quot;&nbsp;while&nbsp;it&nbsp;is&nbsp;expected&nbsp;to&nbsp;have&nbsp;type
&nbsp;&quot;<constr.reference>inline_directive</constr.reference>&nbsp;<constr.variable>t0</constr.variable>&quot;&nbsp;(cannot&nbsp;unify&nbsp;&quot;<constr.reference>flat_type</constr.reference>&nbsp;<constr.reference>base_type</constr.reference>&quot;&nbsp;and&nbsp;&quot;<constr.reference>base_type</constr.reference>&quot;).</_></richpp></value>
*emacs:
<call val="Edit_at"><state_id val="53"/></call>

*emacs:
<call val="Goal"><unit/></call>

*coqtop:
reference>ops</constr.reference>)&nbsp;<constr.path>Top</constr.path>.<constr.reference>op</constr.reference>&nbsp;<constr.variable>f</constr.variable>
op0&nbsp;:=&nbsp;<constr.reference>OPshl</constr.reference>&nbsp;:&nbsp;<constr.path>Top</constr.path>.<constr.reference>op</constr.reference>&nbsp;(<constr.reference>Tbase</constr.reference>&nbsp;<constr.reference>TW</constr.reference>&nbsp;<constr.notation>*</constr.notation>&nbsp;<constr.reference>Tbase</constr.reference>&nbsp;<constr.reference>TZ</constr.reference>)%ctype&nbsp;(<constr.reference>Tbase</constr.reference>&nbsp;<constr.reference>TW</constr.reference>)
The&nbsp;term&nbsp;&quot;<constr.reference>inline</constr.reference>&nbsp;(<constr.reference>Op</constr.reference>&nbsp;<constr.variable>op0</constr.variable>&nbsp;<constr.evar>?e</constr.evar>@{t0:=<constr.variable>t</constr.variable>;&nbsp;t:=<constr.variable>t0</constr.variable>;&nbsp;op0:=<constr.variable>op</constr.variable>})&quot;&nbsp;has&nbsp;type
&nbsp;&quot;<constr.reference>inline_directive</constr.reference>&nbsp;(<constr.reference>Tbase</constr.reference>&nbsp;<constr.variable>t0</constr.variable>)&quot;&nbsp;while&nbsp;it&nbsp;is&nbsp;expected&nbsp;to&nbsp;have&nbsp;type
&nbsp;&quot;<constr.reference>inline_directive</constr.reference>&nbsp;<constr.variable>t0</constr.variable>&quot;&nbsp;(cannot&nbsp;unify&nbsp;&quot;<constr.reference>flat_type</constr.reference>&nbsp;<constr.reference>base_type</constr.reference>&quot;&nbsp;and&nbsp;&quot;<constr.reference>base_type</constr.reference>&quot;).</_></richpp></value>
*emacs:
<call val="Status"><bool val="false"/></call>

*coqtop:
<feedback object="state" route="0"><state_id val="53"/><feedback_content val="processed"/></feedback><value val="good"><union val="in_l"><unit/></union></value>
*coqtop-oob:
<feedback object="state" route="0"><state_id val="53"/><feedback_content val="processed"/></feedback><value val="good"><option val="some"><goals><list><goal><string>5216</string><list><richpp><_>ops&nbsp;:&nbsp;<constr.path>fancy_machine</constr.path>.<constr.reference>instructions</constr.reference>&nbsp;(2&nbsp;<constr.notation>*</constr.notation>&nbsp;128)</_></richpp><richpp><_>var&nbsp;:&nbsp;<constr.reference>base_type</constr.reference>&nbsp;<constr.notation>-&gt;</constr.notation>&nbsp;<constr.type>Type</constr.type></_></richpp><richpp><_>t&nbsp;:&nbsp;<constr.reference>flat_type</constr.reference>&nbsp;<constr.reference>base_type</constr.reference></_></richpp><richpp><_>e&nbsp;:&nbsp;<constr.reference>exprf</constr.reference>&nbsp;<constr.reference>base_type</constr.reference>&nbsp;(<constr.reference>interp_base_type</constr.reference>&nbsp;<constr.reference>ops</constr.reference>)&nbsp;<constr.reference>op</constr.reference>&nbsp;<constr.variable>t</constr.variable></_></richpp></list><richpp><_><constr.reference>inline_directive</constr.reference>&nbsp;<constr.variable>t</constr.variable></_></richpp></goal></list><list/><list/><list/></goals></option></value>
*coqtop-oob:
<feedback object="state" route="0"><state_id val="53"/><feedback_content val="processed"/></feedback><value val="good"><status><list><string>Top</string><string>assemble</string></list><option val="some"><string>postprocess</string></option><list><string>postprocess</string></list><int>0</int></status></value>
*emacs:
<call val="SetOptions"><list><pair><list><string>Printing</string>
<string>Width</string>
</list>
<option_value val="intvalue"><option val="some"><int>133</int>
</option>
</option_value>
</pair>
</list>
</call>

*coqtop:
<value val="good"><unit/></value>
*emacs:
<call val="Add"><pair><pair><string>refine&nbsp;match&nbsp;e&nbsp;in&nbsp;exprf&nbsp;_&nbsp;_&nbsp;_&nbsp;t&nbsp;return&nbsp;inline_directive&nbsp;t&nbsp;with
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;Op&nbsp;_&nbsp;t&nbsp;(OPshl&nbsp;as&nbsp;op)&nbsp;_
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;Op&nbsp;_&nbsp;t&nbsp;(OPshr&nbsp;as&nbsp;op)&nbsp;_
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;inline&nbsp;(t:=t)&nbsp;(Op&nbsp;op&nbsp;_)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;_&nbsp;=&gt;&nbsp;_
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end.</string>
<int>-54</int>
</pair>
<pair><state_id val="55"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="fail"><state_id val="0"/><richpp><_>
Anomaly:&nbsp;Not&nbsp;yet&nbsp;implemented,&nbsp;the&nbsp;GUI&nbsp;should&nbsp;not&nbsp;try&nbsp;this.&nbsp;Please&nbsp;report.</_></richpp></value>
*emacs:
<call val="Add"><pair><pair><string>asdf

&nbsp;&nbsp;Definition&nbsp;AssembleSyntax&nbsp;:&nbsp;True.</string>
<int>-55</int>
</pair>
<pair><state_id val="55"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="fail"><state_id val="0"/><richpp><_>
Anomaly:&nbsp;Not&nbsp;yet&nbsp;implemented,&nbsp;the&nbsp;GUI&nbsp;should&nbsp;not&nbsp;try&nbsp;this.&nbsp;Please&nbsp;report.</_></richpp></value>
*emacs:
<call val="Add"><pair><pair><string>simple&nbsp;refine&nbsp;_.</string>
<int>-56</int>
</pair>
<pair><state_id val="55"/><bool val="true"/></pair>
</pair>
</call>

*coqtop:
<value val="fail"><state_id val="0"/><richpp><_>
Anomaly:&nbsp;Not&nbsp;yet&nbsp;implemented,&nbsp;the&nbsp;GUI&nbsp;should&nbsp;not&nbsp;try&nbsp;this.&nbsp;Please&nbsp;report.</_></richpp></value>
