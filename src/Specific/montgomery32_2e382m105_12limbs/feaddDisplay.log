add = λ var : Z.Syntax.base_type → Type,
λ '(x22, x23, x21, x19, x17, x15, x13, x11, x9, x7, x5, x3, (x44, x45, x43, x41, x39, x37, x35, x33, x31, x29, x27, x25))%core,
uint32_t x47, uint8_t x48 = addcarryx_u32(0x0, x3, x25);
uint32_t x50, uint8_t x51 = addcarryx_u32(x48, x5, x27);
uint32_t x53, uint8_t x54 = addcarryx_u32(x51, x7, x29);
uint32_t x56, uint8_t x57 = addcarryx_u32(x54, x9, x31);
uint32_t x59, uint8_t x60 = addcarryx_u32(x57, x11, x33);
uint32_t x62, uint8_t x63 = addcarryx_u32(x60, x13, x35);
uint32_t x65, uint8_t x66 = addcarryx_u32(x63, x15, x37);
uint32_t x68, uint8_t x69 = addcarryx_u32(x66, x17, x39);
uint32_t x71, uint8_t x72 = addcarryx_u32(x69, x19, x41);
uint32_t x74, uint8_t x75 = addcarryx_u32(x72, x21, x43);
uint32_t x77, uint8_t x78 = addcarryx_u32(x75, x23, x45);
uint32_t x80, uint8_t x81 = addcarryx_u32(x78, x22, x44);
uint32_t x83, uint8_t x84 = subborrow_u32(0x0, x47, 0xffffff97);
uint32_t x86, uint8_t x87 = subborrow_u32(x84, x50, 0xffffffff);
uint32_t x89, uint8_t x90 = subborrow_u32(x87, x53, 0xffffffff);
uint32_t x92, uint8_t x93 = subborrow_u32(x90, x56, 0xffffffff);
uint32_t x95, uint8_t x96 = subborrow_u32(x93, x59, 0xffffffff);
uint32_t x98, uint8_t x99 = subborrow_u32(x96, x62, 0xffffffff);
uint32_t x101, uint8_t x102 = subborrow_u32(x99, x65, 0xffffffff);
uint32_t x104, uint8_t x105 = subborrow_u32(x102, x68, 0xffffffff);
uint32_t x107, uint8_t x108 = subborrow_u32(x105, x71, 0xffffffff);
uint32_t x110, uint8_t x111 = subborrow_u32(x108, x74, 0xffffffff);
uint32_t x113, uint8_t x114 = subborrow_u32(x111, x77, 0xffffffff);
uint32_t x116, uint8_t x117 = subborrow_u32(x114, x80, 0x3fffffff);
uint32_t _, uint8_t x120 = subborrow_u32(x117, x81, 0x0);
(cmovznz32(x120, x116, x80), cmovznz32(x120, x113, x77), cmovznz32(x120, x110, x74), cmovznz32(x120, x107, x71), cmovznz32(x120, x104, x68), cmovznz32(x120, x101, x65), cmovznz32(x120, x98, x62), cmovznz32(x120, x95, x59), cmovznz32(x120, x92, x56), cmovznz32(x120, x89, x53), cmovznz32(x120, x86, x50), cmovznz32(x120, x83, x47))
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t) -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
