sub = λ var : Z.Syntax.base_type → Type,
λ '(x30, x31, x29, x27, x25, x23, x21, x19, x17, x15, x13, x11, x9, x7, x5, x3, (x60, x61, x59, x57, x55, x53, x51, x49, x47, x45, x43, x41, x39, x37, x35, x33))%core,
uint32_t x63, uint8_t x64 = subborrow_u32(0x0, x3, x33);
uint32_t x66, uint8_t x67 = subborrow_u32(x64, x5, x35);
uint32_t x69, uint8_t x70 = subborrow_u32(x67, x7, x37);
uint32_t x72, uint8_t x73 = subborrow_u32(x70, x9, x39);
uint32_t x75, uint8_t x76 = subborrow_u32(x73, x11, x41);
uint32_t x78, uint8_t x79 = subborrow_u32(x76, x13, x43);
uint32_t x81, uint8_t x82 = subborrow_u32(x79, x15, x45);
uint32_t x84, uint8_t x85 = subborrow_u32(x82, x17, x47);
uint32_t x87, uint8_t x88 = subborrow_u32(x85, x19, x49);
uint32_t x90, uint8_t x91 = subborrow_u32(x88, x21, x51);
uint32_t x93, uint8_t x94 = subborrow_u32(x91, x23, x53);
uint32_t x96, uint8_t x97 = subborrow_u32(x94, x25, x55);
uint32_t x99, uint8_t x100 = subborrow_u32(x97, x27, x57);
uint32_t x102, uint8_t x103 = subborrow_u32(x100, x29, x59);
uint32_t x105, uint8_t x106 = subborrow_u32(x103, x31, x61);
uint32_t x108, uint8_t x109 = subborrow_u32(x106, x30, x60);
uint32_t x110 = cmovznz32(x109, 0x0, 0xffffffff);
uint32_t x112, uint8_t x113 = addcarryx_u32(0x0, x63, (x110 & 0xffffffff));
uint32_t x115, uint8_t x116 = addcarryx_u32(x113, x66, (x110 & 0xffffffff));
uint32_t x118, uint8_t x119 = addcarryx_u32(x116, x69, (x110 & 0xffffffff));
uint32_t x121, uint8_t x122 = addcarryx_u32(x119, x72, (x110 & 0xffffffff));
uint32_t x124, uint8_t x125 = addcarryx_u32(x122, x75, (x110 & 0xffffffff));
uint32_t x127, uint8_t x128 = addcarryx_u32(x125, x78, (x110 & 0xffffffff));
uint32_t x130, uint8_t x131 = addcarryx_u32(x128, x81, (x110 & 0xffffffff));
uint32_t x133, uint8_t x134 = addcarryx_u32(x131, x84, (x110 & 0xffffffff));
uint32_t x136, uint8_t x137 = addcarryx_u32(x134, x87, (x110 & 0xffffffff));
uint32_t x139, uint8_t x140 = addcarryx_u32(x137, x90, (x110 & 0xffffffff));
uint32_t x142, uint8_t x143 = addcarryx_u32(x140, x93, (x110 & 0xffffffff));
uint32_t x145, uint8_t x146 = addcarryx_u32(x143, x96, (x110 & 0xffffffff));
uint32_t x148, uint8_t x149 = addcarryx_u32(x146, x99, (x110 & 0xffffffff));
uint32_t x151, uint8_t x152 = addcarryx_u32(x149, x102, (x110 & 0xffffffff));
uint32_t x154, uint8_t x155 = addcarryx_u32(x152, x105, (x110 & 0xffffffff));
uint32_t x157, uint8_t _ = addcarryx_u32(x155, x108, (x110 & 0xfe14ffff));
(Return x157, Return x154, Return x151, Return x148, Return x145, Return x142, Return x139, Return x136, Return x133, Return x130, Return x127, Return x124, Return x121, Return x118, Return x115, Return x112)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t) -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
