add = λ var : Z.Syntax.base_type → Type,
λ '(x30, x31, x29, x27, x25, x23, x21, x19, x17, x15, x13, x11, x9, x7, x5, x3, (x60, x61, x59, x57, x55, x53, x51, x49, x47, x45, x43, x41, x39, x37, x35, x33))%core,
uint32_t x63, uint8_t x64 = addcarryx_u32(0x0, x3, x33);
uint32_t x66, uint8_t x67 = addcarryx_u32(x64, x5, x35);
uint32_t x69, uint8_t x70 = addcarryx_u32(x67, x7, x37);
uint32_t x72, uint8_t x73 = addcarryx_u32(x70, x9, x39);
uint32_t x75, uint8_t x76 = addcarryx_u32(x73, x11, x41);
uint32_t x78, uint8_t x79 = addcarryx_u32(x76, x13, x43);
uint32_t x81, uint8_t x82 = addcarryx_u32(x79, x15, x45);
uint32_t x84, uint8_t x85 = addcarryx_u32(x82, x17, x47);
uint32_t x87, uint8_t x88 = addcarryx_u32(x85, x19, x49);
uint32_t x90, uint8_t x91 = addcarryx_u32(x88, x21, x51);
uint32_t x93, uint8_t x94 = addcarryx_u32(x91, x23, x53);
uint32_t x96, uint8_t x97 = addcarryx_u32(x94, x25, x55);
uint32_t x99, uint8_t x100 = addcarryx_u32(x97, x27, x57);
uint32_t x102, uint8_t x103 = addcarryx_u32(x100, x29, x59);
uint32_t x105, uint8_t x106 = addcarryx_u32(x103, x31, x61);
uint32_t x108, uint8_t x109 = addcarryx_u32(x106, x30, x60);
uint32_t x111, uint8_t x112 = subborrow_u32(0x0, x63, 0xffffffff);
uint32_t x114, uint8_t x115 = subborrow_u32(x112, x66, 0xffffffff);
uint32_t x117, uint8_t x118 = subborrow_u32(x115, x69, 0xffffffff);
uint32_t x120, uint8_t x121 = subborrow_u32(x118, x72, 0xffffffff);
uint32_t x123, uint8_t x124 = subborrow_u32(x121, x75, 0xffffffff);
uint32_t x126, uint8_t x127 = subborrow_u32(x124, x78, 0xffffffff);
uint32_t x129, uint8_t x130 = subborrow_u32(x127, x81, 0xffffffff);
uint32_t x132, uint8_t x133 = subborrow_u32(x130, x84, 0xffffffff);
uint32_t x135, uint8_t x136 = subborrow_u32(x133, x87, 0xffffffff);
uint32_t x138, uint8_t x139 = subborrow_u32(x136, x90, 0xffffffff);
uint32_t x141, uint8_t x142 = subborrow_u32(x139, x93, 0xffffffff);
uint32_t x144, uint8_t x145 = subborrow_u32(x142, x96, 0xffffffff);
uint32_t x147, uint8_t x148 = subborrow_u32(x145, x99, 0xffffffff);
uint32_t x150, uint8_t x151 = subborrow_u32(x148, x102, 0xffffffff);
uint32_t x153, uint8_t x154 = subborrow_u32(x151, x105, 0xffffffff);
uint32_t x156, uint8_t x157 = subborrow_u32(x154, x108, 0xfe14ffff);
uint32_t _, uint8_t x160 = subborrow_u32(x157, x109, 0x0);
(cmovznz32(x160, x156, x108), cmovznz32(x160, x153, x105), cmovznz32(x160, x150, x102), cmovznz32(x160, x147, x99), cmovznz32(x160, x144, x96), cmovznz32(x160, x141, x93), cmovznz32(x160, x138, x90), cmovznz32(x160, x135, x87), cmovznz32(x160, x132, x84), cmovznz32(x160, x129, x81), cmovznz32(x160, x126, x78), cmovznz32(x160, x123, x75), cmovznz32(x160, x120, x72), cmovznz32(x160, x117, x69), cmovznz32(x160, x114, x66), cmovznz32(x160, x111, x63))
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t) -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
