square = λ var : Z.Syntax.base_type → Type,
λ '(x8, x9, x7, x5, x3, x1)%core,
uint64_t x10 = (0x2 * ((uint64_t)x8 * x8));
uint64_t x11 = ((0x2 * ((uint64_t)x9 * x8)) + (0x2 * ((uint64_t)x8 * x9)));
uint64_t x12 = (((uint64_t)x7 * x8) + (((uint64_t)x9 * x9) + ((uint64_t)x8 * x7)));
uint64_t x13 = ((0x2 * ((uint64_t)x5 * x8)) + (((uint64_t)x7 * x9) + (((uint64_t)x9 * x7) + (0x2 * ((uint64_t)x8 * x5)))));
uint64_t x14 = ((0x2 * ((uint64_t)x3 * x8)) + ((0x2 * ((uint64_t)x5 * x9)) + (((uint64_t)x7 * x7) + ((0x2 * ((uint64_t)x9 * x5)) + (0x2 * ((uint64_t)x8 * x3))))));
uint64_t x15 = (((uint64_t)x1 * x8) + (((uint64_t)x3 * x9) + (((uint64_t)x5 * x7) + (((uint64_t)x7 * x5) + (((uint64_t)x9 * x3) + ((uint64_t)x8 * x1))))));
uint64_t x16 = (((uint64_t)x1 * x9) + (((uint64_t)x3 * x7) + ((0x2 * ((uint64_t)x5 * x5)) + (((uint64_t)x7 * x3) + ((uint64_t)x9 * x1)))));
uint64_t x17 = (((uint64_t)x1 * x7) + ((0x2 * ((uint64_t)x3 * x5)) + ((0x2 * ((uint64_t)x5 * x3)) + ((uint64_t)x7 * x1))));
uint64_t x18 = (((uint64_t)x1 * x5) + (((uint64_t)x3 * x3) + ((uint64_t)x5 * x1)));
uint64_t x19 = (((uint64_t)x1 * x3) + ((uint64_t)x3 * x1));
uint64_t x20 = ((uint64_t)x1 * x1);
uint64_t x21 = (x16 + (0x5 * x10));
uint64_t x22 = (x17 + (0x5 * x11));
uint64_t x23 = (x18 + (0x5 * x12));
uint64_t x24 = (x19 + (0x5 * x13));
uint64_t x25 = (x20 + (0x5 * x14));
uint32_t x26 = (uint32_t) (x25 >> 0x16);
uint32_t x27 = ((uint32_t)x25 & 0x3fffff);
uint64_t x28 = (x26 + x24);
uint32_t x29 = (uint32_t) (x28 >> 0x16);
uint32_t x30 = ((uint32_t)x28 & 0x3fffff);
uint64_t x31 = (x29 + x23);
uint32_t x32 = (uint32_t) (x31 >> 0x15);
uint32_t x33 = ((uint32_t)x31 & 0x1fffff);
uint64_t x34 = (x32 + x22);
uint32_t x35 = (uint32_t) (x34 >> 0x16);
uint32_t x36 = ((uint32_t)x34 & 0x3fffff);
uint64_t x37 = (x35 + x21);
uint32_t x38 = (uint32_t) (x37 >> 0x16);
uint32_t x39 = ((uint32_t)x37 & 0x3fffff);
uint64_t x40 = (x38 + x15);
uint32_t x41 = (uint32_t) (x40 >> 0x15);
uint32_t x42 = ((uint32_t)x40 & 0x1fffff);
uint32_t x43 = (x27 + (0x5 * x41));
uint32_t x44 = (x43 >> 0x16);
uint32_t x45 = (x43 & 0x3fffff);
uint32_t x46 = (x44 + x30);
uint32_t x47 = (x46 >> 0x16);
uint32_t x48 = (x46 & 0x3fffff);
return (Return x42, Return x39, Return x36, (x47 + x33), Return x48, Return x45)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
