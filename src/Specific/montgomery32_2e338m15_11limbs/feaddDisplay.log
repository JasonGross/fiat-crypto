add = λ var : Z.Syntax.base_type → Type,
λ '(x20, x21, x19, x17, x15, x13, x11, x9, x7, x5, x3, (x40, x41, x39, x37, x35, x33, x31, x29, x27, x25, x23))%core,
uint32_t x43, uint8_t x44 = addcarryx_u32(0x0, x3, x23);
uint32_t x46, uint8_t x47 = addcarryx_u32(x44, x5, x25);
uint32_t x49, uint8_t x50 = addcarryx_u32(x47, x7, x27);
uint32_t x52, uint8_t x53 = addcarryx_u32(x50, x9, x29);
uint32_t x55, uint8_t x56 = addcarryx_u32(x53, x11, x31);
uint32_t x58, uint8_t x59 = addcarryx_u32(x56, x13, x33);
uint32_t x61, uint8_t x62 = addcarryx_u32(x59, x15, x35);
uint32_t x64, uint8_t x65 = addcarryx_u32(x62, x17, x37);
uint32_t x67, uint8_t x68 = addcarryx_u32(x65, x19, x39);
uint32_t x70, uint8_t x71 = addcarryx_u32(x68, x21, x41);
uint32_t x73, uint8_t x74 = addcarryx_u32(x71, x20, x40);
uint32_t x76, uint8_t x77 = subborrow_u32(0x0, x43, 0xfffffff1);
uint32_t x79, uint8_t x80 = subborrow_u32(x77, x46, 0xffffffff);
uint32_t x82, uint8_t x83 = subborrow_u32(x80, x49, 0xffffffff);
uint32_t x85, uint8_t x86 = subborrow_u32(x83, x52, 0xffffffff);
uint32_t x88, uint8_t x89 = subborrow_u32(x86, x55, 0xffffffff);
uint32_t x91, uint8_t x92 = subborrow_u32(x89, x58, 0xffffffff);
uint32_t x94, uint8_t x95 = subborrow_u32(x92, x61, 0xffffffff);
uint32_t x97, uint8_t x98 = subborrow_u32(x95, x64, 0xffffffff);
uint32_t x100, uint8_t x101 = subborrow_u32(x98, x67, 0xffffffff);
uint32_t x103, uint8_t x104 = subborrow_u32(x101, x70, 0xffffffff);
uint32_t x106, uint8_t x107 = subborrow_u32(x104, x73, 0x3ffff);
uint32_t _, uint8_t x110 = subborrow_u32(x107, x74, 0x0);
(cmovznz32(x110, x106, x73), cmovznz32(x110, x103, x70), cmovznz32(x110, x100, x67), cmovznz32(x110, x97, x64), cmovznz32(x110, x94, x61), cmovznz32(x110, x91, x58), cmovznz32(x110, x88, x55), cmovznz32(x110, x85, x52), cmovznz32(x110, x82, x49), cmovznz32(x110, x79, x46), cmovznz32(x110, x76, x43))
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t) -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
