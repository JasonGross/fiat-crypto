mul = λ var : Z.Syntax.base_type → Type,
λ '(x14, x15, x13, x11, x9, x7, x5, x3, (x28, x29, x27, x25, x23, x21, x19, x17))%core,
uint64_t x30 = (0x2 * ((uint64_t)x14 * x28));
uint64_t x31 = (((uint64_t)x15 * x28) + ((uint64_t)x14 * x29));
uint64_t x32 = ((0x2 * ((uint64_t)x13 * x28)) + (((uint64_t)x15 * x29) + (0x2 * ((uint64_t)x14 * x27))));
uint64_t x33 = (((uint64_t)x11 * x28) + (((uint64_t)x13 * x29) + (((uint64_t)x15 * x27) + ((uint64_t)x14 * x25))));
uint64_t x34 = ((0x2 * ((uint64_t)x9 * x28)) + (((uint64_t)x11 * x29) + ((0x2 * ((uint64_t)x13 * x27)) + (((uint64_t)x15 * x25) + (0x2 * ((uint64_t)x14 * x23))))));
uint64_t x35 = (((uint64_t)x7 * x28) + (((uint64_t)x9 * x29) + (((uint64_t)x11 * x27) + (((uint64_t)x13 * x25) + (((uint64_t)x15 * x23) + ((uint64_t)x14 * x21))))));
uint64_t x36 = ((0x2 * ((uint64_t)x5 * x28)) + (((uint64_t)x7 * x29) + ((0x2 * ((uint64_t)x9 * x27)) + (((uint64_t)x11 * x25) + ((0x2 * ((uint64_t)x13 * x23)) + (((uint64_t)x15 * x21) + (0x2 * ((uint64_t)x14 * x19))))))));
uint64_t x37 = (((uint64_t)x3 * x28) + (((uint64_t)x5 * x29) + (((uint64_t)x7 * x27) + (((uint64_t)x9 * x25) + (((uint64_t)x11 * x23) + (((uint64_t)x13 * x21) + (((uint64_t)x15 * x19) + ((uint64_t)x14 * x17))))))));
uint64_t x38 = (((uint64_t)x3 * x29) + ((0x2 * ((uint64_t)x5 * x27)) + (((uint64_t)x7 * x25) + ((0x2 * ((uint64_t)x9 * x23)) + (((uint64_t)x11 * x21) + ((0x2 * ((uint64_t)x13 * x19)) + ((uint64_t)x15 * x17)))))));
uint64_t x39 = (((uint64_t)x3 * x27) + (((uint64_t)x5 * x25) + (((uint64_t)x7 * x23) + (((uint64_t)x9 * x21) + (((uint64_t)x11 * x19) + ((uint64_t)x13 * x17))))));
uint64_t x40 = (((uint64_t)x3 * x25) + ((0x2 * ((uint64_t)x5 * x23)) + (((uint64_t)x7 * x21) + ((0x2 * ((uint64_t)x9 * x19)) + ((uint64_t)x11 * x17)))));
uint64_t x41 = (((uint64_t)x3 * x23) + (((uint64_t)x5 * x21) + (((uint64_t)x7 * x19) + ((uint64_t)x9 * x17))));
uint64_t x42 = (((uint64_t)x3 * x21) + ((0x2 * ((uint64_t)x5 * x19)) + ((uint64_t)x7 * x17)));
uint64_t x43 = (((uint64_t)x3 * x19) + ((uint64_t)x5 * x17));
uint64_t x44 = ((uint64_t)x3 * x17);
uint64_t x45 = (x38 + (0xf * x30));
uint64_t x46 = (x39 + (0xf * x31));
uint64_t x47 = (x40 + (0xf * x32));
uint64_t x48 = (x41 + (0xf * x33));
uint64_t x49 = (x42 + (0xf * x34));
uint64_t x50 = (x43 + (0xf * x35));
uint64_t x51 = (x44 + (0xf * x36));
uint64_t x52 = (x51 >> 0x19);
uint32_t x53 = ((uint32_t)x51 & 0x1ffffff);
uint64_t x54 = (x52 + x50);
uint64_t x55 = (x54 >> 0x18);
uint32_t x56 = ((uint32_t)x54 & 0xffffff);
uint64_t x57 = (x55 + x49);
uint64_t x58 = (x57 >> 0x19);
uint32_t x59 = ((uint32_t)x57 & 0x1ffffff);
uint64_t x60 = (x58 + x48);
uint64_t x61 = (x60 >> 0x18);
uint32_t x62 = ((uint32_t)x60 & 0xffffff);
uint64_t x63 = (x61 + x47);
uint64_t x64 = (x63 >> 0x19);
uint32_t x65 = ((uint32_t)x63 & 0x1ffffff);
uint64_t x66 = (x64 + x46);
uint64_t x67 = (x66 >> 0x18);
uint32_t x68 = ((uint32_t)x66 & 0xffffff);
uint64_t x69 = (x67 + x45);
uint64_t x70 = (x69 >> 0x19);
uint32_t x71 = ((uint32_t)x69 & 0x1ffffff);
uint64_t x72 = (x70 + x37);
uint32_t x73 = (uint32_t) (x72 >> 0x18);
uint32_t x74 = ((uint32_t)x72 & 0xffffff);
uint64_t x75 = (x53 + ((uint64_t)0xf * x73));
uint32_t x76 = (uint32_t) (x75 >> 0x19);
uint32_t x77 = ((uint32_t)x75 & 0x1ffffff);
uint32_t x78 = (x76 + x56);
uint32_t x79 = (x78 >> 0x18);
uint32_t x80 = (x78 & 0xffffff);
return (Return x74, Return x71, Return x68, Return x65, Return x62, (x79 + x59), Return x80, Return x77)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t) -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
