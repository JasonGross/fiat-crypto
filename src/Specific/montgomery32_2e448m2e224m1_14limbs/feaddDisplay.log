add = λ var : Z.Syntax.base_type → Type,
λ '(x26, x27, x25, x23, x21, x19, x17, x15, x13, x11, x9, x7, x5, x3, (x52, x53, x51, x49, x47, x45, x43, x41, x39, x37, x35, x33, x31, x29))%core,
uint32_t x55, uint8_t x56 = addcarryx_u32(0x0, x3, x29);
uint32_t x58, uint8_t x59 = addcarryx_u32(x56, x5, x31);
uint32_t x61, uint8_t x62 = addcarryx_u32(x59, x7, x33);
uint32_t x64, uint8_t x65 = addcarryx_u32(x62, x9, x35);
uint32_t x67, uint8_t x68 = addcarryx_u32(x65, x11, x37);
uint32_t x70, uint8_t x71 = addcarryx_u32(x68, x13, x39);
uint32_t x73, uint8_t x74 = addcarryx_u32(x71, x15, x41);
uint32_t x76, uint8_t x77 = addcarryx_u32(x74, x17, x43);
uint32_t x79, uint8_t x80 = addcarryx_u32(x77, x19, x45);
uint32_t x82, uint8_t x83 = addcarryx_u32(x80, x21, x47);
uint32_t x85, uint8_t x86 = addcarryx_u32(x83, x23, x49);
uint32_t x88, uint8_t x89 = addcarryx_u32(x86, x25, x51);
uint32_t x91, uint8_t x92 = addcarryx_u32(x89, x27, x53);
uint32_t x94, uint8_t x95 = addcarryx_u32(x92, x26, x52);
uint32_t x97, uint8_t x98 = subborrow_u32(0x0, x55, 0xffffffff);
uint32_t x100, uint8_t x101 = subborrow_u32(x98, x58, 0xffffffff);
uint32_t x103, uint8_t x104 = subborrow_u32(x101, x61, 0xffffffff);
uint32_t x106, uint8_t x107 = subborrow_u32(x104, x64, 0xffffffff);
uint32_t x109, uint8_t x110 = subborrow_u32(x107, x67, 0xffffffff);
uint32_t x112, uint8_t x113 = subborrow_u32(x110, x70, 0xffffffff);
uint32_t x115, uint8_t x116 = subborrow_u32(x113, x73, 0xffffffff);
uint32_t x118, uint8_t x119 = subborrow_u32(x116, x76, 0xfffffffe);
uint32_t x121, uint8_t x122 = subborrow_u32(x119, x79, 0xffffffff);
uint32_t x124, uint8_t x125 = subborrow_u32(x122, x82, 0xffffffff);
uint32_t x127, uint8_t x128 = subborrow_u32(x125, x85, 0xffffffff);
uint32_t x130, uint8_t x131 = subborrow_u32(x128, x88, 0xffffffff);
uint32_t x133, uint8_t x134 = subborrow_u32(x131, x91, 0xffffffff);
uint32_t x136, uint8_t x137 = subborrow_u32(x134, x94, 0xffffffff);
uint32_t _, uint8_t x140 = subborrow_u32(x137, x95, 0x0);
(cmovznz32(x140, x136, x94), cmovznz32(x140, x133, x91), cmovznz32(x140, x130, x88), cmovznz32(x140, x127, x85), cmovznz32(x140, x124, x82), cmovznz32(x140, x121, x79), cmovznz32(x140, x118, x76), cmovznz32(x140, x115, x73), cmovznz32(x140, x112, x70), cmovznz32(x140, x109, x67), cmovznz32(x140, x106, x64), cmovznz32(x140, x103, x61), cmovznz32(x140, x100, x58), cmovznz32(x140, x97, x55))
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t) -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
