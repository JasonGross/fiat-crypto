square = λ var : Z.Syntax.base_type → Type,
λ '(x12, x13, x11, x9, x7, x5, x3, x1)%core,
uint128_t x14 = (((uint128_t)(x7 + x12) * (x7 + x12)) - ((uint128_t)x7 * x7));
uint128_t x15 = ((((uint128_t)(x5 + x13) * (x7 + x12)) + ((uint128_t)(x7 + x12) * (x5 + x13))) - (((uint128_t)x5 * x7) + ((uint128_t)x7 * x5)));
uint128_t x16 = ((((uint128_t)(x3 + x11) * (x7 + x12)) + (((uint128_t)(x5 + x13) * (x5 + x13)) + ((uint128_t)(x7 + x12) * (x3 + x11)))) - (((uint128_t)x3 * x7) + (((uint128_t)x5 * x5) + ((uint128_t)x7 * x3))));
uint128_t x17 = ((((uint128_t)(x1 + x9) * (x7 + x12)) + (((uint128_t)(x3 + x11) * (x5 + x13)) + (((uint128_t)(x5 + x13) * (x3 + x11)) + ((uint128_t)(x7 + x12) * (x1 + x9))))) - (((uint128_t)x1 * x7) + (((uint128_t)x3 * x5) + (((uint128_t)x5 * x3) + ((uint128_t)x7 * x1)))));
uint128_t x18 = ((((uint128_t)x7 * x7) + ((uint128_t)x12 * x12)) + ((((uint128_t)(x1 + x9) * (x5 + x13)) + (((uint128_t)(x3 + x11) * (x3 + x11)) + ((uint128_t)(x5 + x13) * (x1 + x9)))) - (((uint128_t)x1 * x5) + (((uint128_t)x3 * x3) + ((uint128_t)x5 * x1)))));
uint128_t x19 = (((((uint128_t)x5 * x7) + ((uint128_t)x7 * x5)) + (((uint128_t)x13 * x12) + ((uint128_t)x12 * x13))) + ((((uint128_t)(x1 + x9) * (x3 + x11)) + ((uint128_t)(x3 + x11) * (x1 + x9))) - (((uint128_t)x1 * x3) + ((uint128_t)x3 * x1))));
uint128_t x20 = (((((uint128_t)x3 * x7) + (((uint128_t)x5 * x5) + ((uint128_t)x7 * x3))) + (((uint128_t)x11 * x12) + (((uint128_t)x13 * x13) + ((uint128_t)x12 * x11)))) + (((uint128_t)(x1 + x9) * (x1 + x9)) - ((uint128_t)x1 * x1)));
uint128_t x21 = ((((uint128_t)x1 * x7) + (((uint128_t)x3 * x5) + (((uint128_t)x5 * x3) + ((uint128_t)x7 * x1)))) + (((uint128_t)x9 * x12) + (((uint128_t)x11 * x13) + (((uint128_t)x13 * x11) + ((uint128_t)x12 * x9)))));
uint128_t x22 = ((((uint128_t)x1 * x5) + (((uint128_t)x3 * x3) + ((uint128_t)x5 * x1))) + (((uint128_t)x9 * x13) + (((uint128_t)x11 * x11) + ((uint128_t)x13 * x9))));
uint128_t x23 = ((((uint128_t)x1 * x3) + ((uint128_t)x3 * x1)) + (((uint128_t)x9 * x11) + ((uint128_t)x11 * x9)));
uint128_t x24 = (((uint128_t)x1 * x1) + ((uint128_t)x9 * x9));
uint128_t x25 = (x18 + x14);
uint128_t x26 = (x19 + x15);
uint128_t x27 = (x20 + x16);
uint128_t x28 = (x22 + x14);
uint128_t x29 = (x23 + x15);
uint128_t x30 = (x24 + x16);
uint128_t x31 = (x21 >> 0x3c);
uint64_t x32 = ((uint64_t)x21 & 0xfffffffffffffff);
uint128_t x33 = (x17 >> 0x3c);
uint64_t x34 = ((uint64_t)x17 & 0xfffffffffffffff);
uint128_t x35 = ((0x1000000000000000 * x33) + x34);
uint128_t x36 = (x35 >> 0x3c);
uint64_t x37 = ((uint64_t)x35 & 0xfffffffffffffff);
uint128_t x38 = ((x31 + x27) + x36);
uint128_t x39 = (x38 >> 0x3c);
uint64_t x40 = ((uint64_t)x38 & 0xfffffffffffffff);
uint128_t x41 = (x30 + x36);
uint128_t x42 = (x41 >> 0x3c);
uint64_t x43 = ((uint64_t)x41 & 0xfffffffffffffff);
uint128_t x44 = (x39 + x26);
uint128_t x45 = (x44 >> 0x3c);
uint64_t x46 = ((uint64_t)x44 & 0xfffffffffffffff);
uint128_t x47 = (x42 + x29);
uint128_t x48 = (x47 >> 0x3c);
uint64_t x49 = ((uint64_t)x47 & 0xfffffffffffffff);
uint128_t x50 = (x45 + x25);
uint128_t x51 = (x50 >> 0x3c);
uint64_t x52 = ((uint64_t)x50 & 0xfffffffffffffff);
uint128_t x53 = (x48 + x28);
uint128_t x54 = (x53 >> 0x3c);
uint64_t x55 = ((uint64_t)x53 & 0xfffffffffffffff);
uint128_t x56 = (x51 + x37);
uint64_t x57 = (uint64_t) (x56 >> 0x3c);
uint64_t x58 = ((uint64_t)x56 & 0xfffffffffffffff);
uint128_t x59 = (x54 + x32);
uint64_t x60 = (uint64_t) (x59 >> 0x3c);
uint64_t x61 = ((uint64_t)x59 & 0xfffffffffffffff);
uint128_t x62 = (((uint128_t)0x1000000000000000 * x57) + x58);
uint64_t x63 = (uint64_t) (x62 >> 0x3c);
uint64_t x64 = ((uint64_t)x62 & 0xfffffffffffffff);
uint64_t x65 = ((x60 + x40) + x63);
uint64_t x66 = (x65 >> 0x3c);
uint64_t x67 = (x65 & 0xfffffffffffffff);
uint64_t x68 = (x43 + x63);
uint64_t x69 = (x68 >> 0x3c);
uint64_t x70 = (x68 & 0xfffffffffffffff);
return (Return x64, Return x52, (x66 + x46), Return x67, Return x61, Return x55, (x69 + x49), Return x70)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t -> uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
