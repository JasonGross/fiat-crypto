opp = λ var : Z.Syntax.base_type → Type,
λ '(x8, x9, x7, x5, x3, x1)%core,
uint32_t x11, uint8_t x12 = subborrow_u32(0x0, 0x0, x1);
uint32_t x14, uint8_t x15 = subborrow_u32(x12, 0x0, x3);
uint32_t x17, uint8_t x18 = subborrow_u32(x15, 0x0, x5);
uint32_t x20, uint8_t x21 = subborrow_u32(x18, 0x0, x7);
uint32_t x23, uint8_t x24 = subborrow_u32(x21, 0x0, x9);
uint32_t x26, uint8_t x27 = subborrow_u32(x24, 0x0, x8);
uint32_t x28 = cmovznz32(x27, 0x0, 0xffffffff);
uint32_t x30, uint8_t x31 = addcarryx_u32(0x0, x11, (x28 & 0xfffffffd));
uint32_t x33, uint8_t x34 = addcarryx_u32(x31, x14, (x28 & 0xffffffff));
uint32_t x36, uint8_t x37 = addcarryx_u32(x34, x17, (x28 & 0xffffffff));
uint32_t x39, uint8_t x40 = addcarryx_u32(x37, x20, (x28 & 0xffffffff));
uint32_t x42, uint8_t x43 = addcarryx_u32(x40, x23, (x28 & 0xffffffff));
uint32_t x45, uint8_t _ = addcarryx_u32(x43, x26, (x28 & 0x3fff));
(Return x45, Return x42, Return x39, Return x36, Return x33, Return x30)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
