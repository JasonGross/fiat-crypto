sub = λ var : Z.Syntax.base_type → Type,
λ '(x22, x23, x21, x19, x17, x15, x13, x11, x9, x7, x5, x3, (x44, x45, x43, x41, x39, x37, x35, x33, x31, x29, x27, x25))%core,
(((0x3ffffe + x22) - x44), ((0x3ffffe + x23) - x45), ((0x7ffffe + x21) - x43), ((0x3ffffe + x19) - x41), ((0x3ffffe + x17) - x39), ((0x7ffffe + x15) - x37), ((0x3ffffe + x13) - x35), ((0x3ffffe + x11) - x33), ((0x7ffffe + x9) - x31), ((0x3ffffe + x7) - x29), ((0x3ff7fe + x5) - x27), ((0x7ff85e + x3) - x25))
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t) -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
