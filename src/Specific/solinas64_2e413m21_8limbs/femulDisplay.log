mul = λ var : Z.Syntax.base_type → Type,
λ '(x14, x15, x13, x11, x9, x7, x5, x3, (x28, x29, x27, x25, x23, x21, x19, x17))%core,
uint128_t x30 = (0x2 * ((uint128_t)x14 * x28));
uint128_t x31 = (((uint128_t)x15 * x28) + ((uint128_t)x14 * x29));
uint128_t x32 = ((0x2 * ((uint128_t)x13 * x28)) + (((uint128_t)x15 * x29) + (0x2 * ((uint128_t)x14 * x27))));
uint128_t x33 = ((0x2 * ((uint128_t)x11 * x28)) + ((0x2 * ((uint128_t)x13 * x29)) + ((0x2 * ((uint128_t)x15 * x27)) + (0x2 * ((uint128_t)x14 * x25)))));
uint128_t x34 = (((uint128_t)x9 * x28) + (((uint128_t)x11 * x29) + ((0x2 * ((uint128_t)x13 * x27)) + (((uint128_t)x15 * x25) + ((uint128_t)x14 * x23)))));
uint128_t x35 = ((0x2 * ((uint128_t)x7 * x28)) + (((uint128_t)x9 * x29) + ((0x2 * ((uint128_t)x11 * x27)) + ((0x2 * ((uint128_t)x13 * x25)) + (((uint128_t)x15 * x23) + (0x2 * ((uint128_t)x14 * x21)))))));
uint128_t x36 = ((0x2 * ((uint128_t)x5 * x28)) + ((0x2 * ((uint128_t)x7 * x29)) + ((0x2 * ((uint128_t)x9 * x27)) + ((0x2 * ((uint128_t)x11 * x25)) + ((0x2 * ((uint128_t)x13 * x23)) + ((0x2 * ((uint128_t)x15 * x21)) + (0x2 * ((uint128_t)x14 * x19))))))));
uint128_t x37 = (((uint128_t)x3 * x28) + (((uint128_t)x5 * x29) + ((0x2 * ((uint128_t)x7 * x27)) + (((uint128_t)x9 * x25) + (((uint128_t)x11 * x23) + ((0x2 * ((uint128_t)x13 * x21)) + (((uint128_t)x15 * x19) + ((uint128_t)x14 * x17))))))));
uint128_t x38 = (((uint128_t)x3 * x29) + ((0x2 * ((uint128_t)x5 * x27)) + ((0x2 * ((uint128_t)x7 * x25)) + (((uint128_t)x9 * x23) + ((0x2 * ((uint128_t)x11 * x21)) + ((0x2 * ((uint128_t)x13 * x19)) + ((uint128_t)x15 * x17)))))));
uint128_t x39 = (((uint128_t)x3 * x27) + (((uint128_t)x5 * x25) + (((uint128_t)x7 * x23) + (((uint128_t)x9 * x21) + (((uint128_t)x11 * x19) + ((uint128_t)x13 * x17))))));
uint128_t x40 = (((uint128_t)x3 * x25) + (((uint128_t)x5 * x23) + ((0x2 * ((uint128_t)x7 * x21)) + (((uint128_t)x9 * x19) + ((uint128_t)x11 * x17)))));
uint128_t x41 = (((uint128_t)x3 * x23) + ((0x2 * ((uint128_t)x5 * x21)) + ((0x2 * ((uint128_t)x7 * x19)) + ((uint128_t)x9 * x17))));
uint128_t x42 = (((uint128_t)x3 * x21) + (((uint128_t)x5 * x19) + ((uint128_t)x7 * x17)));
uint128_t x43 = (((uint128_t)x3 * x19) + ((uint128_t)x5 * x17));
uint128_t x44 = ((uint128_t)x3 * x17);
uint128_t x45 = (x38 + (0x15 * x30));
uint128_t x46 = (x39 + (0x15 * x31));
uint128_t x47 = (x40 + (0x15 * x32));
uint128_t x48 = (x41 + (0x15 * x33));
uint128_t x49 = (x42 + (0x15 * x34));
uint128_t x50 = (x43 + (0x15 * x35));
uint128_t x51 = (x44 + (0x15 * x36));
uint64_t x52 = (uint64_t) (x51 >> 0x34);
uint64_t x53 = ((uint64_t)x51 & 0xfffffffffffff);
uint128_t x54 = (x52 + x50);
uint64_t x55 = (uint64_t) (x54 >> 0x34);
uint64_t x56 = ((uint64_t)x54 & 0xfffffffffffff);
uint128_t x57 = (x55 + x49);
uint64_t x58 = (uint64_t) (x57 >> 0x33);
uint64_t x59 = ((uint64_t)x57 & 0x7ffffffffffff);
uint128_t x60 = (x58 + x48);
uint64_t x61 = (uint64_t) (x60 >> 0x34);
uint64_t x62 = ((uint64_t)x60 & 0xfffffffffffff);
uint128_t x63 = (x61 + x47);
uint64_t x64 = (uint64_t) (x63 >> 0x34);
uint64_t x65 = ((uint64_t)x63 & 0xfffffffffffff);
uint128_t x66 = (x64 + x46);
uint64_t x67 = (uint64_t) (x66 >> 0x33);
uint64_t x68 = ((uint64_t)x66 & 0x7ffffffffffff);
uint128_t x69 = (x67 + x45);
uint64_t x70 = (uint64_t) (x69 >> 0x34);
uint64_t x71 = ((uint64_t)x69 & 0xfffffffffffff);
uint128_t x72 = (x70 + x37);
uint64_t x73 = (uint64_t) (x72 >> 0x33);
uint64_t x74 = ((uint64_t)x72 & 0x7ffffffffffff);
uint64_t x75 = (x53 + (0x15 * x73));
uint64_t x76 = (x75 >> 0x34);
uint64_t x77 = (x75 & 0xfffffffffffff);
uint64_t x78 = (x76 + x56);
uint64_t x79 = (x78 >> 0x34);
uint64_t x80 = (x78 & 0xfffffffffffff);
return (Return x74, Return x71, Return x68, Return x65, Return x62, (x79 + x59), Return x80, Return x77)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t) -> uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
