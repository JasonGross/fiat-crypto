opp = λ var : Z.Syntax.base_type → Type,
λ '(x6, x7, x5, x3, x1)%core,
uint64_t x9, uint8_t x10 = subborrow_u64(0x0, 0x0, x1);
uint64_t x12, uint8_t x13 = subborrow_u64(x10, 0x0, x3);
uint64_t x15, uint8_t x16 = subborrow_u64(x13, 0x0, x5);
uint64_t x18, uint8_t x19 = subborrow_u64(x16, 0x0, x7);
uint64_t x21, uint8_t x22 = subborrow_u64(x19, 0x0, x6);
uint64_t x23 = cmovznz64(x22, 0x0, 0xffffffffffffffffL);
uint64_t x25, uint8_t x26 = addcarryx_u64(0x0, x9, (x23 & 0xfffffffffffffffdL));
uint64_t x28, uint8_t x29 = addcarryx_u64(x26, x12, (x23 & 0xffffffffffffffffL));
uint64_t x31, uint8_t x32 = addcarryx_u64(x29, x15, (x23 & 0xffffffffffffffffL));
uint64_t x34, uint8_t x35 = addcarryx_u64(x32, x18, (x23 & 0xffffffffffffffffL));
uint64_t x37, uint8_t _ = addcarryx_u64(x35, x21, (x23 & 0x3ff));
(Return x37, Return x34, Return x31, Return x28, Return x25)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t -> uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
