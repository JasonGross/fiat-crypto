mul = λ var : Z.Syntax.base_type → Type,
λ '(x10, x11, x9, x7, x5, x3, (x20, x21, x19, x17, x15, x13))%core,
uint128_t x22 = (0x2 * ((uint128_t)x10 * x20));
uint128_t x23 = (((uint128_t)x11 * x20) + ((uint128_t)x10 * x21));
uint128_t x24 = ((0x2 * ((uint128_t)x9 * x20)) + (((uint128_t)x11 * x21) + (0x2 * ((uint128_t)x10 * x19))));
uint128_t x25 = (((uint128_t)x7 * x20) + (((uint128_t)x9 * x21) + (((uint128_t)x11 * x19) + ((uint128_t)x10 * x17))));
uint128_t x26 = ((0x2 * ((uint128_t)x5 * x20)) + (((uint128_t)x7 * x21) + ((0x2 * ((uint128_t)x9 * x19)) + (((uint128_t)x11 * x17) + (0x2 * ((uint128_t)x10 * x15))))));
uint128_t x27 = (((uint128_t)x3 * x20) + (((uint128_t)x5 * x21) + (((uint128_t)x7 * x19) + (((uint128_t)x9 * x17) + (((uint128_t)x11 * x15) + ((uint128_t)x10 * x13))))));
uint128_t x28 = (((uint128_t)x3 * x21) + ((0x2 * ((uint128_t)x5 * x19)) + (((uint128_t)x7 * x17) + ((0x2 * ((uint128_t)x9 * x15)) + ((uint128_t)x11 * x13)))));
uint128_t x29 = (((uint128_t)x3 * x19) + (((uint128_t)x5 * x17) + (((uint128_t)x7 * x15) + ((uint128_t)x9 * x13))));
uint128_t x30 = (((uint128_t)x3 * x17) + ((0x2 * ((uint128_t)x5 * x15)) + ((uint128_t)x7 * x13)));
uint128_t x31 = (((uint128_t)x3 * x15) + ((uint128_t)x5 * x13));
uint128_t x32 = ((uint128_t)x3 * x13);
uint128_t x33 = (x28 + (0x13 * x22));
uint128_t x34 = (x29 + (0x13 * x23));
uint128_t x35 = (x30 + (0x13 * x24));
uint128_t x36 = (x31 + (0x13 * x25));
uint128_t x37 = (x32 + (0x13 * x26));
uint64_t x38 = (uint64_t) (x37 >> 0x2b);
uint64_t x39 = ((uint64_t)x37 & 0x7ffffffffff);
uint128_t x40 = (x38 + x36);
uint64_t x41 = (uint64_t) (x40 >> 0x2a);
uint64_t x42 = ((uint64_t)x40 & 0x3ffffffffff);
uint128_t x43 = (x41 + x35);
uint64_t x44 = (uint64_t) (x43 >> 0x2b);
uint64_t x45 = ((uint64_t)x43 & 0x7ffffffffff);
uint128_t x46 = (x44 + x34);
uint64_t x47 = (uint64_t) (x46 >> 0x2a);
uint64_t x48 = ((uint64_t)x46 & 0x3ffffffffff);
uint128_t x49 = (x47 + x33);
uint64_t x50 = (uint64_t) (x49 >> 0x2b);
uint64_t x51 = ((uint64_t)x49 & 0x7ffffffffff);
uint128_t x52 = (x50 + x27);
uint64_t x53 = (uint64_t) (x52 >> 0x2a);
uint64_t x54 = ((uint64_t)x52 & 0x3ffffffffff);
uint64_t x55 = (x39 + (0x13 * x53));
uint64_t x56 = (x55 >> 0x2b);
uint64_t x57 = (x55 & 0x7ffffffffff);
uint64_t x58 = (x56 + x42);
uint64_t x59 = (x58 >> 0x2a);
uint64_t x60 = (x58 & 0x3ffffffffff);
return (Return x54, Return x51, Return x48, (x59 + x45), Return x60, Return x57)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t) -> uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
