nonzero = λ var : Z.Syntax.base_type → Type,
λ '(x12, x13, x11, x9, x7, x5, x3, x1)%core,
uint64_t x14 = (x13 | x12);
uint64_t x15 = (x11 | x14);
uint64_t x16 = (x9 | x15);
uint64_t x17 = (x7 | x16);
uint64_t x18 = (x5 | x17);
uint64_t x19 = (x3 | x18);
uint64_t x20 = (x1 | x19);
return x20
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t -> uint64_t)

Argument scope is [function_scope]
