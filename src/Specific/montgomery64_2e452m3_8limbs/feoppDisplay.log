opp = λ var : Z.Syntax.base_type → Type,
λ '(x12, x13, x11, x9, x7, x5, x3, x1)%core,
uint64_t x15, uint8_t x16 = subborrow_u64(0x0, 0x0, x1);
uint64_t x18, uint8_t x19 = subborrow_u64(x16, 0x0, x3);
uint64_t x21, uint8_t x22 = subborrow_u64(x19, 0x0, x5);
uint64_t x24, uint8_t x25 = subborrow_u64(x22, 0x0, x7);
uint64_t x27, uint8_t x28 = subborrow_u64(x25, 0x0, x9);
uint64_t x30, uint8_t x31 = subborrow_u64(x28, 0x0, x11);
uint64_t x33, uint8_t x34 = subborrow_u64(x31, 0x0, x13);
uint64_t x36, uint8_t x37 = subborrow_u64(x34, 0x0, x12);
uint64_t x38 = cmovznz64(x37, 0x0, 0xffffffffffffffffL);
uint64_t x40, uint8_t x41 = addcarryx_u64(0x0, x15, (x38 & 0xfffffffffffffffdL));
uint64_t x43, uint8_t x44 = addcarryx_u64(x41, x18, (x38 & 0xffffffffffffffffL));
uint64_t x46, uint8_t x47 = addcarryx_u64(x44, x21, (x38 & 0xffffffffffffffffL));
uint64_t x49, uint8_t x50 = addcarryx_u64(x47, x24, (x38 & 0xffffffffffffffffL));
uint64_t x52, uint8_t x53 = addcarryx_u64(x50, x27, (x38 & 0xffffffffffffffffL));
uint64_t x55, uint8_t x56 = addcarryx_u64(x53, x30, (x38 & 0xffffffffffffffffL));
uint64_t x58, uint8_t x59 = addcarryx_u64(x56, x33, (x38 & 0xffffffffffffffffL));
uint64_t x61, uint8_t _ = addcarryx_u64(x59, x36, ((uint8_t)x38 & 0xf));
(Return x61, Return x58, Return x55, Return x52, Return x49, Return x46, Return x43, Return x40)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t -> uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
