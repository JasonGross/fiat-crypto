nonzero = λ var : Z.Syntax.base_type → Type,
λ '(x20, x21, x19, x17, x15, x13, x11, x9, x7, x5, x3, x1)%core,
uint32_t x22 = (x21 | x20);
uint32_t x23 = (x19 | x22);
uint32_t x24 = (x17 | x23);
uint32_t x25 = (x15 | x24);
uint32_t x26 = (x13 | x25);
uint32_t x27 = (x11 | x26);
uint32_t x28 = (x9 | x27);
uint32_t x29 = (x7 | x28);
uint32_t x30 = (x5 | x29);
uint32_t x31 = (x3 | x30);
uint32_t x32 = (x1 | x31);
return x32
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t -> uint32_t)

Argument scope is [function_scope]
