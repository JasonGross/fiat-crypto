opp = λ var : Z.Syntax.base_type → Type,
λ '(x26, x27, x25, x23, x21, x19, x17, x15, x13, x11, x9, x7, x5, x3, x1)%core,
uint32_t x29, uint8_t x30 = subborrow_u32(0x0, 0x0, x1);
uint32_t x32, uint8_t x33 = subborrow_u32(x30, 0x0, x3);
uint32_t x35, uint8_t x36 = subborrow_u32(x33, 0x0, x5);
uint32_t x38, uint8_t x39 = subborrow_u32(x36, 0x0, x7);
uint32_t x41, uint8_t x42 = subborrow_u32(x39, 0x0, x9);
uint32_t x44, uint8_t x45 = subborrow_u32(x42, 0x0, x11);
uint32_t x47, uint8_t x48 = subborrow_u32(x45, 0x0, x13);
uint32_t x50, uint8_t x51 = subborrow_u32(x48, 0x0, x15);
uint32_t x53, uint8_t x54 = subborrow_u32(x51, 0x0, x17);
uint32_t x56, uint8_t x57 = subborrow_u32(x54, 0x0, x19);
uint32_t x59, uint8_t x60 = subborrow_u32(x57, 0x0, x21);
uint32_t x62, uint8_t x63 = subborrow_u32(x60, 0x0, x23);
uint32_t x65, uint8_t x66 = subborrow_u32(x63, 0x0, x25);
uint32_t x68, uint8_t x69 = subborrow_u32(x66, 0x0, x27);
uint32_t x71, uint8_t x72 = subborrow_u32(x69, 0x0, x26);
uint32_t x73 = cmovznz32(x72, 0x0, 0xffffffff);
uint32_t x75, uint8_t x76 = addcarryx_u32(0x0, x29, (x73 & 0xffffffff));
uint32_t x78, uint8_t x79 = addcarryx_u32(x76, x32, (x73 & 0xffffffff));
uint32_t x81, uint8_t x82 = addcarryx_u32(x79, x35, (x73 & 0xffffffff));
uint32_t x84, uint8_t x85 = addcarryx_u32(x82, x38, (x73 & 0xffffffff));
uint32_t x87, uint8_t x88 = addcarryx_u32(x85, x41, (x73 & 0xffffffff));
uint32_t x90, uint8_t x91 = addcarryx_u32(x88, x44, (x73 & 0xffffffff));
uint32_t x93, uint8_t x94 = addcarryx_u32(x91, x47, (x73 & 0xffffffff));
uint32_t x96, uint8_t x97 = addcarryx_u32(x94, x50, (x73 & 0xfffeffff));
uint32_t x99, uint8_t x100 = addcarryx_u32(x97, x53, (x73 & 0xffffffff));
uint32_t x102, uint8_t x103 = addcarryx_u32(x100, x56, (x73 & 0xffffffff));
uint32_t x105, uint8_t x106 = addcarryx_u32(x103, x59, (x73 & 0xffffffff));
uint32_t x108, uint8_t x109 = addcarryx_u32(x106, x62, (x73 & 0xffffffff));
uint32_t x111, uint8_t x112 = addcarryx_u32(x109, x65, (x73 & 0xffffffff));
uint32_t x114, uint8_t x115 = addcarryx_u32(x112, x68, (x73 & 0xffffffff));
uint32_t x117, uint8_t _ = addcarryx_u32(x115, x71, (x73 & 0xffffffff));
(Return x117, Return x114, Return x111, Return x108, Return x105, Return x102, Return x99, Return x96, Return x93, Return x90, Return x87, Return x84, Return x81, Return x78, Return x75)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
