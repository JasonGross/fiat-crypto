sub = λ var : Z.Syntax.base_type → Type,
λ '(x22, x23, x21, x19, x17, x15, x13, x11, x9, x7, x5, x3, (x44, x45, x43, x41, x39, x37, x35, x33, x31, x29, x27, x25))%core,
uint32_t x47, uint8_t x48 = subborrow_u32(0x0, x3, x25);
uint32_t x50, uint8_t x51 = subborrow_u32(x48, x5, x27);
uint32_t x53, uint8_t x54 = subborrow_u32(x51, x7, x29);
uint32_t x56, uint8_t x57 = subborrow_u32(x54, x9, x31);
uint32_t x59, uint8_t x60 = subborrow_u32(x57, x11, x33);
uint32_t x62, uint8_t x63 = subborrow_u32(x60, x13, x35);
uint32_t x65, uint8_t x66 = subborrow_u32(x63, x15, x37);
uint32_t x68, uint8_t x69 = subborrow_u32(x66, x17, x39);
uint32_t x71, uint8_t x72 = subborrow_u32(x69, x19, x41);
uint32_t x74, uint8_t x75 = subborrow_u32(x72, x21, x43);
uint32_t x77, uint8_t x78 = subborrow_u32(x75, x23, x45);
uint32_t x80, uint8_t x81 = subborrow_u32(x78, x22, x44);
uint32_t x82 = cmovznz32(x81, 0x0, 0xffffffff);
uint32_t x84, uint8_t x85 = addcarryx_u32(0x0, x47, (x82 & 0xffffffe7));
uint32_t x87, uint8_t x88 = addcarryx_u32(x85, x50, (x82 & 0xffffffff));
uint32_t x90, uint8_t x91 = addcarryx_u32(x88, x53, (x82 & 0xffffffff));
uint32_t x93, uint8_t x94 = addcarryx_u32(x91, x56, (x82 & 0xffffffff));
uint32_t x96, uint8_t x97 = addcarryx_u32(x94, x59, (x82 & 0xffffffff));
uint32_t x99, uint8_t x100 = addcarryx_u32(x97, x62, (x82 & 0xffffffff));
uint32_t x102, uint8_t x103 = addcarryx_u32(x100, x65, (x82 & 0xffffffff));
uint32_t x105, uint8_t x106 = addcarryx_u32(x103, x68, (x82 & 0xffffffff));
uint32_t x108, uint8_t x109 = addcarryx_u32(x106, x71, (x82 & 0xffffffff));
uint32_t x111, uint8_t x112 = addcarryx_u32(x109, x74, (x82 & 0xffffffff));
uint32_t x114, uint8_t x115 = addcarryx_u32(x112, x77, (x82 & 0xffffffff));
uint32_t x117, uint8_t _ = addcarryx_u32(x115, x80, (x82 & 0x1ffff));
(Return x117, Return x114, Return x111, Return x108, Return x105, Return x102, Return x99, Return x96, Return x93, Return x90, Return x87, Return x84)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t) -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
