square = λ var : Z.Syntax.base_type → Type,
λ '(x14, x15, x13, x11, x9, x7, x5, x3, x1)%core,
uint64_t x16 = ((uint64_t)x14 * x14);
uint64_t x17 = ((0x2 * ((uint64_t)x15 * x14)) + (0x2 * ((uint64_t)x14 * x15)));
uint64_t x18 = (((uint64_t)x13 * x14) + ((0x2 * ((uint64_t)x15 * x15)) + ((uint64_t)x14 * x13)));
uint64_t x19 = (((uint64_t)x11 * x14) + (((uint64_t)x13 * x15) + (((uint64_t)x15 * x13) + ((uint64_t)x14 * x11))));
uint64_t x20 = ((0x2 * ((uint64_t)x9 * x14)) + ((0x2 * ((uint64_t)x11 * x15)) + (((uint64_t)x13 * x13) + ((0x2 * ((uint64_t)x15 * x11)) + (0x2 * ((uint64_t)x14 * x9))))));
uint64_t x21 = (((uint64_t)x7 * x14) + ((0x2 * ((uint64_t)x9 * x15)) + (((uint64_t)x11 * x13) + (((uint64_t)x13 * x11) + ((0x2 * ((uint64_t)x15 * x9)) + ((uint64_t)x14 * x7))))));
uint64_t x22 = (((uint64_t)x5 * x14) + (((uint64_t)x7 * x15) + (((uint64_t)x9 * x13) + (((uint64_t)x11 * x11) + (((uint64_t)x13 * x9) + (((uint64_t)x15 * x7) + ((uint64_t)x14 * x5)))))));
uint64_t x23 = ((0x2 * ((uint64_t)x3 * x14)) + ((0x2 * ((uint64_t)x5 * x15)) + (((uint64_t)x7 * x13) + ((0x2 * ((uint64_t)x9 * x11)) + ((0x2 * ((uint64_t)x11 * x9)) + (((uint64_t)x13 * x7) + ((0x2 * ((uint64_t)x15 * x5)) + (0x2 * ((uint64_t)x14 * x3)))))))));
uint64_t x24 = (((uint64_t)x1 * x14) + ((0x2 * ((uint64_t)x3 * x15)) + (((uint64_t)x5 * x13) + (((uint64_t)x7 * x11) + ((0x2 * ((uint64_t)x9 * x9)) + (((uint64_t)x11 * x7) + (((uint64_t)x13 * x5) + ((0x2 * ((uint64_t)x15 * x3)) + ((uint64_t)x14 * x1)))))))));
uint64_t x25 = (((uint64_t)x1 * x15) + (((uint64_t)x3 * x13) + (((uint64_t)x5 * x11) + (((uint64_t)x7 * x9) + (((uint64_t)x9 * x7) + (((uint64_t)x11 * x5) + (((uint64_t)x13 * x3) + ((uint64_t)x15 * x1))))))));
uint64_t x26 = (((uint64_t)x1 * x13) + ((0x2 * ((uint64_t)x3 * x11)) + ((0x2 * ((uint64_t)x5 * x9)) + (((uint64_t)x7 * x7) + ((0x2 * ((uint64_t)x9 * x5)) + ((0x2 * ((uint64_t)x11 * x3)) + ((uint64_t)x13 * x1)))))));
uint64_t x27 = (((uint64_t)x1 * x11) + ((0x2 * ((uint64_t)x3 * x9)) + (((uint64_t)x5 * x7) + (((uint64_t)x7 * x5) + ((0x2 * ((uint64_t)x9 * x3)) + ((uint64_t)x11 * x1))))));
uint64_t x28 = (((uint64_t)x1 * x9) + (((uint64_t)x3 * x7) + (((uint64_t)x5 * x5) + (((uint64_t)x7 * x3) + ((uint64_t)x9 * x1)))));
uint64_t x29 = (((uint64_t)x1 * x7) + ((0x2 * ((uint64_t)x3 * x5)) + ((0x2 * ((uint64_t)x5 * x3)) + ((uint64_t)x7 * x1))));
uint64_t x30 = (((uint64_t)x1 * x5) + ((0x2 * ((uint64_t)x3 * x3)) + ((uint64_t)x5 * x1)));
uint64_t x31 = (((uint64_t)x1 * x3) + ((uint64_t)x3 * x1));
uint64_t x32 = ((uint64_t)x1 * x1);
ℤ x33 = (x24 +ℤ (x18 +ℤ ((0x200000 *ℤ x17) +ℤ (0x80000000000 *ℤ x16))));
uint64_t x34 = (x25 + (x16 + x19));
uint64_t x35 = (x26 + (x17 + x20));
uint64_t x36 = (x27 + (x18 + x21));
uint64_t x37 = (x28 + (x19 + x22));
uint64_t x38 = (x29 + (x20 + x23));
uint64_t x39 = (x30 + x21);
uint64_t x40 = (x31 + x22);
uint64_t x41 = (x32 + x23);
uint32_t x42 = (uint32_t) (x39 >> 0x15);
uint32_t x43 = ((uint32_t)x39 & 0x1fffff);
ℤ x44 = (x33 >>ℤ 0x15);
uint32_t x45 = (x33 & 0x1fffff);
ℤ x46 = ((0x200000 *ℤ x44) +ℤ x45);
ℤ x47 = (x46 >>ℤ 0x15);
uint32_t x48 = (x46 & 0x1fffff);
ℤ x49 = ((x42 + x38) +ℤ x47);
uint64_t x50 = (x49 >> 0x16);
uint32_t x51 = (x49 & 0x3fffff);
ℤ x52 = (x41 +ℤ x47);
uint64_t x53 = (x52 >> 0x16);
uint32_t x54 = (x52 & 0x3fffff);
uint64_t x55 = (x50 + x37);
uint32_t x56 = (uint32_t) (x55 >> 0x15);
uint32_t x57 = ((uint32_t)x55 & 0x1fffff);
uint64_t x58 = (x53 + x40);
uint32_t x59 = (uint32_t) (x58 >> 0x15);
uint32_t x60 = ((uint32_t)x58 & 0x1fffff);
uint64_t x61 = (x56 + x36);
uint32_t x62 = (uint32_t) (x61 >> 0x15);
uint32_t x63 = ((uint32_t)x61 & 0x1fffff);
uint32_t x64 = (x59 + x43);
uint32_t x65 = (x64 >> 0x15);
uint32_t x66 = (x64 & 0x1fffff);
uint64_t x67 = (x62 + x35);
uint32_t x68 = (uint32_t) (x67 >> 0x16);
uint32_t x69 = ((uint32_t)x67 & 0x3fffff);
uint64_t x70 = (x68 + x34);
uint32_t x71 = (uint32_t) (x70 >> 0x15);
uint32_t x72 = ((uint32_t)x70 & 0x1fffff);
uint32_t x73 = (x71 + x48);
uint32_t x74 = (x73 >> 0x15);
uint32_t x75 = (x73 & 0x1fffff);
uint32_t x76 = ((0x200000 * x74) + x75);
uint32_t x77 = (x76 >> 0x15);
uint32_t x78 = (x76 & 0x1fffff);
uint32_t x79 = ((x65 + x51) + x77);
uint32_t x80 = (x79 >> 0x16);
uint32_t x81 = (x79 & 0x3fffff);
uint32_t x82 = (x54 + x77);
uint32_t x83 = (x82 >> 0x16);
uint32_t x84 = (x82 & 0x3fffff);
return (Return x78, Return x72, Return x69, Return x63, (x80 + x57), Return x81, Return x66, (x83 + x60), Return x84)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
