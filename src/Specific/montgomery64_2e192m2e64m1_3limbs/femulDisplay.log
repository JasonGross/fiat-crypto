mul = λ var : Z.Syntax.base_type → Type,
λ '(x4, x5, x3, (x8, x9, x7))%core,
uint64_t x11, uint64_t x12 = mulx_u64(x3, x7);
uint64_t x14, uint64_t x15 = mulx_u64(x3, x9);
uint64_t x17, uint64_t x18 = mulx_u64(x3, x8);
uint64_t x20, uint8_t x21 = addcarryx_u64(0x0, x12, x14);
uint64_t x23, uint8_t x24 = addcarryx_u64(x21, x15, x17);
uint64_t x26, uint8_t _ = addcarryx_u64(0x0, x24, x18);
uint64_t x29, uint64_t x30 = mulx_u64(x11, 0xffffffffffffffffL);
uint64_t x32, uint64_t x33 = mulx_u64(x11, 0xfffffffffffffffeL);
uint64_t x35, uint64_t x36 = mulx_u64(x11, 0xffffffffffffffffL);
uint64_t x38, uint8_t x39 = addcarryx_u64(0x0, x30, x32);
uint64_t x41, uint8_t x42 = addcarryx_u64(x39, x33, x35);
uint64_t x44, uint8_t _ = addcarryx_u64(0x0, x42, x36);
uint64_t _, uint8_t x48 = addcarryx_u64(0x0, x11, x29);
uint64_t x50, uint8_t x51 = addcarryx_u64(x48, x20, x38);
uint64_t x53, uint8_t x54 = addcarryx_u64(x51, x23, x41);
uint64_t x56, uint8_t x57 = addcarryx_u64(x54, x26, x44);
uint64_t x59, uint64_t x60 = mulx_u64(x5, x7);
uint64_t x62, uint64_t x63 = mulx_u64(x5, x9);
uint64_t x65, uint64_t x66 = mulx_u64(x5, x8);
uint64_t x68, uint8_t x69 = addcarryx_u64(0x0, x60, x62);
uint64_t x71, uint8_t x72 = addcarryx_u64(x69, x63, x65);
uint64_t x74, uint8_t _ = addcarryx_u64(0x0, x72, x66);
uint64_t x77, uint8_t x78 = addcarryx_u64(0x0, x50, x59);
uint64_t x80, uint8_t x81 = addcarryx_u64(x78, x53, x68);
uint64_t x83, uint8_t x84 = addcarryx_u64(x81, x56, x71);
uint64_t x86, uint8_t x87 = addcarryx_u64(x84, x57, x74);
uint64_t x89, uint64_t x90 = mulx_u64(x77, 0xffffffffffffffffL);
uint64_t x92, uint64_t x93 = mulx_u64(x77, 0xfffffffffffffffeL);
uint64_t x95, uint64_t x96 = mulx_u64(x77, 0xffffffffffffffffL);
uint64_t x98, uint8_t x99 = addcarryx_u64(0x0, x90, x92);
uint64_t x101, uint8_t x102 = addcarryx_u64(x99, x93, x95);
uint64_t x104, uint8_t _ = addcarryx_u64(0x0, x102, x96);
uint64_t _, uint8_t x108 = addcarryx_u64(0x0, x77, x89);
uint64_t x110, uint8_t x111 = addcarryx_u64(x108, x80, x98);
uint64_t x113, uint8_t x114 = addcarryx_u64(x111, x83, x101);
uint64_t x116, uint8_t x117 = addcarryx_u64(x114, x86, x104);
uint8_t x118 = (x117 + x87);
uint64_t x120, uint64_t x121 = mulx_u64(x4, x7);
uint64_t x123, uint64_t x124 = mulx_u64(x4, x9);
uint64_t x126, uint64_t x127 = mulx_u64(x4, x8);
uint64_t x129, uint8_t x130 = addcarryx_u64(0x0, x121, x123);
uint64_t x132, uint8_t x133 = addcarryx_u64(x130, x124, x126);
uint64_t x135, uint8_t _ = addcarryx_u64(0x0, x133, x127);
uint64_t x138, uint8_t x139 = addcarryx_u64(0x0, x110, x120);
uint64_t x141, uint8_t x142 = addcarryx_u64(x139, x113, x129);
uint64_t x144, uint8_t x145 = addcarryx_u64(x142, x116, x132);
uint64_t x147, uint8_t x148 = addcarryx_u64(x145, x118, x135);
uint64_t x150, uint64_t x151 = mulx_u64(x138, 0xffffffffffffffffL);
uint64_t x153, uint64_t x154 = mulx_u64(x138, 0xfffffffffffffffeL);
uint64_t x156, uint64_t x157 = mulx_u64(x138, 0xffffffffffffffffL);
uint64_t x159, uint8_t x160 = addcarryx_u64(0x0, x151, x153);
uint64_t x162, uint8_t x163 = addcarryx_u64(x160, x154, x156);
uint64_t x165, uint8_t _ = addcarryx_u64(0x0, x163, x157);
uint64_t _, uint8_t x169 = addcarryx_u64(0x0, x138, x150);
uint64_t x171, uint8_t x172 = addcarryx_u64(x169, x141, x159);
uint64_t x174, uint8_t x175 = addcarryx_u64(x172, x144, x162);
uint64_t x177, uint8_t x178 = addcarryx_u64(x175, x147, x165);
uint8_t x179 = (x178 + x148);
uint64_t x181, uint8_t x182 = subborrow_u64(0x0, x171, 0xffffffffffffffffL);
uint64_t x184, uint8_t x185 = subborrow_u64(x182, x174, 0xfffffffffffffffeL);
uint64_t x187, uint8_t x188 = subborrow_u64(x185, x177, 0xffffffffffffffffL);
uint64_t _, uint8_t x191 = subborrow_u64(x188, x179, 0x0);
(cmovznz64(x191, x187, x177), cmovznz64(x191, x184, x174), cmovznz64(x191, x181, x171))
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * (uint64_t * uint64_t * uint64_t) -> uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
