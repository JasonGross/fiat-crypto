add = λ var : Z.Syntax.base_type → Type,
λ '(x16, x17, x15, x13, x11, x9, x7, x5, x3, (x32, x33, x31, x29, x27, x25, x23, x21, x19))%core,
uint32_t x35, uint8_t x36 = addcarryx_u32(0x0, x3, x19);
uint32_t x38, uint8_t x39 = addcarryx_u32(x36, x5, x21);
uint32_t x41, uint8_t x42 = addcarryx_u32(x39, x7, x23);
uint32_t x44, uint8_t x45 = addcarryx_u32(x42, x9, x25);
uint32_t x47, uint8_t x48 = addcarryx_u32(x45, x11, x27);
uint32_t x50, uint8_t x51 = addcarryx_u32(x48, x13, x29);
uint32_t x53, uint8_t x54 = addcarryx_u32(x51, x15, x31);
uint32_t x56, uint8_t x57 = addcarryx_u32(x54, x17, x33);
uint32_t x59, uint8_t x60 = addcarryx_u32(x57, x16, x32);
uint32_t x62, uint8_t x63 = subborrow_u32(0x0, x35, 0xfffffffd);
uint32_t x65, uint8_t x66 = subborrow_u32(x63, x38, 0xffffffff);
uint32_t x68, uint8_t x69 = subborrow_u32(x66, x41, 0xffffffff);
uint32_t x71, uint8_t x72 = subborrow_u32(x69, x44, 0xffffffff);
uint32_t x74, uint8_t x75 = subborrow_u32(x72, x47, 0xffffffff);
uint32_t x77, uint8_t x78 = subborrow_u32(x75, x50, 0xffffffff);
uint32_t x80, uint8_t x81 = subborrow_u32(x78, x53, 0xffffffff);
uint32_t x83, uint8_t x84 = subborrow_u32(x81, x56, 0xffffffff);
uint32_t x86, uint8_t x87 = subborrow_u32(x84, x59, 0x3ff);
uint32_t _, uint8_t x90 = subborrow_u32(x87, x60, 0x0);
(cmovznz32(x90, x86, x59), cmovznz32(x90, x83, x56), cmovznz32(x90, x80, x53), cmovznz32(x90, x77, x50), cmovznz32(x90, x74, x47), cmovznz32(x90, x71, x44), cmovznz32(x90, x68, x41), cmovznz32(x90, x65, x38), cmovznz32(x90, x62, x35))
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t) -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
