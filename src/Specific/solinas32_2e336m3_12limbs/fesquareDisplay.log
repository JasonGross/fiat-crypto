square = λ var : Z.Syntax.base_type → Type,
λ '(x20, x21, x19, x17, x15, x13, x11, x9, x7, x5, x3, x1)%core,
uint64_t x22 = ((uint64_t)x20 * x20);
uint64_t x23 = (((uint64_t)x21 * x20) + ((uint64_t)x20 * x21));
uint64_t x24 = (((uint64_t)x19 * x20) + (((uint64_t)x21 * x21) + ((uint64_t)x20 * x19)));
uint64_t x25 = (((uint64_t)x17 * x20) + (((uint64_t)x19 * x21) + (((uint64_t)x21 * x19) + ((uint64_t)x20 * x17))));
uint64_t x26 = (((uint64_t)x15 * x20) + (((uint64_t)x17 * x21) + (((uint64_t)x19 * x19) + (((uint64_t)x21 * x17) + ((uint64_t)x20 * x15)))));
uint64_t x27 = (((uint64_t)x13 * x20) + (((uint64_t)x15 * x21) + (((uint64_t)x17 * x19) + (((uint64_t)x19 * x17) + (((uint64_t)x21 * x15) + ((uint64_t)x20 * x13))))));
uint64_t x28 = (((uint64_t)x11 * x20) + (((uint64_t)x13 * x21) + (((uint64_t)x15 * x19) + (((uint64_t)x17 * x17) + (((uint64_t)x19 * x15) + (((uint64_t)x21 * x13) + ((uint64_t)x20 * x11)))))));
uint64_t x29 = (((uint64_t)x9 * x20) + (((uint64_t)x11 * x21) + (((uint64_t)x13 * x19) + (((uint64_t)x15 * x17) + (((uint64_t)x17 * x15) + (((uint64_t)x19 * x13) + (((uint64_t)x21 * x11) + ((uint64_t)x20 * x9))))))));
uint64_t x30 = (((uint64_t)x7 * x20) + (((uint64_t)x9 * x21) + (((uint64_t)x11 * x19) + (((uint64_t)x13 * x17) + (((uint64_t)x15 * x15) + (((uint64_t)x17 * x13) + (((uint64_t)x19 * x11) + (((uint64_t)x21 * x9) + ((uint64_t)x20 * x7)))))))));
uint64_t x31 = (((uint64_t)x5 * x20) + (((uint64_t)x7 * x21) + (((uint64_t)x9 * x19) + (((uint64_t)x11 * x17) + (((uint64_t)x13 * x15) + (((uint64_t)x15 * x13) + (((uint64_t)x17 * x11) + (((uint64_t)x19 * x9) + (((uint64_t)x21 * x7) + ((uint64_t)x20 * x5))))))))));
uint64_t x32 = (((uint64_t)x3 * x20) + (((uint64_t)x5 * x21) + (((uint64_t)x7 * x19) + (((uint64_t)x9 * x17) + (((uint64_t)x11 * x15) + (((uint64_t)x13 * x13) + (((uint64_t)x15 * x11) + (((uint64_t)x17 * x9) + (((uint64_t)x19 * x7) + (((uint64_t)x21 * x5) + ((uint64_t)x20 * x3)))))))))));
uint64_t x33 = (((uint64_t)x1 * x20) + (((uint64_t)x3 * x21) + (((uint64_t)x5 * x19) + (((uint64_t)x7 * x17) + (((uint64_t)x9 * x15) + (((uint64_t)x11 * x13) + (((uint64_t)x13 * x11) + (((uint64_t)x15 * x9) + (((uint64_t)x17 * x7) + (((uint64_t)x19 * x5) + (((uint64_t)x21 * x3) + ((uint64_t)x20 * x1))))))))))));
uint64_t x34 = (((uint64_t)x1 * x21) + (((uint64_t)x3 * x19) + (((uint64_t)x5 * x17) + (((uint64_t)x7 * x15) + (((uint64_t)x9 * x13) + (((uint64_t)x11 * x11) + (((uint64_t)x13 * x9) + (((uint64_t)x15 * x7) + (((uint64_t)x17 * x5) + (((uint64_t)x19 * x3) + ((uint64_t)x21 * x1)))))))))));
uint64_t x35 = (((uint64_t)x1 * x19) + (((uint64_t)x3 * x17) + (((uint64_t)x5 * x15) + (((uint64_t)x7 * x13) + (((uint64_t)x9 * x11) + (((uint64_t)x11 * x9) + (((uint64_t)x13 * x7) + (((uint64_t)x15 * x5) + (((uint64_t)x17 * x3) + ((uint64_t)x19 * x1))))))))));
uint64_t x36 = (((uint64_t)x1 * x17) + (((uint64_t)x3 * x15) + (((uint64_t)x5 * x13) + (((uint64_t)x7 * x11) + (((uint64_t)x9 * x9) + (((uint64_t)x11 * x7) + (((uint64_t)x13 * x5) + (((uint64_t)x15 * x3) + ((uint64_t)x17 * x1)))))))));
uint64_t x37 = (((uint64_t)x1 * x15) + (((uint64_t)x3 * x13) + (((uint64_t)x5 * x11) + (((uint64_t)x7 * x9) + (((uint64_t)x9 * x7) + (((uint64_t)x11 * x5) + (((uint64_t)x13 * x3) + ((uint64_t)x15 * x1))))))));
uint64_t x38 = (((uint64_t)x1 * x13) + (((uint64_t)x3 * x11) + (((uint64_t)x5 * x9) + (((uint64_t)x7 * x7) + (((uint64_t)x9 * x5) + (((uint64_t)x11 * x3) + ((uint64_t)x13 * x1)))))));
uint64_t x39 = (((uint64_t)x1 * x11) + (((uint64_t)x3 * x9) + (((uint64_t)x5 * x7) + (((uint64_t)x7 * x5) + (((uint64_t)x9 * x3) + ((uint64_t)x11 * x1))))));
uint64_t x40 = (((uint64_t)x1 * x9) + (((uint64_t)x3 * x7) + (((uint64_t)x5 * x5) + (((uint64_t)x7 * x3) + ((uint64_t)x9 * x1)))));
uint64_t x41 = (((uint64_t)x1 * x7) + (((uint64_t)x3 * x5) + (((uint64_t)x5 * x3) + ((uint64_t)x7 * x1))));
uint64_t x42 = (((uint64_t)x1 * x5) + (((uint64_t)x3 * x3) + ((uint64_t)x5 * x1)));
uint64_t x43 = (((uint64_t)x1 * x3) + ((uint64_t)x3 * x1));
uint64_t x44 = ((uint64_t)x1 * x1);
uint64_t x45 = (x34 + (0x3 * x22));
uint64_t x46 = (x35 + (0x3 * x23));
uint64_t x47 = (x36 + (0x3 * x24));
uint64_t x48 = (x37 + (0x3 * x25));
uint64_t x49 = (x38 + (0x3 * x26));
ℤ x50 = (x39 +ℤ (0x3 * x27));
ℤ x51 = (x40 +ℤ (0x3 * x28));
ℤ x52 = (x41 +ℤ (0x3 *ℤ x29));
ℤ x53 = (x42 +ℤ (0x3 *ℤ x30));
ℤ x54 = (x43 +ℤ (0x3 *ℤ x31));
ℤ x55 = (x44 +ℤ (0x3 *ℤ x32));
uint64_t x56 = (x55 >> 0x1c);
uint32_t x57 = (x55 & 0xfffffff);
ℤ x58 = (x56 +ℤ x54);
uint64_t x59 = (x58 >> 0x1c);
uint32_t x60 = (x58 & 0xfffffff);
ℤ x61 = (x59 +ℤ x53);
uint64_t x62 = (x61 >> 0x1c);
uint32_t x63 = (x61 & 0xfffffff);
ℤ x64 = (x62 +ℤ x52);
uint64_t x65 = (x64 >> 0x1c);
uint32_t x66 = (x64 & 0xfffffff);
ℤ x67 = (x65 +ℤ x51);
uint64_t x68 = (x67 >> 0x1c);
uint32_t x69 = (x67 & 0xfffffff);
ℤ x70 = (x68 +ℤ x50);
uint64_t x71 = (x70 >> 0x1c);
uint32_t x72 = (x70 & 0xfffffff);
uint64_t x73 = (x71 + x49);
uint64_t x74 = (x73 >> 0x1c);
uint32_t x75 = ((uint32_t)x73 & 0xfffffff);
uint64_t x76 = (x74 + x48);
uint64_t x77 = (x76 >> 0x1c);
uint32_t x78 = ((uint32_t)x76 & 0xfffffff);
uint64_t x79 = (x77 + x47);
uint64_t x80 = (x79 >> 0x1c);
uint32_t x81 = ((uint32_t)x79 & 0xfffffff);
uint64_t x82 = (x80 + x46);
uint64_t x83 = (x82 >> 0x1c);
uint32_t x84 = ((uint32_t)x82 & 0xfffffff);
uint64_t x85 = (x83 + x45);
uint64_t x86 = (x85 >> 0x1c);
uint32_t x87 = ((uint32_t)x85 & 0xfffffff);
uint64_t x88 = (x86 + x33);
uint64_t x89 = (x88 >> 0x1c);
uint32_t x90 = ((uint32_t)x88 & 0xfffffff);
uint64_t x91 = (x57 + (0x3 * x89));
uint32_t x92 = (uint32_t) (x91 >> 0x1c);
uint32_t x93 = ((uint32_t)x91 & 0xfffffff);
uint32_t x94 = (x92 + x60);
uint32_t x95 = (x94 >> 0x1c);
uint32_t x96 = (x94 & 0xfffffff);
return (Return x90, Return x87, Return x84, Return x81, Return x78, Return x75, Return x72, Return x69, Return x66, (x95 + x63), Return x96, Return x93)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
