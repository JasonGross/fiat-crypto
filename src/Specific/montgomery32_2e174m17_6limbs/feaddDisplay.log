add = λ var : Z.Syntax.base_type → Type,
λ '(x10, x11, x9, x7, x5, x3, (x20, x21, x19, x17, x15, x13))%core,
uint32_t x23, uint8_t x24 = addcarryx_u32(0x0, x3, x13);
uint32_t x26, uint8_t x27 = addcarryx_u32(x24, x5, x15);
uint32_t x29, uint8_t x30 = addcarryx_u32(x27, x7, x17);
uint32_t x32, uint8_t x33 = addcarryx_u32(x30, x9, x19);
uint32_t x35, uint8_t x36 = addcarryx_u32(x33, x11, x21);
uint32_t x38, uint8_t x39 = addcarryx_u32(x36, x10, x20);
uint32_t x41, uint8_t x42 = subborrow_u32(0x0, x23, 0xffffffef);
uint32_t x44, uint8_t x45 = subborrow_u32(x42, x26, 0xffffffff);
uint32_t x47, uint8_t x48 = subborrow_u32(x45, x29, 0xffffffff);
uint32_t x50, uint8_t x51 = subborrow_u32(x48, x32, 0xffffffff);
uint32_t x53, uint8_t x54 = subborrow_u32(x51, x35, 0xffffffff);
uint32_t x56, uint8_t x57 = subborrow_u32(x54, x38, 0x3fff);
uint32_t _, uint8_t x60 = subborrow_u32(x57, x39, 0x0);
(cmovznz32(x60, x56, x38), cmovznz32(x60, x53, x35), cmovznz32(x60, x50, x32), cmovznz32(x60, x47, x29), cmovznz32(x60, x44, x26), cmovznz32(x60, x41, x23))
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t) -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
