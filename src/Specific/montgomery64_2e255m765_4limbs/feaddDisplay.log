add = λ var : Z.Syntax.base_type → Type,
λ '(x6, x7, x5, x3, (x12, x13, x11, x9))%core,
uint64_t x15, uint8_t x16 = addcarryx_u64(0x0, x3, x9);
uint64_t x18, uint8_t x19 = addcarryx_u64(x16, x5, x11);
uint64_t x21, uint8_t x22 = addcarryx_u64(x19, x7, x13);
uint64_t x24, uint8_t x25 = addcarryx_u64(x22, x6, x12);
uint64_t x27, uint8_t x28 = subborrow_u64(0x0, x15, 0xfffffffffffffd03L);
uint64_t x30, uint8_t x31 = subborrow_u64(x28, x18, 0xffffffffffffffffL);
uint64_t x33, uint8_t x34 = subborrow_u64(x31, x21, 0xffffffffffffffffL);
uint64_t x36, uint8_t x37 = subborrow_u64(x34, x24, 0x7fffffffffffffffL);
uint64_t _, uint8_t x40 = subborrow_u64(x37, x25, 0x0);
(cmovznz64(x40, x36, x24), cmovznz64(x40, x33, x21), cmovznz64(x40, x30, x18), cmovznz64(x40, x27, x15))
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * uint64_t * (uint64_t * uint64_t * uint64_t * uint64_t) -> uint64_t * uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
