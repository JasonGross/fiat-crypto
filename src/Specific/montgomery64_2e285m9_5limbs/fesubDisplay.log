sub = λ var : Z.Syntax.base_type → Type,
λ '(x8, x9, x7, x5, x3, (x16, x17, x15, x13, x11))%core,
uint64_t x19, uint8_t x20 = subborrow_u64(0x0, x3, x11);
uint64_t x22, uint8_t x23 = subborrow_u64(x20, x5, x13);
uint64_t x25, uint8_t x26 = subborrow_u64(x23, x7, x15);
uint64_t x28, uint8_t x29 = subborrow_u64(x26, x9, x17);
uint64_t x31, uint8_t x32 = subborrow_u64(x29, x8, x16);
uint64_t x33 = cmovznz64(x32, 0x0, 0xffffffffffffffffL);
uint64_t x35, uint8_t x36 = addcarryx_u64(0x0, x19, (x33 & 0xfffffffffffffff7L));
uint64_t x38, uint8_t x39 = addcarryx_u64(x36, x22, (x33 & 0xffffffffffffffffL));
uint64_t x41, uint8_t x42 = addcarryx_u64(x39, x25, (x33 & 0xffffffffffffffffL));
uint64_t x44, uint8_t x45 = addcarryx_u64(x42, x28, (x33 & 0xffffffffffffffffL));
uint64_t x47, uint8_t _ = addcarryx_u64(x45, x31, (x33 & 0x1fffffff));
(Return x47, Return x44, Return x41, Return x38, Return x35)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t) -> uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
