add = λ var : Z.Syntax.base_type → Type,
λ '(x8, x9, x7, x5, x3, (x16, x17, x15, x13, x11))%core,
uint64_t x19, uint8_t x20 = addcarryx_u64(0x0, x3, x11);
uint64_t x22, uint8_t x23 = addcarryx_u64(x20, x5, x13);
uint64_t x25, uint8_t x26 = addcarryx_u64(x23, x7, x15);
uint64_t x28, uint8_t x29 = addcarryx_u64(x26, x9, x17);
uint64_t x31, uint8_t x32 = addcarryx_u64(x29, x8, x16);
uint64_t x34, uint8_t x35 = subborrow_u64(0x0, x19, 0xfffffffffffffff7L);
uint64_t x37, uint8_t x38 = subborrow_u64(x35, x22, 0xffffffffffffffffL);
uint64_t x40, uint8_t x41 = subborrow_u64(x38, x25, 0xffffffffffffffffL);
uint64_t x43, uint8_t x44 = subborrow_u64(x41, x28, 0xffffffffffffffffL);
uint64_t x46, uint8_t x47 = subborrow_u64(x44, x31, 0x1fffffff);
uint64_t _, uint8_t x50 = subborrow_u64(x47, x32, 0x0);
(cmovznz64(x50, x46, x31), cmovznz64(x50, x43, x28), cmovznz64(x50, x40, x25), cmovznz64(x50, x37, x22), cmovznz64(x50, x34, x19))
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t) -> uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
