sub = λ var : Z.Syntax.base_type → Type,
λ '(x38, x39, x37, x35, x33, x31, x29, x27, x25, x23, x21, x19, x17, x15, x13, x11, x9, x7, x5, x3, (x76, x77, x75, x73, x71, x69, x67, x65, x63, x61, x59, x57, x55, x53, x51, x49, x47, x45, x43, x41))%core,
(((0x7ffffe + x38) - x76), ((0xfffffe + x39) - x77), ((0x7ffffe + x37) - x75), ((0xfffffe + x35) - x73), ((0x7ffffe + x33) - x71), ((0xfffffe + x31) - x69), ((0x7ffffe + x29) - x67), ((0xfffffe + x27) - x65), ((0x7ffffe + x25) - x63), ((0xfffffc + x23) - x61), ((0x7ffffe + x21) - x59), ((0xfffffe + x19) - x57), ((0x7ffffe + x17) - x55), ((0xfffffe + x15) - x53), ((0x7ffffe + x13) - x51), ((0xfffffe + x11) - x49), ((0x7ffffe + x9) - x47), ((0xfffffe + x7) - x45), ((0x7ffffe + x5) - x43), ((0xfffffe + x3) - x41))
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t) -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
