square = λ var : Z.Syntax.base_type → Type,
λ '(x14, x15, x13, x11, x9, x7, x5, x3, x1)%core,
uint128_t x16 = ((uint128_t)x14 * x14);
uint128_t x17 = (((uint128_t)x15 * x14) + ((uint128_t)x14 * x15));
uint128_t x18 = (((uint128_t)x13 * x14) + (((uint128_t)x15 * x15) + ((uint128_t)x14 * x13)));
uint128_t x19 = (((uint128_t)x11 * x14) + (((uint128_t)x13 * x15) + (((uint128_t)x15 * x13) + ((uint128_t)x14 * x11))));
uint128_t x20 = (((uint128_t)x9 * x14) + (((uint128_t)x11 * x15) + (((uint128_t)x13 * x13) + (((uint128_t)x15 * x11) + ((uint128_t)x14 * x9)))));
uint128_t x21 = (((uint128_t)x7 * x14) + (((uint128_t)x9 * x15) + (((uint128_t)x11 * x13) + (((uint128_t)x13 * x11) + (((uint128_t)x15 * x9) + ((uint128_t)x14 * x7))))));
uint128_t x22 = (((uint128_t)x5 * x14) + (((uint128_t)x7 * x15) + (((uint128_t)x9 * x13) + (((uint128_t)x11 * x11) + (((uint128_t)x13 * x9) + (((uint128_t)x15 * x7) + ((uint128_t)x14 * x5)))))));
uint128_t x23 = (((uint128_t)x3 * x14) + (((uint128_t)x5 * x15) + (((uint128_t)x7 * x13) + (((uint128_t)x9 * x11) + (((uint128_t)x11 * x9) + (((uint128_t)x13 * x7) + (((uint128_t)x15 * x5) + ((uint128_t)x14 * x3))))))));
uint128_t x24 = (((uint128_t)x1 * x14) + (((uint128_t)x3 * x15) + (((uint128_t)x5 * x13) + (((uint128_t)x7 * x11) + (((uint128_t)x9 * x9) + (((uint128_t)x11 * x7) + (((uint128_t)x13 * x5) + (((uint128_t)x15 * x3) + ((uint128_t)x14 * x1)))))))));
uint128_t x25 = (((uint128_t)x1 * x15) + (((uint128_t)x3 * x13) + (((uint128_t)x5 * x11) + (((uint128_t)x7 * x9) + (((uint128_t)x9 * x7) + (((uint128_t)x11 * x5) + (((uint128_t)x13 * x3) + ((uint128_t)x15 * x1))))))));
uint128_t x26 = (((uint128_t)x1 * x13) + (((uint128_t)x3 * x11) + (((uint128_t)x5 * x9) + (((uint128_t)x7 * x7) + (((uint128_t)x9 * x5) + (((uint128_t)x11 * x3) + ((uint128_t)x13 * x1)))))));
uint128_t x27 = (((uint128_t)x1 * x11) + (((uint128_t)x3 * x9) + (((uint128_t)x5 * x7) + (((uint128_t)x7 * x5) + (((uint128_t)x9 * x3) + ((uint128_t)x11 * x1))))));
uint128_t x28 = (((uint128_t)x1 * x9) + (((uint128_t)x3 * x7) + (((uint128_t)x5 * x5) + (((uint128_t)x7 * x3) + ((uint128_t)x9 * x1)))));
uint128_t x29 = (((uint128_t)x1 * x7) + (((uint128_t)x3 * x5) + (((uint128_t)x5 * x3) + ((uint128_t)x7 * x1))));
uint128_t x30 = (((uint128_t)x1 * x5) + (((uint128_t)x3 * x3) + ((uint128_t)x5 * x1)));
uint128_t x31 = (((uint128_t)x1 * x3) + ((uint128_t)x3 * x1));
uint128_t x32 = ((uint128_t)x1 * x1);
uint128_t x33 = (x25 + (0x1f * x16));
uint128_t x34 = (x26 + (0x1f * x17));
uint128_t x35 = (x27 + (0x1f * x18));
uint128_t x36 = (x28 + (0x1f * x19));
uint128_t x37 = (x29 + (0x1f * x20));
uint128_t x38 = (x30 + (0x1f * x21));
uint128_t x39 = (x31 + (0x1f * x22));
uint128_t x40 = (x32 + (0x1f * x23));
uint128_t x41 = (x40 >> 0x37);
uint64_t x42 = ((uint64_t)x40 & 0x7fffffffffffff);
uint128_t x43 = (x41 + x39);
uint128_t x44 = (x43 >> 0x37);
uint64_t x45 = ((uint64_t)x43 & 0x7fffffffffffff);
uint128_t x46 = (x44 + x38);
uint128_t x47 = (x46 >> 0x37);
uint64_t x48 = ((uint64_t)x46 & 0x7fffffffffffff);
uint128_t x49 = (x47 + x37);
uint128_t x50 = (x49 >> 0x37);
uint64_t x51 = ((uint64_t)x49 & 0x7fffffffffffff);
uint128_t x52 = (x50 + x36);
uint128_t x53 = (x52 >> 0x37);
uint64_t x54 = ((uint64_t)x52 & 0x7fffffffffffff);
uint128_t x55 = (x53 + x35);
uint128_t x56 = (x55 >> 0x37);
uint64_t x57 = ((uint64_t)x55 & 0x7fffffffffffff);
uint128_t x58 = (x56 + x34);
uint128_t x59 = (x58 >> 0x37);
uint64_t x60 = ((uint64_t)x58 & 0x7fffffffffffff);
uint128_t x61 = (x59 + x33);
uint64_t x62 = (uint64_t) (x61 >> 0x37);
uint64_t x63 = ((uint64_t)x61 & 0x7fffffffffffff);
uint128_t x64 = (x62 + x24);
uint64_t x65 = (uint64_t) (x64 >> 0x37);
uint64_t x66 = ((uint64_t)x64 & 0x7fffffffffffff);
uint128_t x67 = (x42 + ((uint128_t)0x1f * x65));
uint64_t x68 = (uint64_t) (x67 >> 0x37);
uint64_t x69 = ((uint64_t)x67 & 0x7fffffffffffff);
uint64_t x70 = (x68 + x45);
uint64_t x71 = (x70 >> 0x37);
uint64_t x72 = (x70 & 0x7fffffffffffff);
return (Return x66, Return x63, Return x60, Return x57, Return x54, Return x51, (x71 + x48), Return x72, Return x69)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t -> uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
