square = λ var : Z.Syntax.base_type → Type,
λ '(x8, x9, x7, x5, x3, x1)%core,
uint128_t x10 = (0x2 * ((uint128_t)x8 * x8));
uint128_t x11 = ((0x2 * ((uint128_t)x9 * x8)) + (0x2 * ((uint128_t)x8 * x9)));
uint128_t x12 = (((uint128_t)x7 * x8) + (((uint128_t)x9 * x9) + ((uint128_t)x8 * x7)));
uint128_t x13 = ((0x2 * ((uint128_t)x5 * x8)) + (((uint128_t)x7 * x9) + (((uint128_t)x9 * x7) + (0x2 * ((uint128_t)x8 * x5)))));
uint128_t x14 = ((0x2 * ((uint128_t)x3 * x8)) + ((0x2 * ((uint128_t)x5 * x9)) + (((uint128_t)x7 * x7) + ((0x2 * ((uint128_t)x9 * x5)) + (0x2 * ((uint128_t)x8 * x3))))));
uint128_t x15 = (((uint128_t)x1 * x8) + (((uint128_t)x3 * x9) + (((uint128_t)x5 * x7) + (((uint128_t)x7 * x5) + (((uint128_t)x9 * x3) + ((uint128_t)x8 * x1))))));
uint128_t x16 = (((uint128_t)x1 * x9) + (((uint128_t)x3 * x7) + ((0x2 * ((uint128_t)x5 * x5)) + (((uint128_t)x7 * x3) + ((uint128_t)x9 * x1)))));
uint128_t x17 = (((uint128_t)x1 * x7) + ((0x2 * ((uint128_t)x3 * x5)) + ((0x2 * ((uint128_t)x5 * x3)) + ((uint128_t)x7 * x1))));
uint128_t x18 = (((uint128_t)x1 * x5) + (((uint128_t)x3 * x3) + ((uint128_t)x5 * x1)));
uint128_t x19 = (((uint128_t)x1 * x3) + ((uint128_t)x3 * x1));
uint128_t x20 = ((uint128_t)x1 * x1);
uint128_t x21 = (x16 + ((0x3d1 * x10) + (0x100000000 * x10)));
uint128_t x22 = (x17 + ((0x3d1 * x11) + (0x100000000 * x11)));
uint128_t x23 = (x18 + ((0x3d1 * x12) + (0x100000000 * x12)));
uint128_t x24 = (x19 + ((0x3d1 * x13) + (0x100000000 * x13)));
uint128_t x25 = (x20 + ((0x3d1 * x14) + (0x100000000 * x14)));
uint64_t x26 = (uint64_t) (x15 >> 0x2a);
uint64_t x27 = ((uint64_t)x15 & 0x3ffffffffff);
uint128_t x28 = (((uint128_t)0x40000000000 * x26) + x27);
uint64_t x29 = (uint64_t) (x28 >> 0x2a);
uint64_t x30 = ((uint64_t)x28 & 0x3ffffffffff);
uint128_t x31 = (((uint128_t)0x40000000000 * x29) + x30);
uint64_t x32 = (uint64_t) (x31 >> 0x2a);
uint64_t x33 = ((uint64_t)x31 & 0x3ffffffffff);
uint128_t x34 = (x25 + ((0x3d1 * x32) + ((uint128_t)0x100000000 * x32)));
uint128_t x35 = (x34 >> 0x2b);
uint64_t x36 = ((uint64_t)x34 & 0x7ffffffffff);
uint128_t x37 = (x35 + x24);
uint128_t x38 = (x37 >> 0x2b);
uint64_t x39 = ((uint64_t)x37 & 0x7ffffffffff);
uint128_t x40 = (x38 + x23);
uint128_t x41 = (x40 >> 0x2a);
uint64_t x42 = ((uint64_t)x40 & 0x3ffffffffff);
uint128_t x43 = (x41 + x22);
uint128_t x44 = (x43 >> 0x2b);
uint64_t x45 = ((uint64_t)x43 & 0x7ffffffffff);
uint128_t x46 = (x44 + x21);
uint128_t x47 = (x46 >> 0x2b);
uint64_t x48 = ((uint64_t)x46 & 0x7ffffffffff);
uint128_t x49 = (x47 + x33);
uint64_t x50 = (uint64_t) (x49 >> 0x2a);
uint64_t x51 = ((uint64_t)x49 & 0x3ffffffffff);
uint128_t x52 = (x36 + ((0x3d1 * x50) + ((uint128_t)0x100000000 * x50)));
uint64_t x53 = (uint64_t) (x52 >> 0x2b);
uint64_t x54 = ((uint64_t)x52 & 0x7ffffffffff);
uint64_t x55 = (x54 >> 0x2b);
uint64_t x56 = (x54 & 0x7ffffffffff);
return (Return x51, Return x48, Return x45, Return x42, (x55 + (x53 + x39)), Return x56)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t -> uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
