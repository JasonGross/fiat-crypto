sub = λ var : Z.Syntax.base_type → Type,
λ '(x10, x11, x9, x7, x5, x3, (x20, x21, x19, x17, x15, x13))%core,
(((0x7fffffe + x10) - x20), ((0x7fffffe + x11) - x21), ((0xffffffe + x9) - x19), ((0x7fffffe + x7) - x17), ((0x7fffffe + x5) - x15), ((0xfffffe2 + x3) - x13))
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t) -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
