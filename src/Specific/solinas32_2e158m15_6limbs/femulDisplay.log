mul = λ var : Z.Syntax.base_type → Type,
λ '(x10, x11, x9, x7, x5, x3, (x20, x21, x19, x17, x15, x13))%core,
uint64_t x22 = ((uint64_t)x10 * x20);
uint64_t x23 = ((0x2 * ((uint64_t)x11 * x20)) + (0x2 * ((uint64_t)x10 * x21)));
uint64_t x24 = (((uint64_t)x9 * x20) + ((0x2 * ((uint64_t)x11 * x21)) + ((uint64_t)x10 * x19)));
uint64_t x25 = (((uint64_t)x7 * x20) + (((uint64_t)x9 * x21) + (((uint64_t)x11 * x19) + ((uint64_t)x10 * x17))));
uint64_t x26 = ((0x2 * ((uint64_t)x5 * x20)) + ((0x2 * ((uint64_t)x7 * x21)) + (((uint64_t)x9 * x19) + ((0x2 * ((uint64_t)x11 * x17)) + (0x2 * ((uint64_t)x10 * x15))))));
uint64_t x27 = (((uint64_t)x3 * x20) + ((0x2 * ((uint64_t)x5 * x21)) + (((uint64_t)x7 * x19) + (((uint64_t)x9 * x17) + ((0x2 * ((uint64_t)x11 * x15)) + ((uint64_t)x10 * x13))))));
uint64_t x28 = (((uint64_t)x3 * x21) + (((uint64_t)x5 * x19) + (((uint64_t)x7 * x17) + (((uint64_t)x9 * x15) + ((uint64_t)x11 * x13)))));
uint64_t x29 = (((uint64_t)x3 * x19) + ((0x2 * ((uint64_t)x5 * x17)) + ((0x2 * ((uint64_t)x7 * x15)) + ((uint64_t)x9 * x13))));
uint64_t x30 = (((uint64_t)x3 * x17) + ((0x2 * ((uint64_t)x5 * x15)) + ((uint64_t)x7 * x13)));
uint64_t x31 = (((uint64_t)x3 * x15) + ((uint64_t)x5 * x13));
uint64_t x32 = ((uint64_t)x3 * x13);
uint64_t x33 = (x28 + (0xf * x22));
uint64_t x34 = (x29 + (0xf * x23));
uint64_t x35 = (x30 + (0xf * x24));
uint64_t x36 = (x31 + (0xf * x25));
uint64_t x37 = (x32 + (0xf * x26));
uint64_t x38 = (x37 >> 0x1b);
uint32_t x39 = ((uint32_t)x37 & 0x7ffffff);
uint64_t x40 = (x38 + x36);
uint64_t x41 = (x40 >> 0x1a);
uint32_t x42 = ((uint32_t)x40 & 0x3ffffff);
uint64_t x43 = (x41 + x35);
uint64_t x44 = (x43 >> 0x1a);
uint32_t x45 = ((uint32_t)x43 & 0x3ffffff);
uint64_t x46 = (x44 + x34);
uint64_t x47 = (x46 >> 0x1b);
uint32_t x48 = ((uint32_t)x46 & 0x7ffffff);
uint64_t x49 = (x47 + x33);
uint64_t x50 = (x49 >> 0x1a);
uint32_t x51 = ((uint32_t)x49 & 0x3ffffff);
uint64_t x52 = (x50 + x27);
uint64_t x53 = (x52 >> 0x1a);
uint32_t x54 = ((uint32_t)x52 & 0x3ffffff);
uint64_t x55 = (x39 + (0xf * x53));
uint32_t x56 = (uint32_t) (x55 >> 0x1b);
uint32_t x57 = ((uint32_t)x55 & 0x7ffffff);
uint32_t x58 = (x56 + x42);
uint32_t x59 = (x58 >> 0x1a);
uint32_t x60 = (x58 & 0x3ffffff);
return (Return x54, Return x51, Return x48, (x59 + x45), Return x60, Return x57)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t) -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
