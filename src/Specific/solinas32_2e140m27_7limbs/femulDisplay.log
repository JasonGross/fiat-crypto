mul = λ var : Z.Syntax.base_type → Type,
λ '(x12, x13, x11, x9, x7, x5, x3, (x24, x25, x23, x21, x19, x17, x15))%core,
uint64_t x26 = ((uint64_t)x12 * x24);
uint64_t x27 = (((uint64_t)x13 * x24) + ((uint64_t)x12 * x25));
uint64_t x28 = (((uint64_t)x11 * x24) + (((uint64_t)x13 * x25) + ((uint64_t)x12 * x23)));
uint64_t x29 = (((uint64_t)x9 * x24) + (((uint64_t)x11 * x25) + (((uint64_t)x13 * x23) + ((uint64_t)x12 * x21))));
uint64_t x30 = (((uint64_t)x7 * x24) + (((uint64_t)x9 * x25) + (((uint64_t)x11 * x23) + (((uint64_t)x13 * x21) + ((uint64_t)x12 * x19)))));
uint64_t x31 = (((uint64_t)x5 * x24) + (((uint64_t)x7 * x25) + (((uint64_t)x9 * x23) + (((uint64_t)x11 * x21) + (((uint64_t)x13 * x19) + ((uint64_t)x12 * x17))))));
uint64_t x32 = (((uint64_t)x3 * x24) + (((uint64_t)x5 * x25) + (((uint64_t)x7 * x23) + (((uint64_t)x9 * x21) + (((uint64_t)x11 * x19) + (((uint64_t)x13 * x17) + ((uint64_t)x12 * x15)))))));
uint64_t x33 = (((uint64_t)x3 * x25) + (((uint64_t)x5 * x23) + (((uint64_t)x7 * x21) + (((uint64_t)x9 * x19) + (((uint64_t)x11 * x17) + ((uint64_t)x13 * x15))))));
uint64_t x34 = (((uint64_t)x3 * x23) + (((uint64_t)x5 * x21) + (((uint64_t)x7 * x19) + (((uint64_t)x9 * x17) + ((uint64_t)x11 * x15)))));
uint64_t x35 = (((uint64_t)x3 * x21) + (((uint64_t)x5 * x19) + (((uint64_t)x7 * x17) + ((uint64_t)x9 * x15))));
uint64_t x36 = (((uint64_t)x3 * x19) + (((uint64_t)x5 * x17) + ((uint64_t)x7 * x15)));
uint64_t x37 = (((uint64_t)x3 * x17) + ((uint64_t)x5 * x15));
uint64_t x38 = ((uint64_t)x3 * x15);
uint64_t x39 = (x33 + (0x1b * x26));
uint64_t x40 = (x34 + (0x1b * x27));
uint64_t x41 = (x35 + (0x1b * x28));
uint64_t x42 = (x36 + (0x1b * x29));
uint64_t x43 = (x37 + (0x1b * x30));
uint64_t x44 = (x38 + (0x1b * x31));
uint32_t x45 = (uint32_t) (x44 >> 0x14);
uint32_t x46 = ((uint32_t)x44 & 0xfffff);
uint64_t x47 = (x45 + x43);
uint32_t x48 = (uint32_t) (x47 >> 0x14);
uint32_t x49 = ((uint32_t)x47 & 0xfffff);
uint64_t x50 = (x48 + x42);
uint32_t x51 = (uint32_t) (x50 >> 0x14);
uint32_t x52 = ((uint32_t)x50 & 0xfffff);
uint64_t x53 = (x51 + x41);
uint32_t x54 = (uint32_t) (x53 >> 0x14);
uint32_t x55 = ((uint32_t)x53 & 0xfffff);
uint64_t x56 = (x54 + x40);
uint32_t x57 = (uint32_t) (x56 >> 0x14);
uint32_t x58 = ((uint32_t)x56 & 0xfffff);
uint64_t x59 = (x57 + x39);
uint32_t x60 = (uint32_t) (x59 >> 0x14);
uint32_t x61 = ((uint32_t)x59 & 0xfffff);
uint64_t x62 = (x60 + x32);
uint32_t x63 = (uint32_t) (x62 >> 0x14);
uint32_t x64 = ((uint32_t)x62 & 0xfffff);
uint32_t x65 = (x46 + (0x1b * x63));
uint32_t x66 = (x65 >> 0x14);
uint32_t x67 = (x65 & 0xfffff);
uint32_t x68 = (x66 + x49);
uint32_t x69 = (x68 >> 0x14);
uint32_t x70 = (x68 & 0xfffff);
return (Return x64, Return x61, Return x58, Return x55, (x69 + x52), Return x70, Return x67)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t) -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
