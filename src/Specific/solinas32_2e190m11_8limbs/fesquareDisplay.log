square = λ var : Z.Syntax.base_type → Type,
λ '(x12, x13, x11, x9, x7, x5, x3, x1)%core,
uint64_t x14 = (0x2 * ((uint64_t)x12 * x12));
uint64_t x15 = ((0x2 * ((uint64_t)x13 * x12)) + (0x2 * ((uint64_t)x12 * x13)));
uint64_t x16 = ((0x2 * ((uint64_t)x11 * x12)) + ((0x2 * ((uint64_t)x13 * x13)) + (0x2 * ((uint64_t)x12 * x11))));
uint64_t x17 = (((uint64_t)x9 * x12) + (((uint64_t)x11 * x13) + (((uint64_t)x13 * x11) + ((uint64_t)x12 * x9))));
uint64_t x18 = ((0x2 * ((uint64_t)x7 * x12)) + (((uint64_t)x9 * x13) + (((uint64_t)x11 * x11) + (((uint64_t)x13 * x9) + (0x2 * ((uint64_t)x12 * x7))))));
uint64_t x19 = ((0x2 * ((uint64_t)x5 * x12)) + ((0x2 * ((uint64_t)x7 * x13)) + (((uint64_t)x9 * x11) + (((uint64_t)x11 * x9) + ((0x2 * ((uint64_t)x13 * x7)) + (0x2 * ((uint64_t)x12 * x5)))))));
uint64_t x20 = ((0x2 * ((uint64_t)x3 * x12)) + ((0x2 * ((uint64_t)x5 * x13)) + ((0x2 * ((uint64_t)x7 * x11)) + (((uint64_t)x9 * x9) + ((0x2 * ((uint64_t)x11 * x7)) + ((0x2 * ((uint64_t)x13 * x5)) + (0x2 * ((uint64_t)x12 * x3))))))));
uint64_t x21 = (((uint64_t)x1 * x12) + (((uint64_t)x3 * x13) + (((uint64_t)x5 * x11) + (((uint64_t)x7 * x9) + (((uint64_t)x9 * x7) + (((uint64_t)x11 * x5) + (((uint64_t)x13 * x3) + ((uint64_t)x12 * x1))))))));
uint64_t x22 = (((uint64_t)x1 * x13) + (((uint64_t)x3 * x11) + (((uint64_t)x5 * x9) + ((0x2 * ((uint64_t)x7 * x7)) + (((uint64_t)x9 * x5) + (((uint64_t)x11 * x3) + ((uint64_t)x13 * x1)))))));
uint64_t x23 = (((uint64_t)x1 * x11) + (((uint64_t)x3 * x9) + ((0x2 * ((uint64_t)x5 * x7)) + ((0x2 * ((uint64_t)x7 * x5)) + (((uint64_t)x9 * x3) + ((uint64_t)x11 * x1))))));
uint64_t x24 = (((uint64_t)x1 * x9) + ((0x2 * ((uint64_t)x3 * x7)) + ((0x2 * ((uint64_t)x5 * x5)) + ((0x2 * ((uint64_t)x7 * x3)) + ((uint64_t)x9 * x1)))));
uint64_t x25 = (((uint64_t)x1 * x7) + (((uint64_t)x3 * x5) + (((uint64_t)x5 * x3) + ((uint64_t)x7 * x1))));
uint64_t x26 = (((uint64_t)x1 * x5) + (((uint64_t)x3 * x3) + ((uint64_t)x5 * x1)));
uint64_t x27 = (((uint64_t)x1 * x3) + ((uint64_t)x3 * x1));
uint64_t x28 = ((uint64_t)x1 * x1);
uint64_t x29 = (x22 + (0xb * x14));
uint64_t x30 = (x23 + (0xb * x15));
uint64_t x31 = (x24 + (0xb * x16));
uint64_t x32 = (x25 + (0xb * x17));
uint64_t x33 = (x26 + (0xb * x18));
uint64_t x34 = (x27 + (0xb * x19));
uint64_t x35 = (x28 + (0xb * x20));
uint64_t x36 = (x35 >> 0x18);
uint32_t x37 = ((uint32_t)x35 & 0xffffff);
uint64_t x38 = (x36 + x34);
uint64_t x39 = (x38 >> 0x18);
uint32_t x40 = ((uint32_t)x38 & 0xffffff);
uint64_t x41 = (x39 + x33);
uint64_t x42 = (x41 >> 0x18);
uint32_t x43 = ((uint32_t)x41 & 0xffffff);
uint64_t x44 = (x42 + x32);
uint64_t x45 = (x44 >> 0x17);
uint32_t x46 = ((uint32_t)x44 & 0x7fffff);
uint64_t x47 = (x45 + x31);
uint64_t x48 = (x47 >> 0x18);
uint32_t x49 = ((uint32_t)x47 & 0xffffff);
uint64_t x50 = (x48 + x30);
uint64_t x51 = (x50 >> 0x18);
uint32_t x52 = ((uint32_t)x50 & 0xffffff);
uint64_t x53 = (x51 + x29);
uint32_t x54 = (uint32_t) (x53 >> 0x18);
uint32_t x55 = ((uint32_t)x53 & 0xffffff);
uint64_t x56 = (x54 + x21);
uint32_t x57 = (uint32_t) (x56 >> 0x17);
uint32_t x58 = ((uint32_t)x56 & 0x7fffff);
uint64_t x59 = (x37 + ((uint64_t)0xb * x57));
uint32_t x60 = (uint32_t) (x59 >> 0x18);
uint32_t x61 = ((uint32_t)x59 & 0xffffff);
uint32_t x62 = (x60 + x40);
uint32_t x63 = (x62 >> 0x18);
uint32_t x64 = (x62 & 0xffffff);
return (Return x58, Return x55, Return x52, Return x49, Return x46, (x63 + x43), Return x64, Return x61)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t -> uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t * uint32_t)

Argument scope is [function_scope]
