square = λ var : Z.Syntax.base_type → Type,
λ '(x6, x7, x5, x3, x1)%core,
uint128_t x8 = ((uint128_t)x6 * x6);
uint128_t x9 = (((uint128_t)x7 * x6) + ((uint128_t)x6 * x7));
uint128_t x10 = (((uint128_t)x5 * x6) + (((uint128_t)x7 * x7) + ((uint128_t)x6 * x5)));
uint128_t x11 = (((uint128_t)x3 * x6) + (((uint128_t)x5 * x7) + (((uint128_t)x7 * x5) + ((uint128_t)x6 * x3))));
uint128_t x12 = (((uint128_t)x1 * x6) + (((uint128_t)x3 * x7) + (((uint128_t)x5 * x5) + (((uint128_t)x7 * x3) + ((uint128_t)x6 * x1)))));
uint128_t x13 = (((uint128_t)x1 * x7) + (((uint128_t)x3 * x5) + (((uint128_t)x5 * x3) + ((uint128_t)x7 * x1))));
uint128_t x14 = (((uint128_t)x1 * x5) + (((uint128_t)x3 * x3) + ((uint128_t)x5 * x1)));
uint128_t x15 = (((uint128_t)x1 * x3) + ((uint128_t)x3 * x1));
uint128_t x16 = ((uint128_t)x1 * x1);
uint128_t x17 = (x13 + (0x2fd * x8));
uint128_t x18 = (x14 + (0x2fd * x9));
uint128_t x19 = (x15 + (0x2fd * x10));
uint128_t x20 = (x16 + (0x2fd * x11));
uint128_t x21 = (x20 >> 0x33);
uint64_t x22 = ((uint64_t)x20 & 0x7ffffffffffff);
uint128_t x23 = (x21 + x19);
uint128_t x24 = (x23 >> 0x33);
uint64_t x25 = ((uint64_t)x23 & 0x7ffffffffffff);
uint128_t x26 = (x24 + x18);
uint128_t x27 = (x26 >> 0x33);
uint64_t x28 = ((uint64_t)x26 & 0x7ffffffffffff);
uint128_t x29 = (x27 + x17);
uint128_t x30 = (x29 >> 0x33);
uint64_t x31 = ((uint64_t)x29 & 0x7ffffffffffff);
uint128_t x32 = (x30 + x12);
uint64_t x33 = (uint64_t) (x32 >> 0x33);
uint64_t x34 = ((uint64_t)x32 & 0x7ffffffffffff);
uint128_t x35 = (x22 + ((uint128_t)0x2fd * x33));
uint64_t x36 = (uint64_t) (x35 >> 0x33);
uint64_t x37 = ((uint64_t)x35 & 0x7ffffffffffff);
uint64_t x38 = (x36 + x25);
uint64_t x39 = (x38 >> 0x33);
uint64_t x40 = (x38 & 0x7ffffffffffff);
return (Return x34, Return x31, (x39 + x28), Return x40, Return x37)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t -> uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
