sub = λ var : Z.Syntax.base_type → Type,
λ '(x12, x13, x11, x9, x7, x5, x3, (x24, x25, x23, x21, x19, x17, x15))%core,
(((0x1ffffffffe + x12) - x24), ((0x3ffffffffe + x13) - x25), ((0x1ffffffffe + x11) - x23), ((0x3ffffffffe + x9) - x21), ((0x1ffffffffe + x7) - x19), ((0x3ffffffffe + x5) - x17), ((0x3dfffff85e + x3) - x15))
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t) -> uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
