square = λ var : Z.Syntax.base_type → Type,
λ '(x10, x11, x9, x7, x5, x3, x1)%core,
uint128_t x12 = (0x2 * ((uint128_t)x10 * x10));
uint128_t x13 = (((uint128_t)x11 * x10) + ((uint128_t)x10 * x11));
uint128_t x14 = ((0x2 * ((uint128_t)x9 * x10)) + (((uint128_t)x11 * x11) + (0x2 * ((uint128_t)x10 * x9))));
uint128_t x15 = (((uint128_t)x7 * x10) + (((uint128_t)x9 * x11) + (((uint128_t)x11 * x9) + ((uint128_t)x10 * x7))));
uint128_t x16 = ((0x2 * ((uint128_t)x5 * x10)) + (((uint128_t)x7 * x11) + ((0x2 * ((uint128_t)x9 * x9)) + (((uint128_t)x11 * x7) + (0x2 * ((uint128_t)x10 * x5))))));
uint128_t x17 = ((0x2 * ((uint128_t)x3 * x10)) + ((0x2 * ((uint128_t)x5 * x11)) + ((0x2 * ((uint128_t)x7 * x9)) + ((0x2 * ((uint128_t)x9 * x7)) + ((0x2 * ((uint128_t)x11 * x5)) + (0x2 * ((uint128_t)x10 * x3)))))));
uint128_t x18 = (((uint128_t)x1 * x10) + (((uint128_t)x3 * x11) + ((0x2 * ((uint128_t)x5 * x9)) + (((uint128_t)x7 * x7) + ((0x2 * ((uint128_t)x9 * x5)) + (((uint128_t)x11 * x3) + ((uint128_t)x10 * x1)))))));
uint128_t x19 = (((uint128_t)x1 * x11) + ((0x2 * ((uint128_t)x3 * x9)) + ((0x2 * ((uint128_t)x5 * x7)) + ((0x2 * ((uint128_t)x7 * x5)) + ((0x2 * ((uint128_t)x9 * x3)) + ((uint128_t)x11 * x1))))));
uint128_t x20 = (((uint128_t)x1 * x9) + (((uint128_t)x3 * x7) + ((0x2 * ((uint128_t)x5 * x5)) + (((uint128_t)x7 * x3) + ((uint128_t)x9 * x1)))));
uint128_t x21 = (((uint128_t)x1 * x7) + ((0x2 * ((uint128_t)x3 * x5)) + ((0x2 * ((uint128_t)x5 * x3)) + ((uint128_t)x7 * x1))));
uint128_t x22 = (((uint128_t)x1 * x5) + (((uint128_t)x3 * x3) + ((uint128_t)x5 * x1)));
uint128_t x23 = (((uint128_t)x1 * x3) + ((uint128_t)x3 * x1));
uint128_t x24 = ((uint128_t)x1 * x1);
uint128_t x25 = (x19 + ((0x3d1 * x12) + (0x100000000 * x12)));
uint128_t x26 = (x20 + ((0x3d1 * x13) + (0x100000000 * x13)));
uint128_t x27 = (x21 + ((0x3d1 * x14) + (0x100000000 * x14)));
uint128_t x28 = (x22 + ((0x3d1 * x15) + (0x100000000 * x15)));
uint128_t x29 = (x23 + ((0x3d1 * x16) + (0x100000000 * x16)));
uint128_t x30 = (x24 + ((0x3d1 * x17) + (0x100000000 * x17)));
uint64_t x31 = (uint64_t) (x18 >> 0x24);
uint64_t x32 = ((uint64_t)x18 & 0xfffffffff);
uint128_t x33 = (((uint128_t)0x1000000000 * x31) + x32);
uint64_t x34 = (uint64_t) (x33 >> 0x24);
uint64_t x35 = ((uint64_t)x33 & 0xfffffffff);
uint128_t x36 = (((uint128_t)0x1000000000 * x34) + x35);
uint64_t x37 = (uint64_t) (x36 >> 0x24);
uint64_t x38 = ((uint64_t)x36 & 0xfffffffff);
uint128_t x39 = (x30 + ((0x3d1 * x37) + ((uint128_t)0x100000000 * x37)));
uint128_t x40 = (x39 >> 0x25);
uint64_t x41 = ((uint64_t)x39 & 0x1fffffffff);
uint128_t x42 = (x40 + x29);
uint128_t x43 = (x42 >> 0x25);
uint64_t x44 = ((uint64_t)x42 & 0x1fffffffff);
uint128_t x45 = (x43 + x28);
uint128_t x46 = (x45 >> 0x24);
uint64_t x47 = ((uint64_t)x45 & 0xfffffffff);
uint128_t x48 = (x46 + x27);
uint128_t x49 = (x48 >> 0x25);
uint64_t x50 = ((uint64_t)x48 & 0x1fffffffff);
uint128_t x51 = (x49 + x26);
uint128_t x52 = (x51 >> 0x24);
uint64_t x53 = ((uint64_t)x51 & 0xfffffffff);
uint128_t x54 = (x52 + x25);
uint128_t x55 = (x54 >> 0x25);
uint64_t x56 = ((uint64_t)x54 & 0x1fffffffff);
uint128_t x57 = (x55 + x38);
uint64_t x58 = (uint64_t) (x57 >> 0x24);
uint64_t x59 = ((uint64_t)x57 & 0xfffffffff);
uint128_t x60 = (x41 + ((0x3d1 * x58) + ((uint128_t)0x100000000 * x58)));
uint64_t x61 = (uint64_t) (x60 >> 0x25);
uint64_t x62 = ((uint64_t)x60 & 0x1fffffffff);
uint64_t x63 = (x62 >> 0x25);
uint64_t x64 = (x62 & 0x1fffffffff);
return (Return x59, Return x56, Return x53, Return x50, Return x47, (x63 + (x61 + x44)), Return x64)
     : ∀ var : Z.Syntax.base_type → Type, expr Z.Syntax.base_type Z.Syntax.op (uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t -> uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t * uint64_t)

Argument scope is [function_scope]
